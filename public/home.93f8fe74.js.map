{"version":3,"sources":["../../../node_modules/vue/dist/vue.runtime.esm.js","../../../node_modules/vue-class-component/dist/vue-class-component.esm.js","../../../node_modules/vue-property-decorator/lib/vue-property-decorator.js","../../../node_modules/axios/lib/helpers/bind.js","../../../node_modules/axios/node_modules/is-buffer/index.js","../../../node_modules/axios/lib/utils.js","../../../node_modules/axios/lib/helpers/buildURL.js","../../../node_modules/axios/lib/core/InterceptorManager.js","../../../node_modules/axios/lib/core/transformData.js","../../../node_modules/axios/lib/cancel/isCancel.js","../../../node_modules/axios/lib/helpers/normalizeHeaderName.js","../../../node_modules/axios/lib/core/enhanceError.js","../../../node_modules/axios/lib/core/createError.js","../../../node_modules/axios/lib/core/settle.js","../../../node_modules/axios/lib/helpers/parseHeaders.js","../../../node_modules/axios/lib/helpers/isURLSameOrigin.js","../../../node_modules/axios/lib/helpers/cookies.js","../../../node_modules/axios/lib/adapters/xhr.js","../../../node_modules/process/browser.js","../../../node_modules/axios/lib/defaults.js","../../../node_modules/axios/lib/helpers/isAbsoluteURL.js","../../../node_modules/axios/lib/helpers/combineURLs.js","../../../node_modules/axios/lib/core/dispatchRequest.js","../../../node_modules/axios/lib/core/mergeConfig.js","../../../node_modules/axios/lib/core/Axios.js","../../../node_modules/axios/lib/cancel/Cancel.js","../../../node_modules/axios/lib/cancel/CancelToken.js","../../../node_modules/axios/lib/helpers/spread.js","../../../node_modules/axios/lib/axios.js","../../../node_modules/axios/index.js","../../../node_modules/sweetalert/dist/sweetalert.min.js","main/components/Table.vue","main/components/Navbar.vue","../../../node_modules/querystring-es3/decode.js","../../../node_modules/querystring-es3/encode.js","../../../node_modules/querystring-es3/index.js","../../app/constants.ts","../../../node_modules/tslib/tslib.es6.js","../../../node_modules/reflect-metadata/Reflect.js","../browser/src/util/RandomGenerator.ts","../browser/src/util/StringUtils.ts","../browser/src/schema-builder/table/TableColumn.ts","../browser/src/schema-builder/table/TableIndex.ts","../browser/src/schema-builder/table/TableForeignKey.ts","../browser/src/schema-builder/util/TableUtils.ts","../browser/src/schema-builder/table/TableUnique.ts","../browser/src/schema-builder/table/TableCheck.ts","../browser/src/schema-builder/table/TableExclusion.ts","../browser/src/schema-builder/table/Table.ts","../browser/src/naming-strategy/DefaultNamingStrategy.ts","../browser/src/error/CannotExecuteNotConnectedError.ts","../browser/src/error/CannotConnectAlreadyConnectedError.ts","../browser/src/error/EntityMetadataNotFoundError.ts","../browser/src/migration/Migration.ts","../browser/src/util/PromiseUtils.ts","../browser/src/error/ConnectionIsNotSetError.ts","../browser/src/error/DriverPackageNotInstalledError.ts","../browser/src/driver/DriverUtils.ts","../browser/src/util/ObjectUtils.ts","../browser/src/error/QueryFailedError.ts","../browser/src/error/QueryRunnerAlreadyReleasedError.ts","../browser/src/error/TransactionAlreadyStartedError.ts","../browser/src/error/TransactionNotStartedError.ts","../browser/src/driver/Query.ts","../browser/src/driver/SqlInMemory.ts","../browser/src/query-runner/BaseQueryRunner.ts","../browser/src/schema-builder/view/View.ts","../browser/src/subscriber/Broadcaster.ts","../../../node_modules/base64-js/index.js","../../../node_modules/ieee754/index.js","../../../node_modules/isarray/index.js","../../../node_modules/node-libs-browser/node_modules/buffer/index.js","../browser/src/util/OrmUtils.ts","../browser/src/driver/sqlserver/MssqlParameter.ts","../browser/src/driver/sqlserver/SqlServerQueryRunner.ts","../browser/src/util/DateUtils.ts","../../../node_modules/buffer/index.js","../browser/src/platform/PlatformTools.ts","../browser/src/driver/cockroachdb/CockroachQueryRunner.ts","../browser/src/util/ApplyValueTransformers.ts","../browser/src/driver/cockroachdb/CockroachDriver.ts","../browser/src/platform/BrowserDisabledDriversDummy.ts","../browser/src/schema-builder/RdbmsSchemaBuilder.ts","../browser/src/driver/sqlserver/SqlServerDriver.ts","../browser/src/migration/MigrationExecutor.ts","../browser/src/error/MissingPrimaryColumnError.ts","../browser/src/error/CircularRelationsError.ts","../browser/src/util/DepGraph.ts","../browser/src/error/DataTypeNotSupportedError.ts","../browser/src/error/NoConnectionOptionError.ts","../browser/src/error/InitializedRelationError.ts","../browser/src/metadata-builder/EntityMetadataValidator.ts","../browser/src/error/QueryRunnerProviderAlreadyReleasedError.ts","../browser/src/error/EntityNotFoundError.ts","../browser/src/error/NoNeedToReleaseEntityManagerError.ts","../browser/src/repository/Repository.ts","../browser/src/driver/sqlite-abstract/AbstractSqliteDriver.ts","../browser/src/repository/TreeRepository.ts","../browser/src/error/FindRelationsNotFoundError.ts","../browser/src/find-options/FindOptionsUtils.ts","../browser/src/query-builder/transformer/PlainObjectToNewEntityTransformer.ts","../browser/src/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts","../browser/src/error/CustomRepositoryNotFoundError.ts","../browser/src/error/CustomRepositoryDoesNotHaveEntityError.ts","../browser/src/repository/AbstractRepository.ts","../browser/src/error/CustomRepositoryCannotInheritRepositoryError.ts","../browser/src/error/RepositoryNotFoundError.ts","../browser/src/error/RepositoryNotTreeError.ts","../browser/src/repository/RepositoryFactory.ts","../browser/src/error/TreeRepositoryNotSupportedError.ts","../browser/src/error/MustBeEntityError.ts","../browser/src/persistence/SubjectTopoligicalSorter.ts","../browser/src/error/CannotCreateEntityIdMapError.ts","../browser/src/metadata/EntityMetadata.ts","../browser/src/persistence/SubjectChangedColumnsComputer.ts","../browser/src/error/SubjectWithoutIdentifierError.ts","../browser/src/error/SubjectRemovedAndUpdatedError.ts","../browser/src/subscriber/BroadcasterResult.ts","../browser/src/driver/oracle/OracleQueryRunner.ts","../browser/src/driver/oracle/OracleDriver.ts","../browser/src/persistence/tree/NestedSetSubjectExecutor.ts","../browser/src/error/CannotAttachTreeChildrenEntityError.ts","../browser/src/persistence/tree/ClosureSubjectExecutor.ts","../browser/src/persistence/tree/MaterializedPathSubjectExecutor.ts","../browser/src/persistence/SubjectExecutor.ts","../browser/src/error/CannotDetermineEntityError.ts","../browser/src/persistence/Subject.ts","../browser/src/persistence/subject-builder/OneToManySubjectBuilder.ts","../browser/src/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.ts","../browser/src/persistence/subject-builder/ManyToManySubjectBuilder.ts","../browser/src/persistence/SubjectDatabaseEntityLoader.ts","../browser/src/persistence/subject-builder/CascadesSubjectBuilder.ts","../browser/src/persistence/EntityPersistExecutor.ts","../browser/src/entity-manager/EntityManager.ts","../browser/src/entity-manager/SqljsEntityManager.ts","../browser/src/find-options/FindOperator.ts","../browser/src/metadata/ColumnMetadata.ts","../browser/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.ts","../browser/src/driver/sqljs/SqljsQueryRunner.ts","../browser/src/error/DriverOptionNotSetError.ts","../browser/src/driver/sqljs/SqljsDriver.ts","../browser/src/entity-manager/EntityManagerFactory.ts","../browser/src/error/MissingDriverError.ts","../browser/src/driver/sqlite/SqliteQueryRunner.ts","../browser/src/driver/sqlite/SqliteDriver.ts","../browser/src/driver/cordova/CordovaQueryRunner.ts","../browser/src/driver/cordova/CordovaDriver.ts","../browser/src/driver/react-native/ReactNativeQueryRunner.ts","../browser/src/driver/react-native/ReactNativeDriver.ts","../browser/src/driver/nativescript/NativescriptQueryRunner.ts","../browser/src/driver/nativescript/NativescriptDriver.ts","../browser/src/driver/expo/ExpoQueryRunner.ts","../browser/src/driver/expo/ExpoDriver.ts","../browser/src/driver/DriverFactory.ts","../browser/src/util/DirectoryExportedClassesLoader.ts","../browser/src/container.ts","../browser/src/metadata/IndexMetadata.ts","../browser/src/metadata/RelationMetadata.ts","../browser/src/metadata/EmbeddedMetadata.ts","../browser/src/metadata/RelationIdMetadata.ts","../browser/src/metadata/RelationCountMetadata.ts","../browser/src/metadata-builder/MetadataUtils.ts","../browser/src/metadata/ForeignKeyMetadata.ts","../browser/src/metadata-builder/JunctionEntityMetadataBuilder.ts","../browser/src/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts","../browser/src/metadata/UniqueMetadata.ts","../browser/src/metadata-builder/RelationJoinColumnBuilder.ts","../browser/src/metadata/EntityListenerMetadata.ts","../browser/src/metadata/CheckMetadata.ts","../browser/src/metadata/ExclusionMetadata.ts","../browser/src/metadata-builder/EntityMetadataBuilder.ts","../browser/src/metadata-args/MetadataArgsStorage.ts","../browser/src/entity-schema/EntitySchemaTransformer.ts","../browser/src/entity-schema/EntitySchema.ts","../browser/src/connection/ConnectionMetadataBuilder.ts","../browser/src/query-builder/transformer/RawSqlResultsToEntityTransformer.ts","../browser/src/error/PessimisticLockTransactionRequiredError.ts","../browser/src/error/NoVersionOrUpdateDateColumnError.ts","../browser/src/error/OptimisticLockVersionMismatchError.ts","../browser/src/error/OptimisticLockCanNotBeUsedError.ts","../browser/src/query-builder/QueryBuilderUtils.ts","../browser/src/query-builder/JoinAttribute.ts","../browser/src/query-builder/relation-id/RelationIdAttribute.ts","../browser/src/query-builder/relation-count/RelationCountAttribute.ts","../browser/src/query-builder/relation-id/RelationIdLoader.ts","../browser/src/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.ts","../browser/src/query-builder/relation-count/RelationCountLoader.ts","../browser/src/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.ts","../browser/src/query-builder/Alias.ts","../browser/src/query-builder/QueryExpressionMap.ts","../browser/src/query-builder/Brackets.ts","../browser/src/find-options/operator/In.ts","../browser/src/query-builder/result/InsertResult.ts","../browser/src/error/ReturningStatementNotSupportedError.ts","../browser/src/error/InsertValuesMissingError.ts","../browser/src/query-builder/ReturningResultsEntityUpdator.ts","../browser/src/query-builder/InsertQueryBuilder.ts","../browser/src/query-builder/result/UpdateResult.ts","../browser/src/error/LimitOnUpdateNotSupportedError.ts","../browser/src/error/UpdateValuesMissingError.ts","../browser/src/error/EntityColumnNotFound.ts","../browser/src/query-builder/UpdateQueryBuilder.ts","../browser/src/query-builder/result/DeleteResult.ts","../browser/src/query-builder/DeleteQueryBuilder.ts","../browser/src/query-builder/RelationUpdater.ts","../browser/src/query-builder/RelationRemover.ts","../browser/src/query-builder/RelationQueryBuilder.ts","../browser/src/query-builder/QueryBuilder.ts","../browser/src/error/LockNotSupportedOnGivenDriverError.ts","../browser/src/error/OffsetWithoutLimitNotSupportedError.ts","../browser/src/query-builder/SelectQueryBuilder.ts","../browser/src/logger/SimpleConsoleLogger.ts","../browser/src/logger/AdvancedConsoleLogger.ts","../browser/src/logger/FileLogger.ts","../browser/src/logger/DebugLogger.ts","../browser/src/logger/LoggerFactory.ts","../browser/src/cache/RedisQueryResultCache.ts","../browser/src/cache/DbQueryResultCache.ts","../browser/src/cache/QueryResultCacheFactory.ts","../browser/src/query-builder/RelationLoader.ts","../browser/src/query-builder/RelationIdLoader.ts","../browser/src/connection/Connection.ts","../browser/src/error/ConnectionNotFoundError.ts","../browser/src/error/AlreadyHasActiveConnectionError.ts","../browser/src/connection/ConnectionManager.ts","../browser/src/connection/options-reader/ConnectionOptionsEnvReader.ts","../browser/src/connection/options-reader/ConnectionOptionsYmlReader.ts","../browser/src/connection/options-reader/ConnectionOptionsXmlReader.ts","../browser/src/connection/ConnectionOptionsReader.ts","../browser/src/error/ColumnTypeUndefinedError.ts","../browser/src/decorator/columns/Column.ts","../browser/src/decorator/columns/CreateDateColumn.ts","../browser/src/decorator/columns/PrimaryGeneratedColumn.ts","../browser/src/error/PrimaryColumnCannotBeNullableError.ts","../browser/src/decorator/columns/PrimaryColumn.ts","../browser/src/decorator/columns/UpdateDateColumn.ts","../browser/src/decorator/columns/VersionColumn.ts","../browser/src/decorator/columns/ViewColumn.ts","../browser/src/decorator/columns/ObjectIdColumn.ts","../browser/src/metadata/types/EventListenerTypes.ts","../browser/src/decorator/listeners/AfterInsert.ts","../browser/src/decorator/listeners/AfterLoad.ts","../browser/src/decorator/listeners/AfterRemove.ts","../browser/src/decorator/listeners/AfterUpdate.ts","../browser/src/decorator/listeners/BeforeInsert.ts","../browser/src/decorator/listeners/BeforeRemove.ts","../browser/src/decorator/listeners/BeforeUpdate.ts","../browser/src/decorator/listeners/EventSubscriber.ts","../browser/src/decorator/relations/JoinColumn.ts","../browser/src/decorator/relations/JoinTable.ts","../browser/src/decorator/relations/ManyToMany.ts","../browser/src/decorator/relations/ManyToOne.ts","../browser/src/decorator/relations/OneToMany.ts","../browser/src/decorator/relations/OneToOne.ts","../browser/src/decorator/relations/RelationCount.ts","../browser/src/decorator/relations/RelationId.ts","../browser/src/decorator/entity/Entity.ts","../browser/src/decorator/entity/ChildEntity.ts","../browser/src/decorator/entity/TableInheritance.ts","../browser/src/decorator/entity-view/ViewEntity.ts","../browser/src/decorator/transaction/Transaction.ts","../browser/src/decorator/transaction/TransactionManager.ts","../browser/src/error/CannotReflectMethodParameterTypeError.ts","../browser/src/decorator/transaction/TransactionRepository.ts","../browser/src/decorator/tree/TreeLevelColumn.ts","../browser/src/decorator/tree/TreeParent.ts","../browser/src/decorator/tree/TreeChildren.ts","../browser/src/decorator/tree/Tree.ts","../browser/src/decorator/Index.ts","../browser/src/decorator/Unique.ts","../browser/src/decorator/Check.ts","../browser/src/decorator/Exclusion.ts","../browser/src/decorator/Generated.ts","../browser/src/decorator/EntityRepository.ts","../browser/src/find-options/operator/Any.ts","../browser/src/find-options/operator/Between.ts","../browser/src/find-options/operator/Equal.ts","../browser/src/find-options/operator/IsNull.ts","../browser/src/find-options/operator/LessThan.ts","../browser/src/find-options/operator/LessThanOrEqual.ts","../browser/src/find-options/operator/Like.ts","../browser/src/find-options/operator/MoreThan.ts","../browser/src/find-options/operator/MoreThanOrEqual.ts","../browser/src/find-options/operator/Not.ts","../browser/src/find-options/operator/Raw.ts","../browser/src/repository/BaseEntity.ts","../browser/src/driver/mongodb/typings.ts","../browser/src/index.ts","../../app/entity/User.ts","../../app/entity/Token.ts","../../app/services/truelayer.ts","main/Home.vue","main/home.ts"],"names":["Vue","emptyObject","Object","freeze","isUndef","v","isDef","isTrue","isFalse","isPrimitive","value","isObject","obj","_toString","prototype","toString","toRawType","call","slice","isPlainObject","isRegExp","isValidArrayIndex","val","n","parseFloat","String","Math","floor","isFinite","isPromise","then","catch","Array","isArray","JSON","stringify","toNumber","isNaN","makeMap","str","expectsLowerCase","map","create","list","split","i","length","toLowerCase","isBuiltInTag","isReservedAttribute","remove","arr","item","index","indexOf","splice","hasOwnProperty","hasOwn","key","cached","fn","cache","hit","camelizeRE","camelize","replace","_","c","toUpperCase","capitalize","charAt","hyphenateRE","hyphenate","polyfillBind","ctx","boundFn","a","l","arguments","apply","_length","nativeBind","bind","Function","toArray","start","ret","extend","to","_from","toObject","res","noop","b","no","identity","looseEqual","isObjectA","isObjectB","isArrayA","isArrayB","every","e","Date","getTime","keysA","keys","keysB","looseIndexOf","once","called","SSR_ATTR","ASSET_TYPES","LIFECYCLE_HOOKS","config","optionMergeStrategies","silent","productionTip","devtools","performance","errorHandler","warnHandler","ignoredElements","keyCodes","isReservedTag","isReservedAttr","isUnknownElement","getTagNamespace","parsePlatformTagName","mustUseProp","async","_lifecycleHooks","unicodeRegExp","isReserved","charCodeAt","def","enumerable","defineProperty","writable","configurable","bailRE","RegExp","source","parsePath","path","test","segments","_isServer","hasProto","inBrowser","window","inWeex","WXEnvironment","platform","weexPlatform","UA","navigator","userAgent","isIE","isIE9","isEdge","isAndroid","isIOS","isChrome","isPhantomJS","isFF","match","nativeWatch","watch","supportsPassive","opts","get","addEventListener","isServerRendering","undefined","global","env","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","isNative","Ctor","_Set","hasSymbol","Symbol","Reflect","ownKeys","Set","set","has","add","clear","hasConsole","classifyRE","classify","repeat","warn","tip","generateComponentTrace","formatComponentName","uid","Dep","id","subs","addSub","sub","push","removeSub","depend","target","addDep","notify","update","targetStack","pushTarget","popTarget","pop","VNode","tag","data","children","text","elm","context","componentOptions","asyncFactory","ns","fnContext","fnOptions","fnScopeId","componentInstance","parent","raw","isStatic","isRootInsert","isComment","isCloned","isOnce","asyncMeta","isAsyncPlaceholder","prototypeAccessors","child","defineProperties","createEmptyVNode","node","createTextVNode","cloneVNode","vnode","cloned","arrayProto","arrayMethods","methodsToPatch","forEach","method","original","len","args","result","inserted","ob","__ob__","observeArray","dep","arrayKeys","getOwnPropertyNames","shouldObserve","toggleObserving","Observer","vmCount","protoAugment","copyAugment","walk","src","__proto__","observe","asRootData","isExtensible","_isVue","defineReactive$$1","customSetter","shallow","property","getOwnPropertyDescriptor","getter","setter","childOb","dependArray","newVal","max","del","items","strats","mergeData","from","toVal","fromVal","mergeDataOrFn","parentVal","childVal","vm","instanceData","defaultData","mergeHook","concat","dedupeHooks","hooks","mergeAssets","hook","type","key$1","props","methods","inject","computed","provide","defaultStrat","checkComponents","options","components","validateComponentName","name","normalizeProps","normalizeInject","normalized","normalizeDirectives","dirs","directives","def$$1","assertObjectType","mergeOptions","_base","extends","mixins","mergeField","strat","resolveAsset","warnMissing","assets","camelizedId","PascalCaseId","validateProp","propOptions","propsData","prop","absent","booleanIndex","getTypeIndex","Boolean","stringIndex","getPropDefaultValue","prevShouldObserve","default","$options","_props","getType","assertProp","required","valid","expectedTypes","assertedType","assertType","expectedType","validator","getInvalidTypeMessage","simpleCheckRE","t","isSameType","message","join","receivedType","expectedValue","styleValue","receivedValue","isExplicable","isBoolean","Number","explicitTypes","some","elem","handleError","err","info","cur","$parent","errorCaptured","capture","globalHandleError","invokeWithErrorHandling","handler","_handled","logError","console","error","timerFunc","initProxy","allowedGlobals","warnNonPresent","warnReservedPrefix","hasProxy","isBuiltInModifier","hasHandler","getHandler","isUsingMicroTask","callbacks","pending","flushCallbacks","copies","Promise","p","resolve","setTimeout","MutationObserver","setImmediate","counter","observer","textNode","document","createTextNode","characterData","nextTick","cb","_resolve","mark","measure","perf","seenObjects","traverse","_traverse","seen","isA","isFrozen","depId","normalizeEvent","passive","once$$1","createFnInvoker","fns","invoker","arguments$1","updateListeners","on","oldOn","remove$$1","createOnceHandler","old","event","params","mergeVNodeHook","hookKey","oldHook","wrappedHook","merged","extractPropsFromVNodeData","attrs","altKey","checkProp","hash","preserve","simpleNormalizeChildren","normalizeChildren","normalizeArrayChildren","isTextNode","nestedIndex","lastIndex","last","shift","_isVList","initProvide","_provided","initInjections","resolveInject","provideKey","provideDefault","resolveSlots","slots","slot","name$1","isWhitespace","normalizeScopedSlots","normalSlots","prevSlots","hasNormalSlots","isStable","$stable","$key","_normalized","$hasNormal","normalizeScopedSlot","key$2","proxyNormalSlot","proxy","renderList","render","iterator","next","done","renderSlot","fallback","bindObject","scopedSlotFn","nodes","$scopedSlots","$slots","$createElement","resolveFilter","isKeyNotMatch","expect","actual","checkKeyCodes","eventKeyCode","builtInKeyCode","eventKeyName","builtInKeyName","mappedKeyCode","bindObjectProps","asProp","isSync","loop","domProps","camelizedKey","hyphenatedKey","$event","renderStatic","isInFor","_staticTrees","tree","markStatic","staticRenderFns","_renderProxy","markOnce","markStaticNode","bindObjectListeners","existing","ours","resolveScopedSlots","hasDynamicKeys","contentHashKey","bindDynamicKeys","baseObj","values","prependModifier","symbol","installRenderHelpers","_o","_n","_s","_l","_t","_q","_i","_m","_f","_k","_b","_v","_e","_u","_g","_d","_p","FunctionalRenderContext","this$1","contextVm","_original","isCompiled","_compiled","needNormalization","listeners","injections","scopedSlots","_scopeId","_c","d","createElement","createFunctionalComponent","mergeProps","renderContext","cloneAndMarkFunctionalResult","vnodes","clone","componentVNodeHooks","init","hydrating","_isDestroyed","keepAlive","mountedNode","prepatch","createComponentInstanceForVnode","activeInstance","$mount","oldVnode","updateChildComponent","insert","_isMounted","callHook","queueActivatedComponent","activateChildComponent","destroy","deactivateChildComponent","$destroy","hooksToMerge","createComponent","baseCtor","cid","resolveAsyncComponent","createAsyncPlaceholder","resolveConstructorOptions","model","transformModel","functional","nativeOn","abstract","installComponentHooks","_isComponent","_parentVnode","inlineTemplate","toMerge","_merged","mergeHook$1","f1","f2","callback","SIMPLE_NORMALIZE","ALWAYS_NORMALIZE","normalizationType","alwaysNormalize","_createElement","is","$vnode","pre","applyNS","registerDeepBindings","force","style","class","initRender","_vnode","parentVnode","_renderChildren","parentData","_parentListeners","currentRenderingInstance","renderMixin","$nextTick","_render","ref","ensureCtor","comp","base","__esModule","toStringTag","factory","errorComp","resolved","owner","owners","loading","loadingComp","sync","timerLoading","timerTimeout","$on","forceRender","renderCompleted","$forceUpdate","clearTimeout","reject","reason","component","delay","timeout","getFirstComponentChild","initEvents","_events","_hasHookEvent","updateComponentListeners","remove$1","$off","_target","onceHandler","oldListeners","eventsMixin","hookRE","$once","i$1","cbs","$emit","isUpdatingChildComponent","setActiveInstance","prevActiveInstance","initLifecycle","$children","$root","$refs","_watcher","_inactive","_directInactive","_isBeingDestroyed","lifecycleMixin","_update","prevEl","$el","prevVnode","restoreActiveInstance","__patch__","__vue__","teardown","_watchers","_data","mountComponent","el","updateComponent","Watcher","before","renderChildren","newScopedSlots","oldScopedSlots","hasDynamicScopedSlot","needsForceUpdate","$attrs","$listeners","propKeys","_propKeys","isInInactiveTree","direct","handlers","j","MAX_UPDATE_COUNT","queue","activatedChildren","circular","waiting","flushing","resetSchedulerState","currentFlushTimestamp","getNow","now","createEvent","timeStamp","flushSchedulerQueue","watcher","sort","run","activatedQueue","updatedQueue","callActivatedHooks","callUpdatedHooks","emit","queueWatcher","uid$2","expOrFn","isRenderWatcher","deep","user","lazy","active","dirty","deps","newDeps","depIds","newDepIds","expression","cleanupDeps","tmp","oldValue","evaluate","sharedPropertyDefinition","sourceKey","initState","initProps","initMethods","initData","initComputed","initWatch","propsOptions","isRoot","getData","computedWatcherOptions","watchers","_computedWatchers","isSSR","userDef","defineComputed","shouldCache","createComputedGetter","createGetterInvoker","createWatcher","$watch","stateMixin","dataDef","propsDef","$set","$delete","immediate","uid$3","initMixin","_init","_uid","initInternalComponent","constructor","_self","vnodeComponentOptions","_componentTag","super","superOptions","modifiedOptions","resolveModifiedOptions","extendOptions","modified","latest","sealed","sealedOptions","initUse","use","plugin","installedPlugins","_installedPlugins","unshift","install","initMixin$1","mixin","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","initProps$1","initComputed$1","Comp","initAssetRegisters","definition","getComponentName","matches","pattern","pruneCache","keepAliveInstance","filter","cachedNode","pruneCacheEntry","current","cached$$1","patternTypes","KeepAlive","include","exclude","created","destroyed","mounted","ref$1","parseInt","builtInComponents","initGlobalAPI","configDef","util","defineReactive","delete","observable","ssrContext","version","acceptValue","attr","isEnumeratedAttr","isValidContentEditableValue","convertEnumeratedValue","isFalsyAttrValue","isBooleanAttr","xlinkNS","isXlink","getXlinkProp","genClassForVnode","parentNode","childNode","mergeClassData","renderClass","staticClass","dynamicClass","stringifyClass","stringifyArray","stringifyObject","stringified","namespaceMap","svg","math","isHTMLTag","isSVG","unknownElementCache","HTMLUnknownElement","HTMLElement","isTextInputType","query","selected","querySelector","createElement$1","tagName","multiple","setAttribute","createElementNS","namespace","createComment","insertBefore","newNode","referenceNode","removeChild","appendChild","nextSibling","setTextContent","textContent","setStyleScope","scopeId","nodeOps","registerRef","isRemoval","refs","refInFor","emptyNode","sameVnode","sameInputType","typeA","typeB","createKeyToOldIdx","beginIdx","endIdx","createPatchFunction","backend","modules","removeNode","createElm","insertedVnodeQueue","parentElm","refElm","nested","ownerArray","isReactivated","initComponent","reactivateComponent","innerNode","transition","activate","setScope","createChildren","invokeCreateHooks","pendingInsert","isPatchable","ref$$1","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","rm","createRmCb","childElm","findIdxInOld","oldCh","end","patchVnode","removeOnly","hydrate","updateChildren","newCh","oldStartIdx","oldKeyToIdx","idxInOld","vnodeToMove","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","postpatch","invokeInsertHook","initial","hydrationBailed","isRenderedModule","inVPre","hasChildNodes","innerHTML","childrenMatch","firstChild","fullInvoke","isInitialPatch","isRealElement","nodeType","hasAttribute","removeAttribute","oldElm","_leaveCb","patchable","i$2","updateDirectives","isCreate","oldDir","dir","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","oldArg","arg","callHook$1","componentUpdated","callInsert","emptyModifiers","modifiers","getRawDirName","rawName","baseModules","updateAttrs","inheritAttrs","oldAttrs","setAttr","removeAttributeNS","baseSetAttr","setAttributeNS","__ieph","blocker","stopImmediatePropagation","removeEventListener","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","target$1","klass","RANGE_TOKEN","CHECKBOX_RADIO_TOKEN","normalizeEvents","change","createOnceHandler$1","remove$2","useMicrotaskFix","add$1","attachedTimestamp","_wrapper","currentTarget","ownerDocument","updateDOMListeners","svgContainer","events","updateDOMProps","oldProps","childNodes","_value","strCur","shouldUpdateValue","checkVal","composing","isNotInFocusAndDirty","isDirtyWithModifiers","notInFocus","activeElement","_vModifiers","number","trim","parseStyleText","cssText","propertyDelimiter","normalizeStyleData","normalizeStyleBinding","staticStyle","bindingStyle","getStyle","checkChild","styleData","emptyStyle","cssVarRE","importantRE","setProp","setProperty","normalizedName","normalize","vendorNames","capName","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","whitespaceRE","addClass","classList","getAttribute","removeClass","tar","resolveTransition","css","autoCssTransition","enterClass","enterToClass","enterActiveClass","leaveClass","leaveToClass","leaveActiveClass","hasTransition","TRANSITION","ANIMATION","transitionProp","transitionEndEvent","animationProp","animationEndEvent","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","raf","requestAnimationFrame","nextFrame","addTransitionClass","transitionClasses","removeTransitionClass","whenTransitionEnds","getTransitionInfo","propCount","ended","onEnd","transformRE","styles","getComputedStyle","transitionDelays","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationDurations","animationTimeout","hasTransform","delays","durations","toMs","s","enter","toggleDisplay","cancelled","_enterCb","transitionNode","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","isAppear","startClass","activeClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","beforeLeave","afterLeave","leaveCancelled","delayLeave","explicitLeaveDuration","performLeave","checkDuration","invokerFns","_enter","platformModules","patch","vmodel","trigger","directive","binding","_vOptions","setSelected","getValue","onCompositionStart","onCompositionEnd","prevOptions","curOptions","o","hasNoMatchingOption","actuallySetSelected","isMultiple","option","selectedIndex","initEvent","dispatchEvent","locateNode","transition$$1","originalDisplay","__vOriginalDisplay","display","unbind","platformDirectives","transitionProps","mode","getRealChild","compOptions","extractTransitionData","placeholder","h","rawChild","hasParentTransition","isSameChild","oldChild","isNotTextNode","isVShowDirective","Transition","_leaving","oldRawChild","delayedLeave","moveClass","TransitionGroup","beforeMount","kept","prevChildren","rawChildren","transitionData","removed","c$1","pos","getBoundingClientRect","updated","hasMove","callPendingCbs","recordPosition","applyTranslation","_reflow","body","offsetHeight","moved","transform","WebkitTransform","transitionDuration","_moveCb","propertyName","_hasMove","cloneNode","newPos","oldPos","dx","left","dy","top","platformComponents","Component","reflectionIsSupported","defineMetadata","getOwnMetadataKeys","copyReflectionMetadata","forwardMetadata","propertyKey","metaKey","metadata","getOwnMetadata","fakeArray","createDecorator","__decorators__","Ctors","collectDataFromConstructor","originalInit","_this","plainData","$internalHooks","componentFactory","proto","descriptor","_a","decorators","superProto","getPrototypeOf","Extended","forwardStaticMembers","reservedPropertyNames","shouldIgnore","callee","caller","Original","extendedDescriptor","superDescriptor","registerHooks","reactiveInjectKey","Inject","InjectReactive","fromKey_1","defaultVal_1","Provide","k","managed","original_1","rv","ProvideReactive","original_2","_loop_1","this_1","reflectMetadataIsSupported","getMetadata","applyMetadata","Model","Prop","PropSync","propName","Watch","Emit","returnValue","Ref","refKey","module","exports","isBuffer","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","runClearTimeout","marker","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","Item","array","title","argv","versions","addListener","off","removeListener","removeAllListeners","prependListener","prependOnceListener","cwd","chdir","umask","qs","sep","eq","regexp","maxKeys","x","kstr","vstr","idx","substr","decodeURIComponent","xs","stringifyPrimitive","objectKeys","ks","encodeURIComponent","f","decode","parse","require","encode","extendStatics","setPrototypeOf","__extends","__","__assign","assign","__rest","getOwnPropertySymbols","propertyIsEnumerable","__decorate","desc","r","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","rejected","__generator","y","g","label","sent","trys","ops","verb","op","TypeError","__exportStar","m","__values","__read","ar","__spread","__spreadArrays","il","jl","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","__importStar","mod","__importDefault","root","self","exporter","makeExporter","previous","supportsSymbol","toPrimitiveSymbol","toPrimitive","iteratorSymbol","supportsCreate","supportsProto","downLevel","HashMap","MakeDictionary","functionPrototype","usePolyfill","_Map","Map","entries","CreateMapPolyfill","cacheSentinel","arraySentinel","MapIterator","selector","_index","_keys","_values","_selector","throw","return","_cacheKey","_cacheIndex","_find","size","getKey","getEntry","_map","Metadata","WeakMap","CreateWeakMapPolyfill","UUID_SIZE","rootKey","CreateUniqueKey","_key","table","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","buffer","random","GenRandomBytes","Uint8Array","crypto","getRandomValues","msCrypto","offset","byte","GetOrCreateMetadataMap","O","Create","targetMetadata","IsUndefined","metadataMap","OrdinaryHasOwnMetadata","MetadataKey","OrdinaryGetOwnMetadata","OrdinaryDefineOwnMetadata","MetadataValue","OrdinaryOwnMetadataKeys","keysObj","GetIterator","GetMethod","IsCallable","IsObject","IteratorStep","nextValue","IteratorClose","Type","IsNull","ToPrimitive","input","PreferredType","hint","exoticToPrim","OrdinaryToPrimitive","toString_1","valueOf","toString_2","ToPropertyKey","argument","IsSymbol","ToString","IsArray","IsConstructor","V","func","OrdinaryGetPrototypeOf","prototypeProto","attributes","DecorateConstructor","decorated","DecorateProperty","IsPropertyKey","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryGetMetadata","getMetadataKeys","OrdinaryMetadataKeys","parentKeys","ownKeys_1","hasKey","parentKeys_1","deleteMetadata"],"mappings":"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","file":"home.93f8fe74.js","sourceRoot":"../src/frontend/pages","sourcesContent":["/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if (process.env.NODE_ENV !== 'production' && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false)\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if (process.env.NODE_ENV !== 'production' && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (process.env.NODE_ENV !== 'production') {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes(parentElm, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecesarry `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        process.env.NODE_ENV !== 'test'\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' &&\n      process.env.NODE_ENV !== 'test' &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nexport default Vue;\n","/**\n  * vue-class-component v7.1.0\n  * (c) 2015-present Evan You\n  * @license MIT\n  */\nimport Vue from 'vue';\n\n// The rational behind the verbose Reflect-feature check below is the fact that there are polyfills\n// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.\n// Without this check consumers will encounter hard to track down runtime errors.\nvar reflectionIsSupported = typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;\nfunction copyReflectionMetadata(to, from) {\n    forwardMetadata(to, from);\n    Object.getOwnPropertyNames(from.prototype).forEach(function (key) {\n        forwardMetadata(to.prototype, from.prototype, key);\n    });\n    Object.getOwnPropertyNames(from).forEach(function (key) {\n        forwardMetadata(to, from, key);\n    });\n}\nfunction forwardMetadata(to, from, propertyKey) {\n    var metaKeys = propertyKey\n        ? Reflect.getOwnMetadataKeys(from, propertyKey)\n        : Reflect.getOwnMetadataKeys(from);\n    metaKeys.forEach(function (metaKey) {\n        var metadata = propertyKey\n            ? Reflect.getOwnMetadata(metaKey, from, propertyKey)\n            : Reflect.getOwnMetadata(metaKey, from);\n        if (propertyKey) {\n            Reflect.defineMetadata(metaKey, metadata, to, propertyKey);\n        }\n        else {\n            Reflect.defineMetadata(metaKey, metadata, to);\n        }\n    });\n}\n\nvar fakeArray = { __proto__: [] };\nvar hasProto = fakeArray instanceof Array;\nfunction createDecorator(factory) {\n    return function (target, key, index) {\n        var Ctor = typeof target === 'function'\n            ? target\n            : target.constructor;\n        if (!Ctor.__decorators__) {\n            Ctor.__decorators__ = [];\n        }\n        if (typeof index !== 'number') {\n            index = undefined;\n        }\n        Ctor.__decorators__.push(function (options) { return factory(options, key, index); });\n    };\n}\nfunction mixins() {\n    var Ctors = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        Ctors[_i] = arguments[_i];\n    }\n    return Vue.extend({ mixins: Ctors });\n}\nfunction isPrimitive(value) {\n    var type = typeof value;\n    return value == null || (type !== 'object' && type !== 'function');\n}\nfunction warn(message) {\n    if (typeof console !== 'undefined') {\n        console.warn('[vue-class-component] ' + message);\n    }\n}\n\nfunction collectDataFromConstructor(vm, Component) {\n    // override _init to prevent to init as Vue instance\n    var originalInit = Component.prototype._init;\n    Component.prototype._init = function () {\n        var _this = this;\n        // proxy to actual vm\n        var keys = Object.getOwnPropertyNames(vm);\n        // 2.2.0 compat (props are no longer exposed as self properties)\n        if (vm.$options.props) {\n            for (var key in vm.$options.props) {\n                if (!vm.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n        }\n        keys.forEach(function (key) {\n            if (key.charAt(0) !== '_') {\n                Object.defineProperty(_this, key, {\n                    get: function () { return vm[key]; },\n                    set: function (value) { vm[key] = value; },\n                    configurable: true\n                });\n            }\n        });\n    };\n    // should be acquired class property values\n    var data = new Component();\n    // restore original _init to avoid memory leak (#209)\n    Component.prototype._init = originalInit;\n    // create plain data object\n    var plainData = {};\n    Object.keys(data).forEach(function (key) {\n        if (data[key] !== undefined) {\n            plainData[key] = data[key];\n        }\n    });\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(Component.prototype instanceof Vue) && Object.keys(plainData).length > 0) {\n            warn('Component class must inherit Vue or its descendant class ' +\n                'when class property is used.');\n        }\n    }\n    return plainData;\n}\n\nvar $internalHooks = [\n    'data',\n    'beforeCreate',\n    'created',\n    'beforeMount',\n    'mounted',\n    'beforeDestroy',\n    'destroyed',\n    'beforeUpdate',\n    'updated',\n    'activated',\n    'deactivated',\n    'render',\n    'errorCaptured',\n    'serverPrefetch' // 2.6\n];\nfunction componentFactory(Component, options) {\n    if (options === void 0) { options = {}; }\n    options.name = options.name || Component._componentTag || Component.name;\n    // prototype props.\n    var proto = Component.prototype;\n    Object.getOwnPropertyNames(proto).forEach(function (key) {\n        if (key === 'constructor') {\n            return;\n        }\n        // hooks\n        if ($internalHooks.indexOf(key) > -1) {\n            options[key] = proto[key];\n            return;\n        }\n        var descriptor = Object.getOwnPropertyDescriptor(proto, key);\n        if (descriptor.value !== void 0) {\n            // methods\n            if (typeof descriptor.value === 'function') {\n                (options.methods || (options.methods = {}))[key] = descriptor.value;\n            }\n            else {\n                // typescript decorated data\n                (options.mixins || (options.mixins = [])).push({\n                    data: function () {\n                        var _a;\n                        return _a = {}, _a[key] = descriptor.value, _a;\n                    }\n                });\n            }\n        }\n        else if (descriptor.get || descriptor.set) {\n            // computed properties\n            (options.computed || (options.computed = {}))[key] = {\n                get: descriptor.get,\n                set: descriptor.set\n            };\n        }\n    });\n    (options.mixins || (options.mixins = [])).push({\n        data: function () {\n            return collectDataFromConstructor(this, Component);\n        }\n    });\n    // decorate options\n    var decorators = Component.__decorators__;\n    if (decorators) {\n        decorators.forEach(function (fn) { return fn(options); });\n        delete Component.__decorators__;\n    }\n    // find super\n    var superProto = Object.getPrototypeOf(Component.prototype);\n    var Super = superProto instanceof Vue\n        ? superProto.constructor\n        : Vue;\n    var Extended = Super.extend(options);\n    forwardStaticMembers(Extended, Component, Super);\n    if (reflectionIsSupported) {\n        copyReflectionMetadata(Extended, Component);\n    }\n    return Extended;\n}\nvar reservedPropertyNames = [\n    // Unique id\n    'cid',\n    // Super Vue constructor\n    'super',\n    // Component options that will be used by the component\n    'options',\n    'superOptions',\n    'extendOptions',\n    'sealedOptions',\n    // Private assets\n    'component',\n    'directive',\n    'filter'\n];\nvar shouldIgnore = {\n    prototype: true,\n    arguments: true,\n    callee: true,\n    caller: true\n};\nfunction forwardStaticMembers(Extended, Original, Super) {\n    // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable\n    Object.getOwnPropertyNames(Original).forEach(function (key) {\n        // Skip the properties that should not be overwritten\n        if (shouldIgnore[key]) {\n            return;\n        }\n        // Some browsers does not allow reconfigure built-in properties\n        var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);\n        if (extendedDescriptor && !extendedDescriptor.configurable) {\n            return;\n        }\n        var descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        // If the user agent does not support `__proto__` or its family (IE <= 10),\n        // the sub class properties may be inherited properties from the super class in TypeScript.\n        // We need to exclude such properties to prevent to overwrite\n        // the component options object which stored on the extended constructor (See #192).\n        // If the value is a referenced value (object or function),\n        // we can check equality of them and exclude it if they have the same reference.\n        // If it is a primitive value, it will be forwarded for safety.\n        if (!hasProto) {\n            // Only `cid` is explicitly exluded from property forwarding\n            // because we cannot detect whether it is a inherited property or not\n            // on the no `__proto__` environment even though the property is reserved.\n            if (key === 'cid') {\n                return;\n            }\n            var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);\n            if (!isPrimitive(descriptor.value) &&\n                superDescriptor &&\n                superDescriptor.value === descriptor.value) {\n                return;\n            }\n        }\n        // Warn if the users manually declare reserved properties\n        if (process.env.NODE_ENV !== 'production' &&\n            reservedPropertyNames.indexOf(key) >= 0) {\n            warn(\"Static property name '\" + key + \"' declared on class '\" + Original.name + \"' \" +\n                'conflicts with reserved property name of Vue internal. ' +\n                'It may cause unexpected behavior of the component. Consider renaming the property.');\n        }\n        Object.defineProperty(Extended, key, descriptor);\n    });\n}\n\nfunction Component(options) {\n    if (typeof options === 'function') {\n        return componentFactory(options);\n    }\n    return function (Component) {\n        return componentFactory(Component, options);\n    };\n}\nComponent.registerHooks = function registerHooks(keys) {\n    $internalHooks.push.apply($internalHooks, keys);\n};\n\nexport default Component;\nexport { createDecorator, mixins };\n","/** vue-property-decorator verson 8.2.1 MIT LICENSE copyright 2019 kaorun343 */\n/// <reference types='reflect-metadata'/>\n'use strict';\nimport Vue from 'vue';\nimport Component, { createDecorator, mixins } from 'vue-class-component';\nexport { Component, Vue, mixins as Mixins };\n/** Used for keying reactive provide/inject properties */\nvar reactiveInjectKey = '__reactiveInject__';\n/**\n * decorator of an inject\n * @param from key\n * @return PropertyDecorator\n */\nexport function Inject(options) {\n    return createDecorator(function (componentOptions, key) {\n        if (typeof componentOptions.inject === 'undefined') {\n            componentOptions.inject = {};\n        }\n        if (!Array.isArray(componentOptions.inject)) {\n            componentOptions.inject[key] = options || key;\n        }\n    });\n}\n/**\n * decorator of a reactive inject\n * @param from key\n * @return PropertyDecorator\n */\nexport function InjectReactive(options) {\n    return createDecorator(function (componentOptions, key) {\n        if (typeof componentOptions.inject === 'undefined') {\n            componentOptions.inject = {};\n        }\n        if (!Array.isArray(componentOptions.inject)) {\n            var fromKey_1 = !!options ? options.from || options : key;\n            var defaultVal_1 = (!!options && options.default) || undefined;\n            if (!componentOptions.computed)\n                componentOptions.computed = {};\n            componentOptions.computed[key] = function () {\n                var obj = this[reactiveInjectKey];\n                return obj ? obj[fromKey_1] : defaultVal_1;\n            };\n            componentOptions.inject[reactiveInjectKey] = reactiveInjectKey;\n        }\n    });\n}\n/**\n * decorator of a provide\n * @param key key\n * @return PropertyDecorator | void\n */\nexport function Provide(key) {\n    return createDecorator(function (componentOptions, k) {\n        var provide = componentOptions.provide;\n        if (typeof provide !== 'function' || !provide.managed) {\n            var original_1 = componentOptions.provide;\n            provide = componentOptions.provide = function () {\n                var rv = Object.create((typeof original_1 === 'function' ? original_1.call(this) : original_1) ||\n                    null);\n                for (var i in provide.managed)\n                    rv[provide.managed[i]] = this[i];\n                return rv;\n            };\n            provide.managed = {};\n        }\n        provide.managed[k] = key || k;\n    });\n}\n/**\n * decorator of a reactive provide\n * @param key key\n * @return PropertyDecorator | void\n */\nexport function ProvideReactive(key) {\n    return createDecorator(function (componentOptions, k) {\n        var provide = componentOptions.provide;\n        if (typeof provide !== 'function' || !provide.managed) {\n            var original_2 = componentOptions.provide;\n            provide = componentOptions.provide = function () {\n                var _this = this;\n                var rv = Object.create((typeof original_2 === 'function' ? original_2.call(this) : original_2) ||\n                    null);\n                rv[reactiveInjectKey] = {};\n                var _loop_1 = function (i) {\n                    rv[provide.managed[i]] = this_1[i]; // Duplicates the behavior of `@Provide`\n                    Object.defineProperty(rv[reactiveInjectKey], provide.managed[i], {\n                        enumerable: true,\n                        get: function () { return _this[i]; },\n                    });\n                };\n                var this_1 = this;\n                for (var i in provide.managed) {\n                    _loop_1(i);\n                }\n                return rv;\n            };\n            provide.managed = {};\n        }\n        provide.managed[k] = key || k;\n    });\n}\n/** @see {@link https://github.com/vuejs/vue-class-component/blob/master/src/reflect.ts} */\nvar reflectMetadataIsSupported = typeof Reflect !== 'undefined' && typeof Reflect.getMetadata !== 'undefined';\nfunction applyMetadata(options, target, key) {\n    if (reflectMetadataIsSupported) {\n        if (!Array.isArray(options) &&\n            typeof options !== 'function' &&\n            typeof options.type === 'undefined') {\n            options.type = Reflect.getMetadata('design:type', target, key);\n        }\n    }\n}\n/**\n * decorator of model\n * @param  event event name\n * @param options options\n * @return PropertyDecorator\n */\nexport function Model(event, options) {\n    if (options === void 0) { options = {}; }\n    return function (target, key) {\n        applyMetadata(options, target, key);\n        createDecorator(function (componentOptions, k) {\n            ;\n            (componentOptions.props || (componentOptions.props = {}))[k] = options;\n            componentOptions.model = { prop: k, event: event || k };\n        })(target, key);\n    };\n}\n/**\n * decorator of a prop\n * @param  options the options for the prop\n * @return PropertyDecorator | void\n */\nexport function Prop(options) {\n    if (options === void 0) { options = {}; }\n    return function (target, key) {\n        applyMetadata(options, target, key);\n        createDecorator(function (componentOptions, k) {\n            ;\n            (componentOptions.props || (componentOptions.props = {}))[k] = options;\n        })(target, key);\n    };\n}\n/**\n * decorator of a synced prop\n * @param propName the name to interface with from outside, must be different from decorated property\n * @param options the options for the synced prop\n * @return PropertyDecorator | void\n */\nexport function PropSync(propName, options) {\n    if (options === void 0) { options = {}; }\n    // @ts-ignore\n    return function (target, key) {\n        applyMetadata(options, target, key);\n        createDecorator(function (componentOptions, k) {\n            ;\n            (componentOptions.props || (componentOptions.props = {}))[propName] = options;\n            (componentOptions.computed || (componentOptions.computed = {}))[k] = {\n                get: function () {\n                    return this[propName];\n                },\n                set: function (value) {\n                    // @ts-ignore\n                    this.$emit(\"update:\" + propName, value);\n                },\n            };\n        })(target, key);\n    };\n}\n/**\n * decorator of a watch function\n * @param  path the path or the expression to observe\n * @param  WatchOption\n * @return MethodDecorator\n */\nexport function Watch(path, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.deep, deep = _a === void 0 ? false : _a, _b = options.immediate, immediate = _b === void 0 ? false : _b;\n    return createDecorator(function (componentOptions, handler) {\n        if (typeof componentOptions.watch !== 'object') {\n            componentOptions.watch = Object.create(null);\n        }\n        var watch = componentOptions.watch;\n        if (typeof watch[path] === 'object' && !Array.isArray(watch[path])) {\n            watch[path] = [watch[path]];\n        }\n        else if (typeof watch[path] === 'undefined') {\n            watch[path] = [];\n        }\n        watch[path].push({ handler: handler, deep: deep, immediate: immediate });\n    });\n}\n// Code copied from Vue/src/shared/util.js\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = function (str) { return str.replace(hyphenateRE, '-$1').toLowerCase(); };\n/**\n * decorator of an event-emitter function\n * @param  event The name of the event\n * @return MethodDecorator\n */\nexport function Emit(event) {\n    return function (_target, key, descriptor) {\n        key = hyphenate(key);\n        var original = descriptor.value;\n        descriptor.value = function emitter() {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var emit = function (returnValue) {\n                if (returnValue !== undefined)\n                    args.unshift(returnValue);\n                _this.$emit.apply(_this, [event || key].concat(args));\n            };\n            var returnValue = original.apply(this, args);\n            if (isPromise(returnValue)) {\n                returnValue.then(function (returnValue) {\n                    emit(returnValue);\n                });\n            }\n            else {\n                emit(returnValue);\n            }\n            return returnValue;\n        };\n    };\n}\n/**\n * decorator of a ref prop\n * @param refKey the ref key defined in template\n */\nexport function Ref(refKey) {\n    return createDecorator(function (options, key) {\n        options.computed = options.computed || {};\n        options.computed[key] = {\n            cache: false,\n            get: function () {\n                return this.$refs[refKey || key];\n            },\n        };\n    });\n}\nfunction isPromise(obj) {\n    return obj instanceof Promise || (obj && typeof obj.then === 'function');\n}\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  // Only Node.JS has a process variable that is of [[Class]] process\n  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  utils.forEach([\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',\n    'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken',\n    'socketPath'\n  ], function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n  config.method = config.method ? config.method.toLowerCase() : 'get';\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","module.exports = require('./lib/axios');","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.swal=e():t.swal=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,\"a\",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=8)}([function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=\"swal-button\";e.CLASS_NAMES={MODAL:\"swal-modal\",OVERLAY:\"swal-overlay\",SHOW_MODAL:\"swal-overlay--show-modal\",MODAL_TITLE:\"swal-title\",MODAL_TEXT:\"swal-text\",ICON:\"swal-icon\",ICON_CUSTOM:\"swal-icon--custom\",CONTENT:\"swal-content\",FOOTER:\"swal-footer\",BUTTON_CONTAINER:\"swal-button-container\",BUTTON:o,CONFIRM_BUTTON:o+\"--confirm\",CANCEL_BUTTON:o+\"--cancel\",DANGER_BUTTON:o+\"--danger\",BUTTON_LOADING:o+\"--loading\",BUTTON_LOADER:o+\"__loader\"},e.default=e.CLASS_NAMES},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.getNode=function(t){var e=\".\"+t;return document.querySelector(e)},e.stringToNode=function(t){var e=document.createElement(\"div\");return e.innerHTML=t.trim(),e.firstChild},e.insertAfter=function(t,e){var n=e.nextSibling;e.parentNode.insertBefore(t,n)},e.removeNode=function(t){t.parentElement.removeChild(t)},e.throwErr=function(t){throw t=t.replace(/ +(?= )/g,\"\"),\"SweetAlert: \"+(t=t.trim())},e.isPlainObject=function(t){if(\"[object Object]\"!==Object.prototype.toString.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype},e.ordinalSuffixOf=function(t){var e=t%10,n=t%100;return 1===e&&11!==n?t+\"st\":2===e&&12!==n?t+\"nd\":3===e&&13!==n?t+\"rd\":t+\"th\"}},function(t,e,n){\"use strict\";function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,\"__esModule\",{value:!0}),o(n(25));var r=n(26);e.overlayMarkup=r.default,o(n(27)),o(n(28)),o(n(29));var i=n(0),a=i.default.MODAL_TITLE,s=i.default.MODAL_TEXT,c=i.default.ICON,l=i.default.FOOTER;e.iconMarkup='\\n  <div class=\"'+c+'\"></div>',e.titleMarkup='\\n  <div class=\"'+a+'\"></div>\\n',e.textMarkup='\\n  <div class=\"'+s+'\"></div>',e.footerMarkup='\\n  <div class=\"'+l+'\"></div>\\n'},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1);e.CONFIRM_KEY=\"confirm\",e.CANCEL_KEY=\"cancel\";var r={visible:!0,text:null,value:null,className:\"\",closeModal:!0},i=Object.assign({},r,{visible:!1,text:\"Cancel\",value:null}),a=Object.assign({},r,{text:\"OK\",value:!0});e.defaultButtonList={cancel:i,confirm:a};var s=function(t){switch(t){case e.CONFIRM_KEY:return a;case e.CANCEL_KEY:return i;default:var n=t.charAt(0).toUpperCase()+t.slice(1);return Object.assign({},r,{text:n,value:t})}},c=function(t,e){var n=s(t);return!0===e?Object.assign({},n,{visible:!0}):\"string\"==typeof e?Object.assign({},n,{visible:!0,text:e}):o.isPlainObject(e)?Object.assign({visible:!0},n,e):Object.assign({},n,{visible:!1})},l=function(t){for(var e={},n=0,o=Object.keys(t);n<o.length;n++){var r=o[n],a=t[r],s=c(r,a);e[r]=s}return e.cancel||(e.cancel=i),e},u=function(t){var n={};switch(t.length){case 1:n[e.CANCEL_KEY]=Object.assign({},i,{visible:!1});break;case 2:n[e.CANCEL_KEY]=c(e.CANCEL_KEY,t[0]),n[e.CONFIRM_KEY]=c(e.CONFIRM_KEY,t[1]);break;default:o.throwErr(\"Invalid number of 'buttons' in array (\"+t.length+\").\\n      If you want more than 2 buttons, you need to use an object!\")}return n};e.getButtonListOpts=function(t){var n=e.defaultButtonList;return\"string\"==typeof t?n[e.CONFIRM_KEY]=c(e.CONFIRM_KEY,t):Array.isArray(t)?n=u(t):o.isPlainObject(t)?n=l(t):!0===t?n=u([!0,!0]):!1===t?n=u([!1,!1]):void 0===t&&(n=e.defaultButtonList),n}},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r=n(2),i=n(0),a=i.default.MODAL,s=i.default.OVERLAY,c=n(30),l=n(31),u=n(32),f=n(33);e.injectElIntoModal=function(t){var e=o.getNode(a),n=o.stringToNode(t);return e.appendChild(n),n};var d=function(t){t.className=a,t.textContent=\"\"},p=function(t,e){d(t);var n=e.className;n&&t.classList.add(n)};e.initModalContent=function(t){var e=o.getNode(a);p(e,t),c.default(t.icon),l.initTitle(t.title),l.initText(t.text),f.default(t.content),u.default(t.buttons,t.dangerMode)};var m=function(){var t=o.getNode(s),e=o.stringToNode(r.modalMarkup);t.appendChild(e)};e.default=m},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(3),r={isOpen:!1,promise:null,actions:{},timer:null},i=Object.assign({},r);e.resetState=function(){i=Object.assign({},r)},e.setActionValue=function(t){if(\"string\"==typeof t)return a(o.CONFIRM_KEY,t);for(var e in t)a(e,t[e])};var a=function(t,e){i.actions[t]||(i.actions[t]={}),Object.assign(i.actions[t],{value:e})};e.setActionOptionsFor=function(t,e){var n=(void 0===e?{}:e).closeModal,o=void 0===n||n;Object.assign(i.actions[t],{closeModal:o})},e.default=i},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r=n(3),i=n(0),a=i.default.OVERLAY,s=i.default.SHOW_MODAL,c=i.default.BUTTON,l=i.default.BUTTON_LOADING,u=n(5);e.openModal=function(){o.getNode(a).classList.add(s),u.default.isOpen=!0};var f=function(){o.getNode(a).classList.remove(s),u.default.isOpen=!1};e.onAction=function(t){void 0===t&&(t=r.CANCEL_KEY);var e=u.default.actions[t],n=e.value;if(!1===e.closeModal){var i=c+\"--\"+t;o.getNode(i).classList.add(l)}else f();u.default.promise.resolve(n)},e.getState=function(){var t=Object.assign({},u.default);return delete t.promise,delete t.timer,t},e.stopLoading=function(){for(var t=document.querySelectorAll(\".\"+c),e=0;e<t.length;e++){t[e].classList.remove(l)}}},function(t,e){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(t){\"object\"==typeof window&&(n=window)}t.exports=n},function(t,e,n){(function(e){t.exports=e.sweetAlert=n(9)}).call(e,n(7))},function(t,e,n){(function(e){t.exports=e.swal=n(10)}).call(e,n(7))},function(t,e,n){\"undefined\"!=typeof window&&n(11),n(16);var o=n(23).default;t.exports=o},function(t,e,n){var o=n(12);\"string\"==typeof o&&(o=[[t.i,o,\"\"]]);var r={insertAt:\"top\"};r.transform=void 0;n(14)(o,r);o.locals&&(t.exports=o.locals)},function(t,e,n){e=t.exports=n(13)(void 0),e.push([t.i,'.swal-icon--error{border-color:#f27474;-webkit-animation:animateErrorIcon .5s;animation:animateErrorIcon .5s}.swal-icon--error__x-mark{position:relative;display:block;-webkit-animation:animateXMark .5s;animation:animateXMark .5s}.swal-icon--error__line{position:absolute;height:5px;width:47px;background-color:#f27474;display:block;top:37px;border-radius:2px}.swal-icon--error__line--left{-webkit-transform:rotate(45deg);transform:rotate(45deg);left:17px}.swal-icon--error__line--right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg);right:16px}@-webkit-keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}@keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}.swal-icon--warning{border-color:#f8bb86;-webkit-animation:pulseWarning .75s infinite alternate;animation:pulseWarning .75s infinite alternate}.swal-icon--warning__body{width:5px;height:47px;top:10px;border-radius:2px;margin-left:-2px}.swal-icon--warning__body,.swal-icon--warning__dot{position:absolute;left:50%;background-color:#f8bb86}.swal-icon--warning__dot{width:7px;height:7px;border-radius:50%;margin-left:-4px;bottom:-11px}@-webkit-keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}@keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}.swal-icon--success{border-color:#a5dc86}.swal-icon--success:after,.swal-icon--success:before{content:\"\";border-radius:50%;position:absolute;width:60px;height:120px;background:#fff;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal-icon--success:before{border-radius:120px 0 0 120px;top:-7px;left:-33px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:60px 60px;transform-origin:60px 60px}.swal-icon--success:after{border-radius:0 120px 120px 0;top:-11px;left:30px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 60px;transform-origin:0 60px;-webkit-animation:rotatePlaceholder 4.25s ease-in;animation:rotatePlaceholder 4.25s ease-in}.swal-icon--success__ring{width:80px;height:80px;border:4px solid hsla(98,55%,69%,.2);border-radius:50%;box-sizing:content-box;position:absolute;left:-4px;top:-4px;z-index:2}.swal-icon--success__hide-corners{width:5px;height:90px;background-color:#fff;padding:1px;position:absolute;left:28px;top:8px;z-index:1;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal-icon--success__line{height:5px;background-color:#a5dc86;display:block;border-radius:2px;position:absolute;z-index:2}.swal-icon--success__line--tip{width:25px;left:14px;top:46px;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-animation:animateSuccessTip .75s;animation:animateSuccessTip .75s}.swal-icon--success__line--long{width:47px;right:8px;top:38px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-animation:animateSuccessLong .75s;animation:animateSuccessLong .75s}@-webkit-keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}.swal-icon--info{border-color:#c9dae1}.swal-icon--info:before{width:5px;height:29px;bottom:17px;border-radius:2px;margin-left:-2px}.swal-icon--info:after,.swal-icon--info:before{content:\"\";position:absolute;left:50%;background-color:#c9dae1}.swal-icon--info:after{width:7px;height:7px;border-radius:50%;margin-left:-3px;top:19px}.swal-icon{width:80px;height:80px;border-width:4px;border-style:solid;border-radius:50%;padding:0;position:relative;box-sizing:content-box;margin:20px auto}.swal-icon:first-child{margin-top:32px}.swal-icon--custom{width:auto;height:auto;max-width:100%;border:none;border-radius:0}.swal-icon img{max-width:100%;max-height:100%}.swal-title{color:rgba(0,0,0,.65);font-weight:600;text-transform:none;position:relative;display:block;padding:13px 16px;font-size:27px;line-height:normal;text-align:center;margin-bottom:0}.swal-title:first-child{margin-top:26px}.swal-title:not(:first-child){padding-bottom:0}.swal-title:not(:last-child){margin-bottom:13px}.swal-text{font-size:16px;position:relative;float:none;line-height:normal;vertical-align:top;text-align:left;display:inline-block;margin:0;padding:0 10px;font-weight:400;color:rgba(0,0,0,.64);max-width:calc(100% - 20px);overflow-wrap:break-word;box-sizing:border-box}.swal-text:first-child{margin-top:45px}.swal-text:last-child{margin-bottom:45px}.swal-footer{text-align:right;padding-top:13px;margin-top:13px;padding:13px 16px;border-radius:inherit;border-top-left-radius:0;border-top-right-radius:0}.swal-button-container{margin:5px;display:inline-block;position:relative}.swal-button{background-color:#7cd1f9;color:#fff;border:none;box-shadow:none;border-radius:5px;font-weight:600;font-size:14px;padding:10px 24px;margin:0;cursor:pointer}.swal-button:not([disabled]):hover{background-color:#78cbf2}.swal-button:active{background-color:#70bce0}.swal-button:focus{outline:none;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(43,114,165,.29)}.swal-button[disabled]{opacity:.5;cursor:default}.swal-button::-moz-focus-inner{border:0}.swal-button--cancel{color:#555;background-color:#efefef}.swal-button--cancel:not([disabled]):hover{background-color:#e8e8e8}.swal-button--cancel:active{background-color:#d7d7d7}.swal-button--cancel:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(116,136,150,.29)}.swal-button--danger{background-color:#e64942}.swal-button--danger:not([disabled]):hover{background-color:#df4740}.swal-button--danger:active{background-color:#cf423b}.swal-button--danger:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(165,43,43,.29)}.swal-content{padding:0 20px;margin-top:20px;font-size:medium}.swal-content:last-child{margin-bottom:20px}.swal-content__input,.swal-content__textarea{-webkit-appearance:none;background-color:#fff;border:none;font-size:14px;display:block;box-sizing:border-box;width:100%;border:1px solid rgba(0,0,0,.14);padding:10px 13px;border-radius:2px;transition:border-color .2s}.swal-content__input:focus,.swal-content__textarea:focus{outline:none;border-color:#6db8ff}.swal-content__textarea{resize:vertical}.swal-button--loading{color:transparent}.swal-button--loading~.swal-button__loader{opacity:1}.swal-button__loader{position:absolute;height:auto;width:43px;z-index:2;left:50%;top:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);text-align:center;pointer-events:none;opacity:0}.swal-button__loader div{display:inline-block;float:none;vertical-align:baseline;width:9px;height:9px;padding:0;border:none;margin:2px;opacity:.4;border-radius:7px;background-color:hsla(0,0%,100%,.9);transition:background .2s;-webkit-animation:swal-loading-anim 1s infinite;animation:swal-loading-anim 1s infinite}.swal-button__loader div:nth-child(3n+2){-webkit-animation-delay:.15s;animation-delay:.15s}.swal-button__loader div:nth-child(3n+3){-webkit-animation-delay:.3s;animation-delay:.3s}@-webkit-keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}@keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}.swal-overlay{position:fixed;top:0;bottom:0;left:0;right:0;text-align:center;font-size:0;overflow-y:auto;background-color:rgba(0,0,0,.4);z-index:10000;pointer-events:none;opacity:0;transition:opacity .3s}.swal-overlay:before{content:\" \";display:inline-block;vertical-align:middle;height:100%}.swal-overlay--show-modal{opacity:1;pointer-events:auto}.swal-overlay--show-modal .swal-modal{opacity:1;pointer-events:auto;box-sizing:border-box;-webkit-animation:showSweetAlert .3s;animation:showSweetAlert .3s;will-change:transform}.swal-modal{width:478px;opacity:0;pointer-events:none;background-color:#fff;text-align:center;border-radius:5px;position:static;margin:20px auto;display:inline-block;vertical-align:middle;-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;z-index:10001;transition:opacity .2s,-webkit-transform .3s;transition:transform .3s,opacity .2s;transition:transform .3s,opacity .2s,-webkit-transform .3s}@media (max-width:500px){.swal-modal{width:calc(100% - 20px)}}@-webkit-keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}',\"\"])},function(t,e){function n(t,e){var n=t[1]||\"\",r=t[3];if(!r)return n;if(e&&\"function\"==typeof btoa){var i=o(r);return[n].concat(r.sources.map(function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"})).concat([i]).join(\"\\n\")}return[n].join(\"\\n\")}function o(t){return\"\"}t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var o=n(e,t);return e[2]?\"@media \"+e[2]+\"{\"+o+\"}\":o}).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];\"number\"==typeof i&&(o[i]=!0)}for(r=0;r<t.length;r++){var a=t[r];\"number\"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),e.push(a))}},e}},function(t,e,n){function o(t,e){for(var n=0;n<t.length;n++){var o=t[n],r=m[o.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](o.parts[i]);for(;i<o.parts.length;i++)r.parts.push(u(o.parts[i],e))}else{for(var a=[],i=0;i<o.parts.length;i++)a.push(u(o.parts[i],e));m[o.id]={id:o.id,refs:1,parts:a}}}}function r(t,e){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],a=e.base?i[0]+e.base:i[0],s=i[1],c=i[2],l=i[3],u={css:s,media:c,sourceMap:l};o[a]?o[a].parts.push(u):n.push(o[a]={id:a,parts:[u]})}return n}function i(t,e){var n=v(t.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var o=w[w.length-1];if(\"top\"===t.insertAt)o?o.nextSibling?n.insertBefore(e,o.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),w.push(e);else{if(\"bottom\"!==t.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(e)}}function a(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=w.indexOf(t);e>=0&&w.splice(e,1)}function s(t){var e=document.createElement(\"style\");return t.attrs.type=\"text/css\",l(e,t.attrs),i(t,e),e}function c(t){var e=document.createElement(\"link\");return t.attrs.type=\"text/css\",t.attrs.rel=\"stylesheet\",l(e,t.attrs),i(t,e),e}function l(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function u(t,e){var n,o,r,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var l=h++;n=g||(g=s(e)),o=f.bind(null,n,l,!1),r=f.bind(null,n,l,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=c(e),o=p.bind(null,n,e),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(e),o=d.bind(null,n),r=function(){a(n)});return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}function f(t,e,n,o){var r=n?\"\":o.css;if(t.styleSheet)t.styleSheet.cssText=x(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e){var n=e.css,o=e.media;if(o&&t.setAttribute(\"media\",o),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function p(t,e,n){var o=n.css,r=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||i)&&(o=y(o)),r&&(o+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+\" */\");var a=new Blob([o],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var m={},b=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),v=function(t){var e={};return function(n){return void 0===e[n]&&(e[n]=t.call(this,n)),e[n]}}(function(t){return document.querySelector(t)}),g=null,h=0,w=[],y=n(15);t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");e=e||{},e.attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||(e.singleton=b()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=r(t,e);return o(n,e),function(t){for(var i=[],a=0;a<n.length;a++){var s=n[a],c=m[s.id];c.refs--,i.push(c)}if(t){o(r(t,e),e)}for(var a=0;a<i.length;a++){var c=i[a];if(0===c.refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete m[c.id]}}}};var x=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join(\"\\n\")}}()},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var n=e.protocol+\"//\"+e.host,o=n+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(t,e){var r=e.trim().replace(/^\"(.*)\"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(r))return t;var i;return i=0===r.indexOf(\"//\")?r:0===r.indexOf(\"/\")?n+r:o+r.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(i)+\")\"})}},function(t,e,n){var o=n(17);\"undefined\"==typeof window||window.Promise||(window.Promise=o),n(21),String.prototype.includes||(String.prototype.includes=function(t,e){\"use strict\";return\"number\"!=typeof e&&(e=0),!(e+t.length>this.length)&&-1!==this.indexOf(t,e)}),Array.prototype.includes||Object.defineProperty(Array.prototype,\"includes\",{value:function(t,e){if(null==this)throw new TypeError('\"this\" is null or not defined');var n=Object(this),o=n.length>>>0;if(0===o)return!1;for(var r=0|e,i=Math.max(r>=0?r:o-Math.abs(r),0);i<o;){if(function(t,e){return t===e||\"number\"==typeof t&&\"number\"==typeof e&&isNaN(t)&&isNaN(e)}(n[i],t))return!0;i++}return!1}}),\"undefined\"!=typeof window&&function(t){t.forEach(function(t){t.hasOwnProperty(\"remove\")||Object.defineProperty(t,\"remove\",{configurable:!0,enumerable:!0,writable:!0,value:function(){this.parentNode.removeChild(this)}})})}([Element.prototype,CharacterData.prototype,DocumentType.prototype])},function(t,e,n){(function(e){!function(n){function o(){}function r(t,e){return function(){t.apply(e,arguments)}}function i(t){if(\"object\"!=typeof this)throw new TypeError(\"Promises must be constructed via new\");if(\"function\"!=typeof t)throw new TypeError(\"not a function\");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],f(t,this)}function a(t,e){for(;3===t._state;)t=t._value;if(0===t._state)return void t._deferreds.push(e);t._handled=!0,i._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null===n)return void(1===t._state?s:c)(e.promise,t._value);var o;try{o=n(t._value)}catch(t){return void c(e.promise,t)}s(e.promise,o)})}function s(t,e){try{if(e===t)throw new TypeError(\"A promise cannot be resolved with itself.\");if(e&&(\"object\"==typeof e||\"function\"==typeof e)){var n=e.then;if(e instanceof i)return t._state=3,t._value=e,void l(t);if(\"function\"==typeof n)return void f(r(n,e),t)}t._state=1,t._value=e,l(t)}catch(e){c(t,e)}}function c(t,e){t._state=2,t._value=e,l(t)}function l(t){2===t._state&&0===t._deferreds.length&&i._immediateFn(function(){t._handled||i._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function u(t,e,n){this.onFulfilled=\"function\"==typeof t?t:null,this.onRejected=\"function\"==typeof e?e:null,this.promise=n}function f(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,c(e,t))})}catch(t){if(n)return;n=!0,c(e,t)}}var d=setTimeout;i.prototype.catch=function(t){return this.then(null,t)},i.prototype.then=function(t,e){var n=new this.constructor(o);return a(this,new u(t,e,n)),n},i.all=function(t){var e=Array.prototype.slice.call(t);return new i(function(t,n){function o(i,a){try{if(a&&(\"object\"==typeof a||\"function\"==typeof a)){var s=a.then;if(\"function\"==typeof s)return void s.call(a,function(t){o(i,t)},n)}e[i]=a,0==--r&&t(e)}catch(t){n(t)}}if(0===e.length)return t([]);for(var r=e.length,i=0;i<e.length;i++)o(i,e[i])})},i.resolve=function(t){return t&&\"object\"==typeof t&&t.constructor===i?t:new i(function(e){e(t)})},i.reject=function(t){return new i(function(e,n){n(t)})},i.race=function(t){return new i(function(e,n){for(var o=0,r=t.length;o<r;o++)t[o].then(e,n)})},i._immediateFn=\"function\"==typeof e&&function(t){e(t)}||function(t){d(t,0)},i._unhandledRejectionFn=function(t){\"undefined\"!=typeof console&&console&&console.warn(\"Possible Unhandled Promise Rejection:\",t)},i._setImmediateFn=function(t){i._immediateFn=t},i._setUnhandledRejectionFn=function(t){i._unhandledRejectionFn=t},void 0!==t&&t.exports?t.exports=i:n.Promise||(n.Promise=i)}(this)}).call(e,n(18).setImmediate)},function(t,e,n){function o(t,e){this._id=t,this._clearFn=e}var r=Function.prototype.apply;e.setTimeout=function(){return new o(r.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new o(r.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(19),e.setImmediate=setImmediate,e.clearImmediate=clearImmediate},function(t,e,n){(function(t,e){!function(t,n){\"use strict\";function o(t){\"function\"!=typeof t&&(t=new Function(\"\"+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return l[c]=o,s(c),c++}function r(t){delete l[t]}function i(t){var e=t.callback,o=t.args;switch(o.length){case 0:e();break;case 1:e(o[0]);break;case 2:e(o[0],o[1]);break;case 3:e(o[0],o[1],o[2]);break;default:e.apply(n,o)}}function a(t){if(u)setTimeout(a,0,t);else{var e=l[t];if(e){u=!0;try{i(e)}finally{r(t),u=!1}}}}if(!t.setImmediate){var s,c=1,l={},u=!1,f=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,\"[object process]\"==={}.toString.call(t.process)?function(){s=function(t){e.nextTick(function(){a(t)})}}():function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage(\"\",\"*\"),t.onmessage=n,e}}()?function(){var e=\"setImmediate$\"+Math.random()+\"$\",n=function(n){n.source===t&&\"string\"==typeof n.data&&0===n.data.indexOf(e)&&a(+n.data.slice(e.length))};t.addEventListener?t.addEventListener(\"message\",n,!1):t.attachEvent(\"onmessage\",n),s=function(n){t.postMessage(e+n,\"*\")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){a(t.data)},s=function(e){t.port2.postMessage(e)}}():f&&\"onreadystatechange\"in f.createElement(\"script\")?function(){var t=f.documentElement;s=function(e){var n=f.createElement(\"script\");n.onreadystatechange=function(){a(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():function(){s=function(t){setTimeout(a,0,t)}}(),d.setImmediate=o,d.clearImmediate=r}}(\"undefined\"==typeof self?void 0===t?this:t:self)}).call(e,n(7),n(20))},function(t,e){function n(){throw new Error(\"setTimeout has not been defined\")}function o(){throw new Error(\"clearTimeout has not been defined\")}function r(t){if(u===setTimeout)return setTimeout(t,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}function i(t){if(f===clearTimeout)return clearTimeout(t);if((f===o||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function a(){b&&p&&(b=!1,p.length?m=p.concat(m):v=-1,m.length&&s())}function s(){if(!b){var t=r(a);b=!0;for(var e=m.length;e;){for(p=m,m=[];++v<e;)p&&p[v].run();v=-1,e=m.length}p=null,b=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function l(){}var u,f,d=t.exports={};!function(){try{u=\"function\"==typeof setTimeout?setTimeout:n}catch(t){u=n}try{f=\"function\"==typeof clearTimeout?clearTimeout:o}catch(t){f=o}}();var p,m=[],b=!1,v=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];m.push(new c(t,e)),1!==m.length||b||r(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title=\"browser\",d.browser=!0,d.env={},d.argv=[],d.version=\"\",d.versions={},d.on=l,d.addListener=l,d.once=l,d.off=l,d.removeListener=l,d.removeAllListeners=l,d.emit=l,d.prependListener=l,d.prependOnceListener=l,d.listeners=function(t){return[]},d.binding=function(t){throw new Error(\"process.binding is not supported\")},d.cwd=function(){return\"/\"},d.chdir=function(t){throw new Error(\"process.chdir is not supported\")},d.umask=function(){return 0}},function(t,e,n){\"use strict\";n(22).polyfill()},function(t,e,n){\"use strict\";function o(t,e){if(void 0===t||null===t)throw new TypeError(\"Cannot convert first argument to object\");for(var n=Object(t),o=1;o<arguments.length;o++){var r=arguments[o];if(void 0!==r&&null!==r)for(var i=Object.keys(Object(r)),a=0,s=i.length;a<s;a++){var c=i[a],l=Object.getOwnPropertyDescriptor(r,c);void 0!==l&&l.enumerable&&(n[c]=r[c])}}return n}function r(){Object.assign||Object.defineProperty(Object,\"assign\",{enumerable:!1,configurable:!0,writable:!0,value:o})}t.exports={assign:o,polyfill:r}},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(24),r=n(6),i=n(5),a=n(36),s=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(\"undefined\"!=typeof window){var n=a.getOpts.apply(void 0,t);return new Promise(function(t,e){i.default.promise={resolve:t,reject:e},o.default(n),setTimeout(function(){r.openModal()})})}};s.close=r.onAction,s.getState=r.getState,s.setActionValue=i.setActionValue,s.stopLoading=r.stopLoading,s.setDefaults=a.setDefaults,e.default=s},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r=n(0),i=r.default.MODAL,a=n(4),s=n(34),c=n(35),l=n(1);e.init=function(t){o.getNode(i)||(document.body||l.throwErr(\"You can only use SweetAlert AFTER the DOM has loaded!\"),s.default(),a.default()),a.initModalContent(t),c.default(t)},e.default=e.init},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(0),r=o.default.MODAL;e.modalMarkup='\\n  <div class=\"'+r+'\" role=\"dialog\" aria-modal=\"true\"></div>',e.default=e.modalMarkup},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(0),r=o.default.OVERLAY,i='<div \\n    class=\"'+r+'\"\\n    tabIndex=\"-1\">\\n  </div>';e.default=i},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(0),r=o.default.ICON;e.errorIconMarkup=function(){var t=r+\"--error\",e=t+\"__line\";return'\\n    <div class=\"'+t+'__x-mark\">\\n      <span class=\"'+e+\" \"+e+'--left\"></span>\\n      <span class=\"'+e+\" \"+e+'--right\"></span>\\n    </div>\\n  '},e.warningIconMarkup=function(){var t=r+\"--warning\";return'\\n    <span class=\"'+t+'__body\">\\n      <span class=\"'+t+'__dot\"></span>\\n    </span>\\n  '},e.successIconMarkup=function(){var t=r+\"--success\";return'\\n    <span class=\"'+t+\"__line \"+t+'__line--long\"></span>\\n    <span class=\"'+t+\"__line \"+t+'__line--tip\"></span>\\n\\n    <div class=\"'+t+'__ring\"></div>\\n    <div class=\"'+t+'__hide-corners\"></div>\\n  '}},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(0),r=o.default.CONTENT;e.contentMarkup='\\n  <div class=\"'+r+'\">\\n\\n  </div>\\n'},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(0),r=o.default.BUTTON_CONTAINER,i=o.default.BUTTON,a=o.default.BUTTON_LOADER;e.buttonMarkup='\\n  <div class=\"'+r+'\">\\n\\n    <button\\n      class=\"'+i+'\"\\n    ></button>\\n\\n    <div class=\"'+a+'\">\\n      <div></div>\\n      <div></div>\\n      <div></div>\\n    </div>\\n\\n  </div>\\n'},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(4),r=n(2),i=n(0),a=i.default.ICON,s=i.default.ICON_CUSTOM,c=[\"error\",\"warning\",\"success\",\"info\"],l={error:r.errorIconMarkup(),warning:r.warningIconMarkup(),success:r.successIconMarkup()},u=function(t,e){var n=a+\"--\"+t;e.classList.add(n);var o=l[t];o&&(e.innerHTML=o)},f=function(t,e){e.classList.add(s);var n=document.createElement(\"img\");n.src=t,e.appendChild(n)},d=function(t){if(t){var e=o.injectElIntoModal(r.iconMarkup);c.includes(t)?u(t,e):f(t,e)}};e.default=d},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(2),r=n(4),i=function(t){navigator.userAgent.includes(\"AppleWebKit\")&&(t.style.display=\"none\",t.offsetHeight,t.style.display=\"\")};e.initTitle=function(t){if(t){var e=r.injectElIntoModal(o.titleMarkup);e.textContent=t,i(e)}},e.initText=function(t){if(t){var e=document.createDocumentFragment();t.split(\"\\n\").forEach(function(t,n,o){e.appendChild(document.createTextNode(t)),n<o.length-1&&e.appendChild(document.createElement(\"br\"))});var n=r.injectElIntoModal(o.textMarkup);n.appendChild(e),i(n)}}},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r=n(4),i=n(0),a=i.default.BUTTON,s=i.default.DANGER_BUTTON,c=n(3),l=n(2),u=n(6),f=n(5),d=function(t,e,n){var r=e.text,i=e.value,d=e.className,p=e.closeModal,m=o.stringToNode(l.buttonMarkup),b=m.querySelector(\".\"+a),v=a+\"--\"+t;if(b.classList.add(v),d){(Array.isArray(d)?d:d.split(\" \")).filter(function(t){return t.length>0}).forEach(function(t){b.classList.add(t)})}n&&t===c.CONFIRM_KEY&&b.classList.add(s),b.textContent=r;var g={};return g[t]=i,f.setActionValue(g),f.setActionOptionsFor(t,{closeModal:p}),b.addEventListener(\"click\",function(){return u.onAction(t)}),m},p=function(t,e){var n=r.injectElIntoModal(l.footerMarkup);for(var o in t){var i=t[o],a=d(o,i,e);i.visible&&n.appendChild(a)}0===n.children.length&&n.remove()};e.default=p},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(3),r=n(4),i=n(2),a=n(5),s=n(6),c=n(0),l=c.default.CONTENT,u=function(t){t.addEventListener(\"input\",function(t){var e=t.target,n=e.value;a.setActionValue(n)}),t.addEventListener(\"keyup\",function(t){if(\"Enter\"===t.key)return s.onAction(o.CONFIRM_KEY)}),setTimeout(function(){t.focus(),a.setActionValue(\"\")},0)},f=function(t,e,n){var o=document.createElement(e),r=l+\"__\"+e;o.classList.add(r);for(var i in n){var a=n[i];o[i]=a}\"input\"===e&&u(o),t.appendChild(o)},d=function(t){if(t){var e=r.injectElIntoModal(i.contentMarkup),n=t.element,o=t.attributes;\"string\"==typeof n?f(e,n,o):e.appendChild(n)}};e.default=d},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r=n(2),i=function(){var t=o.stringToNode(r.overlayMarkup);document.body.appendChild(t)};e.default=i},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(5),r=n(6),i=n(1),a=n(3),s=n(0),c=s.default.MODAL,l=s.default.BUTTON,u=s.default.OVERLAY,f=function(t){t.preventDefault(),v()},d=function(t){t.preventDefault(),g()},p=function(t){if(o.default.isOpen)switch(t.key){case\"Escape\":return r.onAction(a.CANCEL_KEY)}},m=function(t){if(o.default.isOpen)switch(t.key){case\"Tab\":return f(t)}},b=function(t){if(o.default.isOpen)return\"Tab\"===t.key&&t.shiftKey?d(t):void 0},v=function(){var t=i.getNode(l);t&&(t.tabIndex=0,t.focus())},g=function(){var t=i.getNode(c),e=t.querySelectorAll(\".\"+l),n=e.length-1,o=e[n];o&&o.focus()},h=function(t){t[t.length-1].addEventListener(\"keydown\",m)},w=function(t){t[0].addEventListener(\"keydown\",b)},y=function(){var t=i.getNode(c),e=t.querySelectorAll(\".\"+l);e.length&&(h(e),w(e))},x=function(t){if(i.getNode(u)===t.target)return r.onAction(a.CANCEL_KEY)},_=function(t){var e=i.getNode(u);e.removeEventListener(\"click\",x),t&&e.addEventListener(\"click\",x)},k=function(t){o.default.timer&&clearTimeout(o.default.timer),t&&(o.default.timer=window.setTimeout(function(){return r.onAction(a.CANCEL_KEY)},t))},O=function(t){t.closeOnEsc?document.addEventListener(\"keyup\",p):document.removeEventListener(\"keyup\",p),t.dangerMode?v():g(),y(),_(t.closeOnClickOutside),k(t.timer)};e.default=O},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r=n(3),i=n(37),a=n(38),s={title:null,text:null,icon:null,buttons:r.defaultButtonList,content:null,className:null,closeOnClickOutside:!0,closeOnEsc:!0,dangerMode:!1,timer:null},c=Object.assign({},s);e.setDefaults=function(t){c=Object.assign({},s,t)};var l=function(t){var e=t&&t.button,n=t&&t.buttons;return void 0!==e&&void 0!==n&&o.throwErr(\"Cannot set both 'button' and 'buttons' options!\"),void 0!==e?{confirm:e}:n},u=function(t){return o.ordinalSuffixOf(t+1)},f=function(t,e){o.throwErr(u(e)+\" argument ('\"+t+\"') is invalid\")},d=function(t,e){var n=t+1,r=e[n];o.isPlainObject(r)||void 0===r||o.throwErr(\"Expected \"+u(n)+\" argument ('\"+r+\"') to be a plain object\")},p=function(t,e){var n=t+1,r=e[n];void 0!==r&&o.throwErr(\"Unexpected \"+u(n)+\" argument (\"+r+\")\")},m=function(t,e,n,r){var i=typeof e,a=\"string\"===i,s=e instanceof Element;if(a){if(0===n)return{text:e};if(1===n)return{text:e,title:r[0]};if(2===n)return d(n,r),{icon:e};f(e,n)}else{if(s&&0===n)return d(n,r),{content:e};if(o.isPlainObject(e))return p(n,r),e;f(e,n)}};e.getOpts=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n={};t.forEach(function(e,o){var r=m(0,e,o,t);Object.assign(n,r)});var o=l(n);n.buttons=r.getButtonListOpts(o),delete n.button,n.content=i.getContentOpts(n.content);var u=Object.assign({},s,c,n);return Object.keys(u).forEach(function(t){a.DEPRECATED_OPTS[t]&&a.logDeprecation(t)}),u}},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(1),r={element:\"input\",attributes:{placeholder:\"\"}};e.getContentOpts=function(t){var e={};return o.isPlainObject(t)?Object.assign(e,t):t instanceof Element?{element:t}:\"input\"===t?r:null}},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.logDeprecation=function(t){var n=e.DEPRECATED_OPTS[t],o=n.onlyRename,r=n.replacement,i=n.subOption,a=n.link,s=o?\"renamed\":\"deprecated\",c='SweetAlert warning: \"'+t+'\" option has been '+s+\".\";if(r){c+=\" Please use\"+(i?' \"'+i+'\" in ':\" \")+'\"'+r+'\" instead.'}var l=\"https://sweetalert.js.org\";c+=a?\" More details: \"+l+a:\" More details: \"+l+\"/guides/#upgrading-from-1x\",console.warn(c)},e.DEPRECATED_OPTS={type:{replacement:\"icon\",link:\"/docs/#icon\"},imageUrl:{replacement:\"icon\",link:\"/docs/#icon\"},customClass:{replacement:\"className\",onlyRename:!0,link:\"/docs/#classname\"},imageSize:{},showCancelButton:{replacement:\"buttons\",link:\"/docs/#buttons\"},showConfirmButton:{replacement:\"button\",link:\"/docs/#button\"},confirmButtonText:{replacement:\"button\",link:\"/docs/#button\"},confirmButtonColor:{},cancelButtonText:{replacement:\"buttons\",link:\"/docs/#buttons\"},closeOnConfirm:{replacement:\"button\",subOption:\"closeModal\",link:\"/docs/#button\"},closeOnCancel:{replacement:\"buttons\",subOption:\"closeModal\",link:\"/docs/#buttons\"},showLoaderOnConfirm:{replacement:\"buttons\"},animation:{},inputType:{replacement:\"content\",link:\"/docs/#content\"},inputValue:{replacement:\"content\",link:\"/docs/#content\"},inputPlaceholder:{replacement:\"content\",link:\"/docs/#content\"},html:{replacement:\"content\",link:\"/docs/#content\"},allowEscapeKey:{replacement:\"closeOnEsc\",onlyRename:!0,link:\"/docs/#closeonesc\"},allowClickOutside:{replacement:\"closeOnClickOutside\",onlyRename:!0,link:\"/docs/#closeonclickoutside\"}}}])});","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { IMe, Provider } from \"../../../../interfaces/IMe\";\nimport { Token } from \"../../../../app/entity/Token\";\nimport swal from \"sweetalert\";\n\n@Component\nexport default class Table extends Vue {\n    @Prop(String) credentials_id!: String;\n    @Prop(String) consent_status!: String;\n    @Prop(String) consent_status_created_at!: String;\n    @Prop(String) consent_status_expires_at!: String;\n    @Prop(String) provider_name!: String;\n    @Prop(String) provider_icon!: String;\n\n    async refresh() {\n        let config: AxiosRequestConfig = {\n            url: \"http://localhost:3000/home/refresh\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n        let response: AxiosResponse | undefined;\n\n        try {\n            response = await axios(config);\n        } catch (e) {\n            console.log(e);\n            return swal(\n                \"Internal Server Error\",\n                \"Please, try again later\",\n                \"error\"\n            );\n        }\n\n        if (response.data.success) {\n            swal(\n                \"Done!\",\n                \"Your access token has been successfully refreshed\",\n                \"success\"\n            );\n        } else {\n            swal(\n                \"Something went wrong\",\n                \"We could not refresh your token - please, try again later\",\n                \"error\"\n            );\n        }\n    }\n\n    async validate() {\n        let config: AxiosRequestConfig = {\n            url: \"http://localhost:3000/home/validate\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n        let response: AxiosResponse | undefined;\n\n        try {\n            response = await axios(config);\n        } catch (e) {\n            console.log(e);\n            return swal(\n                \"Internal Server Error\",\n                \"Please, try again later\",\n                \"error\"\n            );\n        }\n\n        if (response.data.success) {\n            swal(\"Done!\", \"Your token is valid\", \"success\");\n        } else {\n            swal(\n                \"Something went wrong\",\n                \"Your token seems to not be valid - please, try entering a new token\",\n                \"error\"\n            );\n        }\n    }\n\n    addToken() {\n        window.location.assign(\n            \"https://auth.truelayer.com/?response_type=code&client_id=test-eb3e42&nonce=1535304510&scope=info%20accounts%20balance%20cards%20transactions%20direct_debits%20standing_orders%20products%20beneficiaries%20offline_access&redirect_uri=http://localhost:3000/callback/callback&enable_mock=true&enable_oauth_providers=true&enable_open_banking_providers=true&enable_credentials_sharing_providers=false\"\n        );\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component } from \"vue-property-decorator\";\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport swal from \"sweetalert\";\n\n@Component\nexport default class Navbar extends Vue {\n    textLogOut = \"Log out\";\n\n    async logout() {\n        let config: AxiosRequestConfig = {\n            url: \"http://localhost:3000/auth/logout\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n        let response: AxiosResponse | undefined;\n\n        try {\n            response = await axios(config);\n        } catch (e) {\n            console.log(e);\n            return \"ok\";\n        }\n        if (!response) {\n            debugger;\n        }\n        window.location.replace(\"http://localhost:3000/access/auth.html\");\n        // await swal({\n        //     text: \"Are you sure you want to log out?\",\n        //     icon: \"warning\",\n        //     buttons: {\n        //         cancel: true,\n        //         confirm: {\n        //             text: \"OK\",\n        //             value: true,\n        //             closeModal: true\n        //         }\n        //     }\n        // });\n    }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","export const TL_SECRET=\"c63b4b72-7a09-4662-91bc-8730a98d6f4f\";\nexport const conString = \"app-db://user:password@localhost:5432/app\";\nexport const client_id = \"test-eb3e42\";","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","export class RandomGenerator {\n\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    static sha1(str: string) {\n\n        let _rotLeft = function(n: any, s: any) {\n            let t4 = (n << s) | (n >>> (32 - s));\n            return t4;\n        };\n\n        let _cvtHex = function(val: any) {\n            let str = \"\";\n            let i;\n            let v;\n\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f;\n                str += v.toString(16);\n            }\n            return str;\n        };\n\n        let blockstart;\n        let i, j;\n        let W = new Array(80);\n        let H0 = 0x67452301;\n        let H1 = 0xEFCDAB89;\n        let H2 = 0x98BADCFE;\n        let H3 = 0x10325476;\n        let H4 = 0xC3D2E1F0;\n        let A, B, C, D, E;\n        let temp;\n\n        // utf8_encode\n        str = /*unescape*/(encodeURIComponent(str));\n        let strLen = str.length;\n\n        let wordArray = [];\n        for (i = 0; i < strLen - 3; i += 4) {\n            j = str.charCodeAt(i) << 24 |\n                str.charCodeAt(i + 1) << 16 |\n                str.charCodeAt(i + 2) << 8 |\n                str.charCodeAt(i + 3);\n            wordArray.push(j);\n        }\n\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000;\n                break;\n            case 1:\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\n                break;\n            case 2:\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\n                break;\n            case 3:\n                i = str.charCodeAt(strLen - 3) << 24 |\n                    str.charCodeAt(strLen - 2) << 16 |\n                    str.charCodeAt(strLen - 1) <<\n                    8 | 0x80;\n                break;\n        }\n\n        wordArray.push(i);\n\n        while ((wordArray.length % 16) !== 14) {\n            wordArray.push(0);\n        }\n\n        wordArray.push(strLen >>> 29);\n        wordArray.push((strLen << 3) & 0x0ffffffff);\n\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i];\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n            }\n\n            A = H0;\n            B = H1;\n            C = H2;\n            D = H3;\n            E = H4;\n\n            for (i = 0; i <= 19; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 20; i <= 39; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 40; i <= 59; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 60; i <= 79; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            H0 = (H0 + A) & 0x0ffffffff;\n            H1 = (H1 + B) & 0x0ffffffff;\n            H2 = (H2 + C) & 0x0ffffffff;\n            H3 = (H3 + D) & 0x0ffffffff;\n            H4 = (H4 + E) & 0x0ffffffff;\n        }\n\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\n        return temp.toLowerCase();\n    }\n\n    /**\n     * RFC4122 compliant UUID v4 generator.\n     */\n    static uuid4(): string {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) =>  {\n            const r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n}","/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string, firstCapital: boolean = false): string {\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\n        if (firstCapital === true && offset === 0) return p1;\n        if (p2) return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n\n/**\n * Converts string into snake-case.\n *\n * @see https://regex101.com/r/QeSm2I/1\n */\nexport function snakeCase(str: string) {\n    return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, \"$1_$3$2$4\").toLowerCase();\n}\n\n/**\n * Converts string into title-case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str: string): string {\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str: string, abbrLettersCount: number = 1): string {\n    const words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount);\n        return res;\n    }, \"\");\n}\n\nexport interface IShortenOptions {\n    /** String used to split \"segments\" of the alias/column name */\n    separator?: string;\n    /** Maximum length of any \"segment\" */\n    segmentLength?: number;\n    /** Length of any \"term\" in a \"segment\"; \"OrderItem\" is a segment, \"Order\" and \"Items\" are terms */\n    termLength?: number;\n  }\n\n  /**\n   * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n   * maximum length of aliases and column names in SQL queries.\n   *\n   * @param input String to be shortened.\n   * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n   *\n   * @return Shortened `input`.\n   *\n   * @example\n   * // returns: \"UsShCa__orde__mark__dire\"\n   * shorten('UserShoppingCart__order__market__director')\n   *\n   * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n   * shorten(\n   *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n   *   { separator: '_', segmentLength: 3 }\n   * )\n   *\n   * // equals: UsShCa__orde__mark_market_id\n   * `${shorten('UserShoppingCart__order__market')}_market_id`\n   */\n  export function shorten(input: string, options: IShortenOptions = {}): string {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options;\n\n    const segments = input.split(separator);\n    const shortSegments = segments.reduce((acc: string[], val: string) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \");\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength;\n        const shortSegment = segmentTerms.map(term => term.substr(0, length)).join(\"\");\n\n        acc.push(shortSegment);\n        return acc;\n    }, []);\n\n    return shortSegments.join(separator);\n  }\n","import {TableColumnOptions} from \"../options/TableColumnOptions\";\n\n/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default?: any;\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     * `rowid` option supported only in CockroachDB.\n     */\n    generationStrategy?: \"uuid\"|\"increment\"|\"rowid\";\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length: string = \"\";\n\n    /**\n     * Column type's display width. Used only on some column types in MySQL.\n     * For example, INT(4) specifies an INT with a display width of four digits.\n     */\n    width?: number;\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string;\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number|null;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false;\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: string[];\n\n    /**\n     * Generated column expression. Supports only in MySQL.\n     */\n    asExpression?: string;\n\n    /**\n     * Generated column type. Supports only in MySQL.\n     */\n    generatedType?: \"VIRTUAL\"|\"STORED\";\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string;\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableColumnOptions) {\n        if (options) {\n            this.name = options.name;\n            this.type = options.type || \"\";\n            this.length = options.length || \"\";\n            this.width = options.width;\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.zerofill = options.zerofill || false;\n            this.unsigned = this.zerofill ? true : (options.unsigned || false);\n            this.default = options.default;\n            this.onUpdate = options.onUpdate;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.isArray = options.isArray || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n            this.asExpression = options.asExpression;\n            this.generatedType = options.generatedType;\n            this.spatialFeatureType = options.spatialFeatureType;\n            this.srid = options.srid;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone(): TableColumn {\n        return new TableColumn(<TableColumnOptions>{\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid\n        });\n    }\n\n}\n","import {IndexMetadata} from \"../../metadata/IndexMetadata\";\nimport {TableIndexOptions} from \"../options/TableIndexOptions\";\n\n/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Index name.\n     */\n    name?: string;\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean;\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean;\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean;\n\n    /**\n     * Index filter condition.\n     */\n    where: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableIndexOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.isUnique = !!options.isUnique;\n        this.isSpatial = !!options.isSpatial;\n        this.isFulltext = !!options.isFulltext;\n        this.where = options.where ? options.where : \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone(): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isFulltext: this.isFulltext,\n            where: this.where\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map(column => column.databaseName),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isFulltext: indexMetadata.isFulltext,\n            where: indexMetadata.where\n        });\n    }\n\n}\n","import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\nimport {TableForeignKeyOptions} from \"../options/TableForeignKeyOptions\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = [];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string;\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start \n     * or at the end of a transaction\n     */\n    deferrable?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    }\n\n}\n","import {TableColumnOptions} from \"../options/TableColumnOptions\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Driver} from \"../../driver/Driver\";\n\nexport class TableUtils {\n\n    static createTableColumnOptions(columnMetadata: ColumnMetadata, driver: Driver): TableColumnOptions {\n        return {\n            name: columnMetadata.databaseName,\n            length: columnMetadata.length,\n            width: columnMetadata.width,\n            charset: columnMetadata.charset,\n            collation: columnMetadata.collation,\n            precision: columnMetadata.precision,\n            scale: columnMetadata.scale,\n            zerofill: columnMetadata.zerofill,\n            unsigned: columnMetadata.unsigned,\n            asExpression: columnMetadata.asExpression,\n            generatedType: columnMetadata.generatedType,\n            default: driver.normalizeDefault(columnMetadata),\n            onUpdate: columnMetadata.onUpdate,\n            comment: columnMetadata.comment,\n            isGenerated: columnMetadata.isGenerated,\n            generationStrategy: columnMetadata.generationStrategy,\n            isNullable: columnMetadata.isNullable,\n            type: driver.normalizeType(columnMetadata),\n            isPrimary: columnMetadata.isPrimary,\n            isUnique: driver.normalizeIsUnique(columnMetadata),\n            isArray: columnMetadata.isArray || false,\n            enum: columnMetadata.enum ? columnMetadata.enum.map(val => val + \"\") : columnMetadata.enum,\n            spatialFeatureType: columnMetadata.spatialFeatureType,\n            srid: columnMetadata.srid\n        };\n    }\n\n}\n","import {TableUniqueOptions} from \"../options/TableUniqueOptions\";\nimport {UniqueMetadata} from \"../../metadata/UniqueMetadata\";\n\n/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Columns that contains this constraint.\n     */\n    columnNames: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableUniqueOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames]\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    static create(uniqueMetadata: UniqueMetadata): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map(column => column.databaseName)\n        });\n    }\n\n}","import {TableCheckOptions} from \"../options/TableCheckOptions\";\nimport {CheckMetadata} from \"../../metadata/CheckMetadata\";\n\n/**\n * Database's table check constraint stored in this class.\n */\nexport class TableCheck {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Column that contains this constraint.\n     */\n    columnNames?: string[] = [];\n\n    /**\n     * Check expression.\n     */\n    expression?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableCheckOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.expression = options.expression;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableCheck {\n        return new TableCheck(<TableCheckOptions>{\n            name: this.name,\n            columnNames: this.columnNames ? [...this.columnNames] : [],\n            expression: this.expression,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates checks from the check metadata object.\n     */\n    static create(checkMetadata: CheckMetadata): TableCheck {\n        return new TableCheck(<TableCheckOptions>{\n            name: checkMetadata.name,\n            expression: checkMetadata.expression\n        });\n    }\n\n}","import {TableExclusionOptions} from \"../options/TableExclusionOptions\";\nimport {ExclusionMetadata} from \"../../metadata/ExclusionMetadata\";\n\n/**\n * Database's table exclusion constraint stored in this class.\n */\nexport class TableExclusion {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Exclusion expression.\n     */\n    expression?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableExclusionOptions) {\n        this.name = options.name;\n        this.expression = options.expression;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableExclusion {\n        return new TableExclusion(<TableExclusionOptions>{\n            name: this.name,\n            expression: this.expression,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates exclusions from the exclusion metadata object.\n     */\n    static create(exclusionMetadata: ExclusionMetadata): TableExclusion {\n        return new TableExclusion(<TableExclusionOptions>{\n            name: exclusionMetadata.name,\n            expression: exclusionMetadata.expression\n        });\n    }\n\n}\n","import {TableColumn} from \"./TableColumn\";\nimport {TableIndex} from \"./TableIndex\";\nimport {TableForeignKey} from \"./TableForeignKey\";\nimport {Driver} from \"../../driver/Driver\";\nimport {TableOptions} from \"../options/TableOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {TableUtils} from \"../util/TableUtils\";\nimport {TableUnique} from \"./TableUnique\";\nimport {TableCheck} from \"./TableCheck\";\nimport {TableExclusion} from \"./TableExclusion\";\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Contains database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = [];\n\n    /**\n     * Table unique constraints.\n     */\n    uniques: TableUnique[] = [];\n\n    /**\n     * Table check constraints.\n     */\n    checks: TableCheck[] = [];\n\n    /**\n     * Table exclusion constraints.\n     */\n    exclusions: TableExclusion[] = [];\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false;\n\n    /**\n     * Table engine.\n     */\n    engine?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableOptions) {\n        if (options) {\n            this.name = options.name;\n\n            if (options.columns)\n                this.columns = options.columns.map(column => new TableColumn(column));\n\n            if (options.indices)\n                this.indices = options.indices.map(index => new TableIndex(index));\n\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey(foreignKey));\n\n            if (options.uniques)\n                this.uniques = options.uniques.map(unique => new TableUnique(unique));\n\n            if (options.checks)\n                this.checks = options.checks.map(check => new TableCheck(check));\n\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(exclusion => new TableExclusion(exclusion));\n\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated;\n\n            this.engine = options.engine;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get primaryColumns(): TableColumn[] {\n        return this.columns.filter(column => column.isPrimary);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        return new Table(<TableOptions>{\n            name: this.name,\n            columns: this.columns.map(column => column.clone()),\n            indices: this.indices.map(constraint => constraint.clone()),\n            foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),\n            uniques: this.uniques.map(constraint => constraint.clone()),\n            checks: this.checks.map(constraint => constraint.clone()),\n            exclusions: this.exclusions.map(constraint => constraint.clone()),\n            justCreated: this.justCreated,\n            engine: this.engine,\n        });\n    }\n\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column: TableColumn): void {\n        this.columns.push(column);\n    }\n\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column: TableColumn): void {\n        const foundColumn = this.columns.find(c => c.name === column.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint: TableUnique): void {\n        this.uniques.push(uniqueConstraint);\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);\n            if (uniqueColumn)\n                uniqueColumn.isUnique = true;\n        }\n    }\n\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique: TableUnique): void {\n        const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);\n                if (uniqueColumn)\n                    uniqueColumn.isUnique = false;\n            }\n        }\n    }\n\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint: TableCheck): void {\n        this.checks.push(checkConstraint);\n    }\n\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck: TableCheck): void {\n        const foundCheck = this.checks.find(check => check.name === removedCheck.name);\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1);\n        }\n    }\n\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint: TableExclusion): void {\n        this.exclusions.push(exclusionConstraint);\n    }\n\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion: TableExclusion): void {\n        const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n        }\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey: TableForeignKey): void {\n        this.foreignKeys.push(foreignKey);\n    }\n\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey): void {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Adds index.\n     */\n    addIndex(index: TableIndex, isMysql: boolean = false): void {\n        this.indices.push(index);\n\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find(c => c.name === index.columnNames[0]);\n            if (column)\n                column.isUnique = true;\n        }\n    }\n\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex: TableIndex, isMysql: boolean = false): void {\n        const index = this.indices.find(index => index.name === tableIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find(c => c.name === index.columnNames[0]);\n                if (column)\n                    column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);\n            }\n        }\n    }\n\n    findColumnByName(name: string): TableColumn|undefined {\n        return this.columns.find(column => column.name === name);\n    }\n\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column: TableColumn): TableIndex[] {\n        return this.indices.filter(index => {\n           return !!index.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column: TableColumn): TableForeignKey[] {\n        return this.foreignKeys.filter(foreignKey => {\n            return !!foreignKey.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column: TableColumn): TableUnique[] {\n        return this.uniques.filter(unique => {\n            return !!unique.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column: TableColumn): TableCheck[] {\n        return this.checks.filter(check => {\n            return !!check.columnNames!.find(columnName => columnName === column.name);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): Table {\n        const options: TableOptions = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter(column => column)\n                .map(column => TableUtils.createTableColumnOptions(column, driver)),\n            indices: entityMetadata.indices\n                .filter(index => index.synchronize === true)\n                .map(index => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map(unique => TableUnique.create(unique)),\n            checks: entityMetadata.checks.map(check => TableCheck.create(check)),\n            exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion.create(exclusion)),\n        };\n\n        return new Table(options);\n    }\n\n}\n","import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {camelCase, snakeCase, titleCase} from \"../util/StringUtils\";\nimport {Table} from \"../schema-builder/table/Table\";\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string|undefined): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\";\n    }\n\n    columnName(propertyName: string, customName: string, embeddedPrefixes: string[]): string { // todo: simplify\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + (customName ? titleCase(customName) : titleCase(propertyName));\n\n        return customName ? customName : propertyName;\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName;\n    }\n\n    primaryKeyName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    uniqueConstraintName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    relationConstraintName(tableOrName: Table|string, columnNames: string[], where?: string): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    defaultConstraintName(tableOrName: Table|string, columnName: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${columnName}`;\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    foreignKeyName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    indexName(tableOrName: Table|string, columnNames: string[], where?: string): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    checkConstraintName(tableOrName: Table|string, expression: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    exclusionConstraintName(tableOrName: Table|string, expression: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    }\n\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string): string {\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n    }\n\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string {\n        return columnName + \"_\" + index;\n    }\n\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    }\n\n    joinTableInverseColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName);\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName;\n    }\n\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n    }\n}\n","/**\n * Thrown when consumer tries to execute operation allowed only if connection is opened.\n */\nexport class CannotExecuteNotConnectedError extends Error {\n    name = \"CannotExecuteNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotExecuteNotConnectedError.prototype);\n        this.message = `Cannot execute operation on \"${connectionName}\" connection because connection is not yet established.`;\n    }\n\n}","/**\n * Thrown when consumer tries to connect when he already connected.\n */\nexport class CannotConnectAlreadyConnectedError extends Error {\n    name = \"CannotConnectAlreadyConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotConnectAlreadyConnectedError.prototype);\n        this.message = `Cannot create a \"${connectionName}\" connection because connection to the database already established.`;\n    }\n\n}","import {EntitySchema} from \"../index\";\n\n/**\n */\nexport class EntityMetadataNotFoundError extends Error {\n    name = \"EntityMetadataNotFound\";\n\n    constructor(target: Function|EntitySchema<any>|string) {\n        super();\n        Object.setPrototypeOf(this, EntityMetadataNotFoundError.prototype);\n        let targetName: string;\n        if (target instanceof EntitySchema) {\n            targetName = target.options.name;\n        } else if (typeof target === \"function\") {\n            targetName = target.name;\n        } else {\n            targetName = target;\n        }\n        this.message = `No metadata for \"${targetName}\" was found.`;\n    }\n\n}","import {MigrationInterface} from \"./MigrationInterface\";\n\n/**\n * Represents entity of the migration in the database.\n */\nexport class Migration {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Migration id.\n     * Indicates order of the executed migrations.\n     */\n    id: number|undefined;\n\n    /**\n     * Timestamp of the migration.\n     */\n    timestamp: number;\n\n    /**\n     * Name of the migration (class name).\n     */\n    name: string;\n\n    /**\n     * Migration instance that needs to be run.\n     */\n    instance?: MigrationInterface;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(id: number|undefined, timestamp: number, name: string, instance?: MigrationInterface) {\n        this.id = id;\n        this.timestamp = timestamp;\n        this.name = name;\n        this.instance = instance;\n    }\n\n}","/**\n * Utils to help to work with Promise objects.\n */\nexport class PromiseUtils {\n\n    /**\n     * Creates a new promise with resolved value used for lazy relations.\n     */\n    static create(value: any) {\n        const promise = Promise.resolve(value);\n        (promise as any)[\"__value__\"] = value;\n        return promise;\n    }\n\n    /**\n     * If given value is a promise created by \"create\" method this method gets its value.\n     * If given value is not a promise then given value is returned back.\n     */\n    static extractValue(object: any) {\n        if (object instanceof Promise && (object as any)[\"__value__\"])\n            return (object as any)[\"__value__\"];\n\n        return object;\n    }\n\n    /**\n     * Runs given callback that returns promise for each item in the given collection in order.\n     * Operations executed after each other, right after previous promise being resolved.\n     */\n    static runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\n        const results: U[] = [];\n        return collection.reduce((promise, item) => {\n            return promise.then(() => {\n                return callback(item);\n            }).then(result => {\n                results.push(result);\n            });\n        }, Promise.resolve()).then(() => {\n            return results;\n        });\n    }\n\n    /**\n     * Returns a promise that is fulfilled with an array of promise state snapshots,\n     * but only after all the original promises have settled, i.e. become either fulfilled or rejected.\n     */\n    static settle(promises: Promise<any>[]) {\n        return Promise.all(promises.map(p => Promise.resolve(p).then(v => ({\n            state: \"fulfilled\",\n            value: v,\n        }), r => ({\n            state: \"rejected\",\n            reason: r,\n        })))).then((results: any[]): any => {\n            const rejected = results.find(result => result.state === \"rejected\");\n            if (rejected)\n                return Promise.reject(rejected.reason);\n\n            return results.map(result => result.value);\n        });\n    }\n\n}","/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class ConnectionIsNotSetError extends Error {\n    name = \"ConnectionIsNotSetError\";\n\n    constructor(dbType: string) {\n        super();\n        Object.setPrototypeOf(this, ConnectionIsNotSetError.prototype);\n        this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;\n    }\n\n}","/**\n * Thrown when required driver's package is not installed.\n */\nexport class DriverPackageNotInstalledError extends Error {\n    name = \"DriverPackageNotInstalledError\";\n\n    constructor(driverName: string, packageName: string) {\n        super();\n        Object.setPrototypeOf(this, DriverPackageNotInstalledError.prototype);\n        this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;\n    }\n\n}","import { Driver } from \"./Driver\";\nimport { shorten } from \"../util/StringUtils\";\n\n    /**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const parsedUrl = this.parseConnectionUrl(options.url);\n            let urlDriverOptions: any = {\n                type: parsedUrl.type,\n                host: parsedUrl.host,\n                username: parsedUrl.username,\n                password: parsedUrl.password,\n                port: parsedUrl.port,\n                database: parsedUrl.database\n            };\n            if (buildOptions && buildOptions.useSid) {\n                urlDriverOptions.sid = parsedUrl.database;\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n    /**\n     * Builds column alias from given alias name and column name,\n     * If alias length is greater than the limit (if any) allowed by the current\n     * driver, abbreviates the longest part (alias or column name) in the resulting\n     * alias.\n     *\n     * @param driver Current `Driver`.\n     * @param alias Alias part.\n     * @param column Name of the column to be concatened to `alias`.\n     *\n     * @return An alias allowing to select/transform the target `column`.\n     */\n    static buildColumnAlias({ maxAliasLength }: Driver, alias: string, column: string): string {\n        const columnAliasName = alias + \"_\" + column;\n\n        if (maxAliasLength && maxAliasLength > 0 && columnAliasName.length > maxAliasLength)\n            return alias.length > column.length\n                ? `${shorten(alias)}_${column}`\n                : `${alias}_${shorten(column)}`;\n\n        return columnAliasName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n}\n","export class ObjectUtils {\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source The source object from which to copy properties.\n   */\n  static assign<T, U>(target: T, source: U): T & U;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   */\n  static assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   * @param source3 The third source object from which to copy properties.\n   */\n  static assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object. Returns the target object.\n   * @param target The target object to copy to.\n   * @param sources One or more source objects from which to copy properties\n   */\n  static assign(target: object, ...sources: any[]): any {\n    for (const source of sources) {\n      for (const prop of Object.getOwnPropertyNames(source)) {\n          (target as any)[prop] = source[prop];\n      }\n    }\n  }\n}","import { ObjectUtils } from \"../util/ObjectUtils\";\n\n/**\n * Thrown when query execution has failed.\n*/\nexport class QueryFailedError extends Error {\n\n    constructor(query: string, parameters: any[]|undefined, driverError: any) {\n        super();\n        Object.setPrototypeOf(this, QueryFailedError.prototype);\n        this.message = driverError.toString()\n            .replace(/^error: /, \"\")\n            .replace(/^Error: /, \"\")\n            .replace(/^Request/, \"\");\n        ObjectUtils.assign(this, {\n            ...driverError,\n            name: \"QueryFailedError\",\n            query: query,\n            parameters: parameters || []\n        });\n    }\n\n}","/**\n */\nexport class QueryRunnerAlreadyReleasedError extends Error {\n    name = \"QueryRunnerAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, QueryRunnerAlreadyReleasedError.prototype);\n        this.message = `Query runner already released. Cannot run queries anymore.`;\n    }\n\n}","/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nexport class TransactionAlreadyStartedError extends Error {\n    name = \"TransactionAlreadyStartedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, TransactionAlreadyStartedError.prototype);\n        this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;\n    }\n\n}","/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nexport class TransactionNotStartedError extends Error {\n    name = \"TransactionNotStartedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, TransactionNotStartedError.prototype);\n        this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;\n    }\n\n}","/**\n * This class stores query and its parameters\n */\nexport class Query {\n    constructor(public query: string, public parameters?: any[]) {\n\n    }\n}\n","import {Query} from \"./Query\";\n\n/**\n * This class stores up and down queries needed for migrations functionality.\n */\nexport class SqlInMemory {\n    upQueries: Query[] = [];\n    downQueries: Query[] = [];\n}\n","import {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {Query} from \"../driver/Query\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {View} from \"../schema-builder/view/View\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {Connection} from \"../connection/Connection\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {TableColumn} from \"../schema-builder/table/TableColumn\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\n\nexport abstract class BaseQueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    /**\n     * All synchronized tables in the database.\n     */\n    loadedTables: Table[] = [];\n\n    /**\n     * All synchronized views in the database.\n     */\n    loadedViews: View[] = [];\n\n    /**\n     * Broadcaster used on this query runner to broadcast entity events.\n     */\n    broadcaster: Broadcaster;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlInMemory: SqlInMemory = new SqlInMemory();\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: \"master\"|\"slave\";\n\n    // -------------------------------------------------------------------------\n    // Public Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes a given SQL query.\n     */\n    abstract query(query: string, parameters?: any[]): Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Protected Abstract Methods\n    // -------------------------------------------------------------------------\n\n    protected abstract async loadTables(tablePaths: string[]): Promise<Table[]>;\n\n    protected abstract async loadViews(tablePaths: string[]): Promise<View[]>;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath: string): Promise<Table|undefined> {\n        this.loadedTables = await this.loadTables([tablePath]);\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames: string[]): Promise<Table[]> {\n        this.loadedTables = await this.loadTables(tableNames);\n        return this.loadedTables;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath: string): Promise<View|undefined> {\n        this.loadedViews = await this.loadViews([viewPath]);\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths: string[]): Promise<View[]> {\n        this.loadedViews = await this.loadViews(viewPaths);\n        return this.loadedViews;\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): SqlInMemory {\n        return this.sqlInMemory;\n    }\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        await PromiseUtils.runInSequence(this.sqlInMemory.upQueries, upQuery => this.query(upQuery.query, upQuery.parameters));\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        await PromiseUtils.runInSequence(this.sqlInMemory.downQueries.reverse(), downQuery => this.query(downQuery.query, downQuery.parameters));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    protected async getCachedView(viewName: string): Promise<View> {\n        const view = this.loadedViews.find(view => view.name === viewName);\n        if (view) return view;\n\n        const foundViews = await this.loadViews([viewName]);\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0]);\n            return foundViews[0];\n        } else {\n            throw new Error(`View \"${viewName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    protected async getCachedTable(tableName: string): Promise<Table> {\n        const table = this.loadedTables.find(table => table.name === tableName);\n        if (table) return table;\n\n        const foundTables = await this.loadTables([tableName]);\n        if (foundTables.length > 0) {\n            this.loadedTables.push(foundTables[0]);\n            return foundTables[0];\n        } else {\n            throw new Error(`Table \"${tableName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\n        const foundTable = this.loadedTables.find(loadedTable => loadedTable.name === table.name);\n        if (foundTable) {\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n        }\n    }\n\n    protected getTypeormMetadataTableName(): string {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        return this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n    }\n\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    protected isColumnChanged(oldColumn: TableColumn, newColumn: TableColumn, checkDefault?: boolean, checkComment?: boolean): boolean {\n        // this logs need to debug issues in column change detection. Do not delete it!\n\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(oldColumn.enum !== newColumn.enum);\n        // console.log(oldColumn.enum, newColumn.enum);\n\n        return oldColumn.charset !== newColumn.charset\n            || oldColumn.collation !== newColumn.collation\n            || oldColumn.precision !== newColumn.precision\n            || oldColumn.scale !== newColumn.scale\n            || oldColumn.width !== newColumn.width // MySQL only\n            || oldColumn.zerofill !== newColumn.zerofill // MySQL only\n            || oldColumn.unsigned !== newColumn.unsigned // MySQL only\n            || oldColumn.asExpression !== newColumn.asExpression // MySQL only\n            || (checkDefault && oldColumn.default !== newColumn.default)\n            || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\n            || oldColumn.isNullable !== newColumn.isNullable\n            || (checkComment && oldColumn.comment !== newColumn.comment)\n            || oldColumn.enum !== newColumn.enum;\n    }\n\n    /**\n     * Checks if column length is by default.\n     */\n    protected isDefaultColumnLength(table: Table, column: TableColumn, length: string): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.length)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].length) {\n            return this.connection.driver.dataTypeDefaults[column.type].length!.toString() === length.toString();\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if column display width is by default. Used only for MySQL.\n     */\n    protected isDefaultColumnWidth(table: Table, column: TableColumn, width: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.width)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].width) {\n            return this.connection.driver.dataTypeDefaults[column.type].width === width;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if column precision is by default.\n     */\n    protected isDefaultColumnPrecision(table: Table, column: TableColumn, precision: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== null\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n\n        return false;\n    }\n\n    /**\n     * Checks if column scale is by default.\n     */\n    protected isDefaultColumnScale(table: Table, column: TableColumn, scale: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== null\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n\n        return false;\n    }\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async executeQueries(upQueries: Query|Query[], downQueries: Query|Query[]): Promise<void> {\n        if (upQueries instanceof Query)\n            upQueries = [upQueries];\n        if (downQueries instanceof Query)\n            downQueries = [downQueries];\n\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve() as Promise<any>;\n\n        await PromiseUtils.runInSequence(upQueries, upQuery => this.query(upQuery.query, upQuery.parameters));\n    }\n\n}\n","import {Connection, Driver, SelectQueryBuilder} from \"../..\";\nimport {EntityMetadata} from \"../..\";\nimport {ViewOptions} from \"../options/ViewOptions\";\n\n/**\n * View in the database represented in this class.\n */\nexport class View {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Contains database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    name: string;\n\n    /**\n     * View definition.\n     */\n    expression: string|((connection: Connection) => SelectQueryBuilder<any>);\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: ViewOptions) {\n        if (options) {\n            this.name = options.name;\n            this.expression = options.expression;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): View {\n        return new View(<ViewOptions> {\n            name: this.name,\n            expression: this.expression,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\n        const options: ViewOptions = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            expression: entityMetadata.expression!,\n        };\n\n        return new View(options);\n    }\n\n}\n","import {EntitySubscriberInterface} from \"./EntitySubscriberInterface\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {BroadcasterResult} from \"./BroadcasterResult\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nexport class Broadcaster {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeInsertEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral): void {\n\n        if (entity && metadata.beforeInsertListeners.length) {\n            metadata.beforeInsertListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeInsert) {\n                    const executionResult = subscriber.beforeInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeUpdateEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral, updatedColumns?: ColumnMetadata[], updatedRelations?: RelationMetadata[]): void { // todo: send relations too?\n        if (entity && metadata.beforeUpdateListeners.length) {\n            metadata.beforeUpdateListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeUpdate) {\n                    const executionResult = subscriber.beforeUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || []\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeRemoveEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral): void {\n        if (entity && metadata.beforeRemoveListeners.length) {\n            metadata.beforeRemoveListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeRemove) {\n                    const executionResult = subscriber.beforeRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity)\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterInsertEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral): void {\n\n        if (entity && metadata.afterInsertListeners.length) {\n            metadata.afterInsertListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterInsert) {\n                    const executionResult = subscriber.afterInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterUpdateEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral, updatedColumns?: ColumnMetadata[], updatedRelations?: RelationMetadata[]): void {\n\n        if (entity && metadata.afterUpdateListeners.length) {\n            metadata.afterUpdateListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterUpdate) {\n                    const executionResult = subscriber.afterUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || []\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterRemoveEvent(result: BroadcasterResult, metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral): void {\n\n        if (entity && metadata.afterRemoveListeners.length) {\n            metadata.afterRemoveListeners.forEach(listener => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(subscriber => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterRemove) {\n                    const executionResult = subscriber.afterRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity)\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastLoadEventsForAll(result: BroadcasterResult, metadata: EntityMetadata, entities: ObjectLiteral[]): void {\n        entities.forEach(entity => {\n            if (entity instanceof Promise) // todo: check why need this?\n                return;\n\n            // collect load events for all children entities that were loaded with the main entity\n            if (metadata.relations.length) {\n                metadata.relations.forEach(relation => {\n\n                    // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query\n                    if (relation.isLazy && !entity.hasOwnProperty(relation.propertyName))\n                        return;\n\n                    const value = relation.getEntityValue(entity);\n                    if (value instanceof Object)\n                        this.broadcastLoadEventsForAll(result, relation.inverseEntityMetadata, value instanceof Array ? value : [value]);\n                });\n            }\n\n            if (metadata.afterLoadListeners.length) {\n                metadata.afterLoadListeners.forEach(listener => {\n                    if (listener.isAllowed(entity)) {\n                        const executionResult = listener.execute(entity);\n                        if (executionResult instanceof Promise)\n                            result.promises.push(executionResult);\n                        result.count++;\n                    }\n                });\n            }\n\n            if (this.queryRunner.connection.subscribers.length) {\n                this.queryRunner.connection.subscribers.forEach(subscriber => {\n                    if (this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterLoad) {\n                        const executionResult = subscriber.afterLoad!(entity, {\n                            connection: this.queryRunner.connection,\n                            queryRunner: this.queryRunner,\n                            manager: this.queryRunner.manager,\n                            entity: entity,\n                            metadata: metadata\n                        });\n                        if (executionResult instanceof Promise)\n                            result.promises.push(executionResult);\n                        result.count++;\n                    }\n                });\n            }\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    protected isAllowedSubscriber(subscriber: EntitySubscriberInterface<any>, target: Function|string): boolean {\n        return  !subscriber.listenTo ||\n            !subscriber.listenTo() ||\n            subscriber.listenTo() === Object ||\n            subscriber.listenTo() === target ||\n            subscriber.listenTo().isPrototypeOf(target);\n    }\n\n}","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","import { ObjectLiteral } from \"../common/ObjectLiteral\";\n\nexport class OrmUtils {\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Chunks array into peaces.\n     */\n    static chunk<T>(array: T[], size: number): T[][] {\n        return Array.from(Array(Math.ceil(array.length / size)), (_, i) => {\n            return array.slice(i * size, i * size + size);\n        });\n    }\n\n    static splitClassesAndStrings<T>(clsesAndStrings: (string | T)[]): [T[], string[]] {\n        return [\n            (clsesAndStrings).filter((cls): cls is T => typeof cls !== \"string\"),\n            (clsesAndStrings).filter((str): str is string => typeof str === \"string\"),\n        ];\n    }\n\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\n        return array.reduce((groupedArray, value) => {\n            const key = propertyCallback(value);\n            let grouped = groupedArray.find(i => i.id === key);\n            if (!grouped) {\n                grouped = { id: key, items: [] };\n                groupedArray.push(grouped);\n            }\n            grouped.items.push(value);\n            return groupedArray;\n        }, [] as Array<{ id: R, items: T[] }>);\n    }\n\n    static uniq<T>(array: T[], criteria?: (item: T) => any): T[];\n    static uniq<T, K extends keyof T>(array: T[], property: K): T[];\n    static uniq<T, K extends keyof T>(array: T[], criteriaOrProperty?: ((item: T) => any) | K): T[] {\n        return array.reduce((uniqueArray, item) => {\n            let found: boolean = false;\n            if (criteriaOrProperty instanceof Function) {\n                const itemValue = criteriaOrProperty(item);\n                found = !!uniqueArray.find(uniqueItem => criteriaOrProperty(uniqueItem) === itemValue);\n\n            } else if (typeof criteriaOrProperty === \"string\") {\n                found = !!uniqueArray.find(uniqueItem => uniqueItem[criteriaOrProperty] === item[criteriaOrProperty]);\n\n            } else {\n                found = uniqueArray.indexOf(item) !== -1;\n            }\n\n            if (!found)\n                uniqueArray.push(item);\n\n            return uniqueArray;\n        }, [] as T[]);\n    }\n\n    static isObject(item: any) {\n        return (item && typeof item === \"object\" && !Array.isArray(item));\n    }\n\n    /**\n     * Deep Object.assign.\n     *\n     * @see http://stackoverflow.com/a/34749873\n     */\n    static mergeDeep(target: any, ...sources: any[]): any {\n        if (!sources.length) return target;\n        const source = sources.shift();\n\n        if (this.isObject(target) && this.isObject(source)) {\n            for (const key in source) {\n                let propertyKey = key;\n                if (source[key] instanceof Promise)\n                    continue;\n\n                // if (source[key] instanceof Promise) {\n                //     propertyKey = \"__\" + key + \"__\";\n                // }\n\n                if (this.isObject(source[propertyKey])\n                    && !(source[propertyKey] instanceof Map)\n                    && !(source[propertyKey] instanceof Set)\n                    && !(source[propertyKey] instanceof Date)\n                    && !(source[propertyKey] instanceof Buffer)) {\n                    if (!target[key]) Object.assign(target, { [key]: Object.create(Object.getPrototypeOf(source[propertyKey])) });\n                    this.mergeDeep(target[key], source[propertyKey]);\n                } else {\n                    Object.assign(target, { [key]: source[propertyKey] });\n                }\n            }\n        }\n\n        return this.mergeDeep(target, ...sources);\n    }\n\n    /**\n     * Deep compare objects.\n     *\n     * @see http://stackoverflow.com/a/1144249\n     */\n    static deepCompare(...args: any[]) {\n        let i: any, l: any, leftChain: any, rightChain: any;\n\n        if (arguments.length < 1) {\n            return true; // Die silently? Don't know how to handle such case, please help...\n            // throw \"Need two or more arguments to compare\";\n        }\n\n        for (i = 1, l = arguments.length; i < l; i++) {\n\n            leftChain = []; // Todo: this can be cached\n            rightChain = [];\n\n            if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Transforms given value into boolean value.\n     */\n    static toBoolean(value: any): boolean {\n        if (typeof value === \"boolean\")\n            return value;\n\n        if (typeof value === \"string\")\n            return value === \"true\" || value === \"1\";\n\n        if (typeof value === \"number\")\n            return value > 0;\n\n        return false;\n    }\n\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\n        return keys.reduce((object, column, index) => {\n            object[column] = values[index];\n            return object;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Compares two arrays.\n     */\n    static isArraysEqual(arr1: any[], arr2: any[]): boolean {\n        if (arr1.length !== arr2.length) return false;\n        return arr1.every(element => {\n            return arr2.indexOf(element) !== -1;\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private methods\n    // -------------------------------------------------------------------------\n\n    private static compare2Objects(leftChain: any, rightChain: any, x: any, y: any) {\n        let p;\n\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (isNaN(x) && isNaN(y) && typeof x === \"number\" && typeof y === \"number\")\n            return true;\n\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y)\n            return true;\n\n        // Unequal, but either is null or undefined (use case: jsonb comparasion)\n        // PR #3776, todo: add tests\n        if (x === null || y === null || x === undefined || y === undefined)\n          return false;\n\n        // Fix the buffer compare bug.\n        // See: https://github.com/typeorm/typeorm/issues/3654\n        if ((typeof x.equals === \"function\" || x.equals instanceof Function) && x.equals(y))\n            return true;\n\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if ((typeof x === \"function\" && typeof y === \"function\") ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (x instanceof String && y instanceof String) ||\n            (x instanceof Number && y instanceof Number))\n            return x.toString() === y.toString();\n\n        // At last checking prototypes as good as we can\n        if (!(x instanceof Object && y instanceof Object))\n            return false;\n\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x))\n            return false;\n\n        if (x.constructor !== y.constructor)\n            return false;\n\n        if (x.prototype !== y.prototype)\n            return false;\n\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\n            return false;\n\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n        }\n\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n\n            switch (typeof (x[p])) {\n                case \"object\":\n                case \"function\":\n\n                    leftChain.push(x);\n                    rightChain.push(y);\n\n                    if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {\n                        return false;\n                    }\n\n                    leftChain.pop();\n                    rightChain.pop();\n                    break;\n\n                default:\n                    if (x[p] !== y[p]) {\n                        return false;\n                    }\n                    break;\n            }\n        }\n\n        return true;\n    }\n\n}\n","/**\n * Sql server driver requires parameter types to be specified fo input parameters used in the query.\n *\n * @see https://github.com/patriksimek/node-mssql#data-types\n */\nexport class MssqlParameter {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    public params: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(value: any, type: \"bit\");\n    constructor(value: any, type: \"bigint\");\n    constructor(value: any, type: \"decimal\", precision?: number, scale?: number);\n    constructor(value: any, type: \"float\");\n    constructor(value: any, type: \"int\");\n    constructor(value: any, type: \"money\");\n    constructor(value: any, type: \"numeric\", precision?: number, scale?: number);\n    constructor(value: any, type: \"smallint\");\n    constructor(value: any, type: \"smallmoney\");\n    constructor(value: any, type: \"real\");\n    constructor(value: any, type: \"tinyint\");\n    constructor(value: any, type: \"char\", length?: number);\n    constructor(value: any, type: \"nchar\", length?: number);\n    constructor(value: any, type: \"text\");\n    constructor(value: any, type: \"ntext\");\n    constructor(value: any, type: \"varchar\", length?: number);\n    constructor(value: any, type: \"nvarchar\", length?: number);\n    constructor(value: any, type: \"xml\");\n    constructor(value: any, type: \"time\", scale?: number);\n    constructor(value: any, type: \"date\");\n    constructor(value: any, type: \"datetime\");\n    constructor(value: any, type: \"datetime2\", scale?: number);\n    constructor(value: any, type: \"datetimeoffset\", scale?: number);\n    constructor(value: any, type: \"smalldatetime\");\n    constructor(value: any, type: \"uniqueidentifier\");\n    constructor(value: any, type: \"variant\");\n    constructor(value: any, type: \"binary\");\n    constructor(value: any, type: \"varbinary\", length?: number);\n    constructor(value: any, type: \"image\");\n    constructor(value: any, type: \"udt\");\n    constructor(value: any, type: \"geography\");\n    constructor(value: any, type: \"geometry\");\n    constructor(value: any, type: \"rowversion\");\n    constructor(public value: any, public type: string, ...params: number[]) {\n        this.params = params || [];\n    }\n\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType, PromiseUtils} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: \"master\"|\"slave\" = \"master\") {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        return new Promise<void>(async (ok, fail) => {\n            this.isTransactionActive = true;\n\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            this.databaseConnection = pool.transaction();\n\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n                if (isolationLevel) {\n                    this.connection.logger.logQuery(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n                }\n            };\n\n            if (isolationLevel) {\n                this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);\n            } else {\n                this.databaseConnection.begin(transactionCallback);\n            }\n        });\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.commit((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n                this.connection.logger.logQuery(\"COMMIT\");\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.rollback((err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n                ok();\n                this.connection.logger.logQuery(\"ROLLBACK\");\n            });\n        });\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n                const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                if (parameters && parameters.length) {\n                    parameters.forEach((parameter, index) => {\n                        if (parameter instanceof MssqlParameter) {\n                            const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);\n                            if (mssqlParameter) {\n                                request.input(index, mssqlParameter, parameter.value);\n                            } else {\n                                request.input(index, parameter.value);\n                            }\n                        } else {\n                            request.input(index, parameter);\n                        }\n                    });\n                }\n                const queryStartTime = +new Date();\n                request.query(query, (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    const resolveChain = () => {\n                        if (promiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(promiseIndex, 1);\n                        if (waitingPromiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                        waitingOkay();\n                    };\n\n                    let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                    let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        resolveChain();\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n\n                    const queryType = query.slice(0, query.indexOf(\" \"));\n                    switch (queryType) {\n                        case \"DELETE\":\n                            // for DELETE query additionally return number of affected rows\n                            ok([result.recordset, result.rowsAffected[0]]);\n                            break;\n                        default:\n                            ok(result.recordset);\n                    }\n                    resolveChain();\n                });\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n            request.stream = true;\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    if (parameter instanceof MssqlParameter) {\n                        request.input(index, this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                    } else {\n                        request.input(index, parameter);\n                    }\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n            if (onEnd) request.on(\"done\", onEnd);\n            if (onError) request.on(\"error\", onError);\n            ok(request as ReadStream);\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"` : `SELECT * FROM \"sys\".\"schemas\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"name\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(`SELECT DB_ID('${database}') as \"db_id\"`);\n        const dbId = result[0][\"db_id\"];\n        return !!dbId;\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT SCHEMA_ID('${schema}') as \"schema_id\"`);\n        const schemaId = result[0][\"schema_id\"];\n        return !!schemaId;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"COLUMN_NAME\" = '${columnName}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"` : `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"` : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END` : `CREATE SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END` : `CREATE SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END` : `DROP SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END` : `DROP SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string|undefined = undefined;\n        let schemaName: string|undefined = undefined;\n        let oldTableName: string = oldTable.name;\n        const splittedName = oldTable.name.split(\".\");\n        if (splittedName.length === 3) {\n            dbName = splittedName[0];\n            oldTableName = splittedName[2];\n            if (splittedName[1] !== \"\")\n                schemaName = splittedName[1];\n\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0];\n            oldTableName = splittedName[1];\n        }\n\n        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase();\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n        }\n\n        // rename table\n        upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(oldTable, true)}\", \"${newTableName}\"`));\n        downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}\", \"${oldTableName}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // rename primary constraint\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, true)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n               name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n               columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await PromiseUtils.runInSequence(columns, column => this.addColumn(tableOrName, column));\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // we need database name and schema name to rename FK constraints\n                let dbName: string|undefined = undefined;\n                let schemaName: string|undefined = undefined;\n                const splittedName = table.name.split(\".\");\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0];\n                    if (splittedName[1] !== \"\")\n                        schemaName = splittedName[1];\n\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0];\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase();\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`));\n                    downQueries.push(new Query(`USE \"${currentDB}\"`));\n                }\n\n                // rename the column\n                upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${oldColumn.name}\", \"${newColumn.name}\"`));\n                downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${newColumn.name}\", \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // rename primary constraint\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${check.name}\", \"${newCheckName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newCheckName}\", \"${check.name}\"`));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n                });\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`));\n                    downQueries.push(new Query(`USE \"${dbName}\"`));\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, newColumn, true, false)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, oldColumn, true, false)}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${oldColumn.default} FOR \"${oldColumn.name}\"`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        await PromiseUtils.runInSequence(changedColumns, changedColumn => this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn));\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${column.default} FOR \"${column.name}\"`));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, false)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await PromiseUtils.runInSequence(columns, column => this.dropColumn(tableOrName, column));\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database);\n            if (!isDatabaseExist)\n                return Promise.resolve();\n        }\n\n        await this.startTransaction();\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`;\n            const allViewsResults: ObjectLiteral[] = await this.query(allViewsSql);\n\n            await Promise.all(allViewsResults.map(viewResult => {\n                // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            await Promise.all(allTablesResults.map(async tablesResult => {\n                // const tableName = database ? `\"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\"` : `\"sys\".\"foreign_keys\"`;\n                const dropForeignKeySql = `SELECT 'ALTER TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"' + OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\".\"' + OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\" ` +\n                    `DROP CONSTRAINT \"' + \"fk\".\"name\" + '\"' as \"query\" FROM \"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\" AS \"fk\" ` +\n                    `WHERE \"fk\".\"referenced_object_id\" = OBJECT_ID('\"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => this.query(dropQuery)));\n            }));\n            await Promise.all(allTablesResults.map(tablesResult => {\n                const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Return current database.\n     */\n    protected async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Return current schema.\n     */\n    protected async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT SCHEMA_NAME() AS \"schema_name\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    protected async loadViews(viewPaths: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        const dbNames = viewPaths\n            .filter(viewPath => viewPath.split(\".\").length === 3)\n            .map(viewPath => viewPath.split(\".\")[0]);\n\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        const viewsCondition = viewPaths.map(viewPath => {\n            const [schema, name] = extractTableSchemaAndName(viewPath);\n            return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = dbNames.map(dbName => {\n            return `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        }).join(\" UNION ALL \");\n\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const db = dbView[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbView[\"TABLE_CATALOG\"];\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const schemaNames: string[] = [];\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        tableNames.filter(tablePath => tablePath.indexOf(\".\") !== -1)\n            .forEach(tablePath => {\n                if (tablePath.split(\".\").length === 3) {\n                    if (tablePath.split(\".\")[1] !== \"\")\n                        schemaNames.push(tablePath.split(\".\")[1]);\n                } else {\n                    schemaNames.push(tablePath.split(\".\")[0]);\n                }\n            });\n        schemaNames.push(this.driver.options.schema || currentSchema);\n\n        const dbNames = tableNames\n            .filter(tablePath => tablePath.split(\".\").length === 3)\n            .map(tablePath => tablePath.split(\".\")[0]);\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        // load tables, columns, indices and foreign keys\n        const schemaNamesString = schemaNames.map(name => \"'\" + name + \"'\").join(\", \");\n\n        const tablesCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const tablesSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const columnsSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const constraintsCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"columnUsages\".\"TABLE_SCHEMA\" = '${schema}' AND \"columnUsages\".\"TABLE_NAME\" = '${name}' ` +\n             `AND \"tableConstraints\".\"TABLE_SCHEMA\" = '${schema}' AND \"tableConstraints\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = dbNames.map(dbName => {\n            return `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ON \"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `LEFT JOIN \"${dbName}\".\"sys\".\"check_constraints\" \"chk\" ON \"chk\".\"name\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `WHERE (${constraintsCondition}) AND \"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`;\n        }).join(\" UNION ALL \");\n\n        const foreignKeysSql = dbNames.map(dbName => {\n            return `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${dbName}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                `FROM \"${dbName}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\"`;\n        }).join(\" UNION ALL \");\n\n        const identityColumnsSql = dbNames.map(dbName => {\n            return `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                `WHERE COLUMNPROPERTY(object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), \"COLUMN_NAME\", 'IsIdentity') = 1 AND \"TABLE_SCHEMA\" IN (${schemaNamesString})`;\n        }).join(\" UNION ALL \");\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`;\n\n        const indicesSql = dbNames.map(dbName => {\n            return `SELECT '${dbName}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                `FROM \"${dbName}\".\"sys\".\"indexes\" \"ind\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                `WHERE \"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0`;\n        }).join(\" UNION ALL \");\n\n        const [\n            dbTables,\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return await Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            // We do not need to join schema and database names, when db or schema is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n            const schema = dbTable[\"TABLE_SCHEMA\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"TABLE_SCHEMA\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n            const defaultCollation = dbCollations.find(dbCollation => dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"])!;\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                            && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\");\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName\n                            && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                        const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                        if (length === \"-1\") {\n                            tableColumn.length = \"MAX\";\n                        } else {\n                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                        }\n                    }\n\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                        if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                        if (dbColumn[\"NUMERIC_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    }\n\n                    if (tableColumn.type === \"nvarchar\") {\n                        // Check if this is an enum\n                        const columnCheckConstraints = columnConstraints.filter(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"CHECK\");\n                        if (columnCheckConstraints.length) {\n                            const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                            for (const checkConstraint of columnCheckConstraints) {\n                                if (isEnumRegexp.test(checkConstraint[\"definition\"])) {\n                                    // This is an enum constraint, make column into an enum\n                                    tableColumn.type = \"simple-enum\";\n                                    tableColumn.enum = [];\n                                    const enumValueRegexp = new RegExp(\"\\\\[\" + tableColumn.name + \"\\\\]='([^']+)'\", \"g\");\n                                    let result;\n                                    while ((result = enumValueRegexp.exec(checkConstraint[\"definition\"])) !== null) {\n                                        tableColumn.enum.unshift(result[1]);\n                                    }\n                                    // Skip other column constraints\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                        ? this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\n                        : undefined;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                    tableColumn.isGenerated = isGenerated;\n                    if (isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n                    if (tableColumn.default === \"newsequentialid()\") {\n                        tableColumn.isGenerated = true;\n                        tableColumn.generationStrategy = \"uuid\";\n                        tableColumn.default = undefined;\n                    }\n\n                    // todo: unable to get default charset\n                    // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                    tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                    }\n\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"definition\"]\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"FK_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]);\n\n                // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                const db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                const schema = dbForeignKey[\"REF_SCHEMA\"] === currentSchema ? undefined : dbForeignKey[\"REF_SCHEMA\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"FK_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REF_COLUMN\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"), // SqlServer returns NO_ACTION, instead of NO ACTION\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"TABLE_CATALOG\"] === constraint[\"TABLE_CATALOG\"]\n                        && index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"IS_UNIQUE\"],\n                    where: constraint[\"CONDITION\"]\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column, false, true)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(view, currentSchema);\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", database: parsedTableName.database, schema: parsedTableName.schema, name: parsedTableName.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(viewOrPath, currentSchema);\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"database\")} = :database`, { database: parsedTableName.database })\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema: parsedTableName.schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: parsedTableName.name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let name = target instanceof Table || target instanceof View ? target.name : target;\n        if (this.driver.options.schema) {\n            if (name.indexOf(\".\") === -1) {\n                name = `${this.driver.options.schema}.${name}`;\n            } else if (name.split(\".\").length === 3) {\n                const splittedName = name.split(\".\");\n                const dbName = splittedName[0];\n                const tableName = splittedName[2];\n                name = `${dbName}.${this.driver.options.schema}.${tableName}`;\n            }\n        }\n\n        return name.split(\".\").map(i => {\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    protected parseTableName(target: Table|View|string, schema?: string) {\n        const tableName = (target instanceof Table || target instanceof View) ? target.name : target;\n        if (tableName.split(\".\").length === 3) {\n            return {\n                database: tableName.split(\".\")[0],\n                schema: tableName.split(\".\")[1] === \"\" ? schema || \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n                name: tableName.split(\".\")[2]\n            };\n        } else if (tableName.split(\".\").length === 2) {\n            return {\n                database: this.driver.database,\n                schema: tableName.split(\".\")[0],\n                name: tableName.split(\".\")[1]\n            };\n        } else {\n            return {\n                database: this.driver.database,\n                schema: this.driver.options.schema ? this.driver.options.schema : schema || \"SCHEMA_NAME()\",\n                name: tableName\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: any): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn, skipIdentity: boolean, createDefault: boolean) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(column)}`;\n\n        if (column.enum)\n            c += \" CHECK( \" + column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \") )\";\n\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n\n        if (column.default !== undefined && column.default !== null && createDefault) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`;\n        }\n\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`;\n        }\n        return c;\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit;\n            case \"bigint\":\n                return this.driver.mssql.BigInt;\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params);\n            case \"float\":\n                return this.driver.mssql.Float;\n            case \"int\":\n                return this.driver.mssql.Int;\n            case \"money\":\n                return this.driver.mssql.Money;\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params);\n            case \"smallint\":\n                return this.driver.mssql.SmallInt;\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney;\n            case \"real\":\n                return this.driver.mssql.Real;\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt;\n            case \"char\":\n                return this.driver.mssql.Char(...parameter.params);\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params);\n            case \"text\":\n                return this.driver.mssql.Text;\n            case \"ntext\":\n                return this.driver.mssql.Ntext;\n            case \"varchar\":\n                return this.driver.mssql.VarChar(...parameter.params);\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params);\n            case \"xml\":\n                return this.driver.mssql.Xml;\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params);\n            case \"date\":\n                return this.driver.mssql.Date;\n            case \"datetime\":\n                return this.driver.mssql.DateTime;\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params);\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params);\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime;\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier;\n            case \"variant\":\n                return this.driver.mssql.Variant;\n            case \"binary\":\n                return this.driver.mssql.Binary;\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params);\n            case \"image\":\n                return this.driver.mssql.Image;\n            case \"udt\":\n                return this.driver.mssql.UDT;\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion;\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED;\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ;\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE;\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED;\n        }\n    }\n\n}\n","import { ColumnMetadata } from \"../metadata/ColumnMetadata\";\n\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(mixedDate: Date|string|undefined): Date|string|undefined {\n        if (!mixedDate)\n            return mixedDate;\n\n        return typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: Date|any): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n\n        return value;\n    }\n\n    /**\n     * Converts given value into date object.\n     */\n    static mixedDateToDate(mixedDate: Date|string, toUtc: boolean = false, useMilliseconds = true): Date {\n        let date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n\n        if (toUtc)\n            date = new Date(\n                date.getUTCFullYear(),\n                date.getUTCMonth(),\n                date.getUTCDate(),\n                date.getUTCHours(),\n                date.getUTCMinutes(),\n                date.getUTCSeconds(),\n                date.getUTCMilliseconds()\n            );\n\n        if (!useMilliseconds)\n            date.setUTCMilliseconds(0);\n\n        return date;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(value: Date|any, skipSeconds: boolean = false): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getHours()) +\n                \":\" + this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds ? \":\" + this.formatZerolessValue(value.getSeconds()) : \"\");\n\n        return value;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToDate(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            const [hours, minutes, seconds] = value.split(\":\");\n            const date = new Date();\n            if (hours)\n                date.setHours(parseInt(hours));\n            if (minutes)\n                date.setMinutes(parseInt(minutes));\n            if (seconds)\n                date.setSeconds(parseInt(seconds));\n            return date;\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(value: string|any, skipSeconds: boolean = false): string|any {\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + (!skipSeconds ? \":\" + value.getSeconds() : \"\")) : value;\n        if (typeof value === \"string\") {\n            return value.split(\":\")\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getDate()) + \" \" +\n                this.formatZerolessValue(value.getHours()) + \":\" +\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\n                this.formatZerolessValue(value.getSeconds()) + \".\" +\n                this.formatMilliseconds(value.getMilliseconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) + \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[]|any): string[]|any {\n        if (value instanceof Array) {\n            return (value as any[])\n                .map(i => String(i))\n                .join(\",\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string|any): string|any {\n        if (value instanceof String || typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\");\n            } else {\n                return [];\n            }\n        }\n\n        return value;\n    }\n\n    static simpleJsonToString(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    static stringToSimpleJson(value: any) {\n        return typeof value === \"string\" ? JSON.parse(value) : value;\n    }\n\n    static simpleEnumToString(value: any) {\n        return \"\" + value;\n    }\n\n    static stringToSimpleEnum(value: any, columnMetadata: ColumnMetadata) {\n        if (\n            columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0\n        ) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number): string {\n        if (value < 10)\n            return \"0\" + value;\n\n        return String(value);\n    }\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatMilliseconds(value: number): string {\n        if (value < 10) {\n            return \"00\" + value;\n        } else if (value < 100) {\n            return \"0\" + value;\n        } else {\n            return String(value);\n        }\n    }\n\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n    \n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n    \n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n    \n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Query} from \"../Query\";\nimport {CockroachDriver} from \"./CockroachDriver\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {PromiseUtils} from \"../../\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {ColumnType} from \"../../index\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class CockroachQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: CockroachDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    /**\n     * Stores all executed queries to be able to run them again if transaction fails.\n     */\n    protected queries: { query: string, parameters?: any[] }[] = [];\n\n    /**\n     * Indicates if running queries must be stored\n     */\n    protected storeQueries: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CockroachDriver, mode: \"master\"|\"slave\" = \"master\") {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        if (this.releaseCallback)\n            this.releaseCallback();\n\n        const index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index);\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n        await this.query(\"SAVEPOINT cockroach_restart\");\n        if (isolationLevel) {\n            await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n        }\n        this.storeQueries = true;\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        this.storeQueries = false;\n\n        try {\n            await this.query(\"RELEASE SAVEPOINT cockroach_restart\");\n            await this.query(\"COMMIT\");\n            this.queries = [];\n            this.isTransactionActive = false;\n\n        } catch (e) {\n            if (e.code === \"40001\") {\n                await this.query(\"ROLLBACK TO SAVEPOINT cockroach_restart\");\n                await PromiseUtils.runInSequence(this.queries, q => this.query(q.query, q.parameters));\n                await this.commitTransaction();\n            }\n        }\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        this.storeQueries = false;\n        await this.query(\"ROLLBACK\");\n        this.queries = [];\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[], options?: {  }): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n\n                databaseConnection.query(query, parameters, (err: any, result: any) => {\n                    if (this.isTransactionActive && this.storeQueries)\n                        this.queries.push({ query, parameters });\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    if (err) {\n                        if (err.code !== \"40001\")\n                            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        fail(new QueryFailedError(query, parameters, err));\n                    } else {\n                        switch (result.command) {\n                            case \"DELETE\":\n                                // for DELETE query additionally return number of affected rows\n                                ok([result.rows, result.rowCount]);\n                                break;\n                            default:\n                                ok(result.rows);\n                        }\n                    }\n                });\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        const QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const stream = databaseConnection.query(new QueryStream(query, parameters));\n                if (onEnd) stream.on(\"end\", onEnd);\n                if (onError) stream.on(\"error\", onError);\n                ok(stream);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(`SELECT * FROM \"pg_database\" WHERE \"datname\" = '${database}'`);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName} AND \"column_name\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        const up = `CREATE DATABASE ${ifNotExist ? \"IF NOT EXISTS \" : \"\"} \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = `DROP DATABASE ${ifExist ? \"IF EXISTS \" : \"\"} \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"` : `CREATE SCHEMA \"${schema}\"`;\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        const up = ifExist ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}` : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n        const down = `CREATE SCHEMA \"${schema}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        table.columns\n            .filter(column => column.isGenerated && column.generationStrategy === \"increment\")\n            .forEach(column => {\n                upQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));\n                downQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));\n            });\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices\n                .filter(index => !index.isUnique)\n                .forEach(index => {\n\n                    // new index may be passed without name. In this case we generate index name manually.\n                    if (!index.name)\n                        index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                    upQueries.push(this.createIndexSql(table, index));\n                    downQueries.push(this.dropIndexSql(table, index));\n                });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(target: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const tableName = target instanceof Table ? target.name : target;\n        const table = await this.getCachedTable(tableName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // foreign keys must be dropped before indices, because fk's rely on indices\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        table.columns\n            .filter(column => column.isGenerated && column.generationStrategy === \"increment\")\n            .forEach(column => {\n                upQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));\n                downQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));\n            });\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO \"${newTableName}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO \"${oldTableName}\"`));\n\n        // rename column primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const schema = this.extractSchema(newTable);\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n            const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (column.generationStrategy === \"increment\") {\n            throw new Error(`Adding sequential generated columns into existing table is not supported`);\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            // CockroachDB stores unique indices as UNIQUE constraints\n            if (columnIndex.isUnique) {\n                const unique = new TableUnique({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, columnIndex.columnNames),\n                    columnNames: columnIndex.columnNames\n                });\n                upQueries.push(this.createUniqueConstraintSql(table, unique));\n                downQueries.push(this.dropIndexSql(table, unique));\n                clonedTable.uniques.push(unique);\n\n            } else {\n                upQueries.push(this.createIndexSql(table, columnIndex));\n                downQueries.push(this.dropIndexSql(table, columnIndex));\n            }\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\n            downQueries.push(this.dropIndexSql(table, uniqueConstraint.name!)); // CockroachDB creates indices for unique constraints\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await PromiseUtils.runInSequence(columns, column => this.addColumn(tableOrName, column));\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if (oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {\n            // To avoid data conversion, we just recreate column\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (oldColumn.name !== newColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const schema = this.extractSchema(table);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n                    const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n                if (newColumn.isNullable) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                } else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                }\n            }\n\n            if (oldColumn.comment !== newColumn.comment) {\n                upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" IS '${newColumn.comment}'`));\n                downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" IS '${oldColumn.comment}'`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\n                    // CockroachDB creates index for UNIQUE constraint.\n                    // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\n                    downQueries.push(this.dropIndexSql(table, uniqueConstraint));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    // CockroachDB creates index for UNIQUE constraint.\n                    // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\n                    upQueries.push(this.dropIndexSql(table, uniqueConstraint!));\n                    downQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint!));\n                }\n            }\n\n            if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") {\n                if (newColumn.isGenerated) {\n                    if (newColumn.generationStrategy === \"increment\") {\n                        throw new Error(`Adding sequential generated columns into existing table is not supported`);\n\n                    } else if (newColumn.generationStrategy === \"rowid\") {\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT unique_rowid()`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n\n                } else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT unique_rowid()`));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                }\n            }\n\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        await PromiseUtils.runInSequence(changedColumns, changedColumn => this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn));\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropIndexSql(table, columnUnique.name!)); // CockroachDB creates indices for unique constraints\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n\n        if (column.generationStrategy === \"increment\") {\n            upQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, column)}`));\n            downQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, column)}`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await PromiseUtils.runInSequence(columns, column => this.dropColumn(tableOrName, column));\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        // CockroachDB creates index for UNIQUE constraint.\n        // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\n        const down = this.dropIndexSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        await PromiseUtils.runInSequence(uniqueConstraints, uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        // CockroachDB creates index for UNIQUE constraint.\n        // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\n        const up = this.dropIndexSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        await PromiseUtils.runInSequence(uniqueConstraints, uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`CockroachDB does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        await PromiseUtils.runInSequence(foreignKeys, foreignKey => this.createForeignKey(tableOrName, foreignKey));\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        await PromiseUtils.runInSequence(foreignKeys, foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        // CockroachDB stores unique indices and UNIQUE constraints\n        if (index.isUnique) {\n            const unique = new TableUnique({\n                name: index.name,\n                columnNames: index.columnNames\n            });\n            const up = this.createUniqueConstraintSql(table, unique);\n            // CockroachDB also creates index for UNIQUE constraints.\n            // We can't drop UNIQUE constraint with DROP CONSTRAINT. We must use DROP INDEX ... CASCADE instead.\n            const down = this.dropIndexSql(table, unique);\n            await this.executeQueries(up, down);\n            table.addUniqueConstraint(unique);\n\n        } else {\n            const up = this.createIndexSql(table, index);\n            const down = this.dropIndexSql(table, index);\n            await this.executeQueries(up, down);\n            table.addIndex(index);\n        }\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        await PromiseUtils.runInSequence(indices, index => this.createIndex(tableOrName, index));\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        await PromiseUtils.runInSequence(indices, index => this.dropIndex(tableOrName, index));\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n        schemas.push(this.driver.options.schema || \"current_schema()\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n                `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString})`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || table_schema || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"information_schema\".\"tables\" WHERE \"table_schema\" IN (${schemaNamesString})`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n\n            const selectSequenceDropsQuery = `SELECT 'DROP SEQUENCE \"' || sequence_schema || '\".\"' || sequence_name || '\";' as \"query\" FROM \"information_schema\".\"sequences\" WHERE \"sequence_schema\" IN (${schemaNamesString})`;\n            const sequenceDropQueries: ObjectLiteral[] = await this.query(selectSequenceDropsQuery);\n            await Promise.all(sequenceDropQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n\n        const viewsCondition = viewNames.map(viewName => {\n            let [schema, name] = viewName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".*, \"v\".\"check_option\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n            `INNER JOIN \"information_schema\".\"views\" \"v\" ON \"v\".\"table_schema\" = \"t\".\"schema\" AND \"v\".\"table_name\" = \"t\".\"name\" WHERE \"t\".\"type\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n\n        const tablesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"table_schema\" = '${schema}' AND \"table_name\" = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT * FROM \"information_schema\".\"tables\" WHERE ` + tablesCondition;\n        const columnsSql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"is_hidden\" = 'NO' AND ` + tablesCondition;\n\n        const constraintsCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"t\".\"relname\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", ` +\n            `CASE \"cnst\".\"contype\" WHEN 'x' THEN pg_get_constraintdef(\"cnst\".\"oid\", true) ELSE \"cnst\".\"consrc\" END AS \"expression\", ` +\n            `CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" ` +\n            `FROM \"pg_constraint\" \"cnst\" ` +\n            `INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" ` +\n            `LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") ` +\n            `WHERE \"t\".\"relkind\" = 'r' AND (${constraintsCondition})`;\n\n        const indicesSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\n            `\"types\".\"typname\" AS \"type_name\" ` +\n            `FROM \"pg_class\" \"t\" ` +\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\n            `WHERE \"t\".\"relkind\" = 'r' AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`;\n\n        const foreignKeysCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"cl\".\"relname\" = '${name}')`;\n        }).join(\" OR \");\n        const foreignKeysSql = `SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", ` +\n            `\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", \"con\".\"confupdtype\" AS \"on_update\" ` +\n            `FROM ( ` +\n            `SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", \"cl\".\"relname\", ` +\n            `CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", ` +\n            `CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" ` +\n            `FROM \"pg_class\" \"cl\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" ` +\n            `WHERE \"con1\".\"contype\" = 'f' AND (${foreignKeysCondition}) ` +\n            `) \"con\" ` +\n            `INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" ` +\n            `INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"`;\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            // We do not need to join schema name, when database is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const schema = dbTable[\"table_schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"table_schema\"];\n            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n            const tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName)\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"column_name\"];\n\n                    tableColumn.type = dbColumn[\"crdb_sql_type\"].toLowerCase();\n                    if (dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") !== -1) {\n                        tableColumn.collation = dbColumn[\"crdb_sql_type\"].substr(dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") + \"COLLATE\".length + 1, dbColumn[\"crdb_sql_type\"].length);\n                        tableColumn.type = tableColumn.type.substr(0, dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") - 1);\n                    }\n\n                    if (tableColumn.type.indexOf(\"(\") !== -1)\n                        tableColumn.type = tableColumn.type.substr(0, tableColumn.type.indexOf(\"(\"));\n\n                    if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\") {\n                        if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                            tableColumn.precision = parseInt(dbColumn[\"numeric_precision\"]);\n                        } else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                            tableColumn.scale = parseInt(dbColumn[\"numeric_scale\"]);\n                        } else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                        tableColumn.isArray = true;\n                        const type = dbColumn[\"crdb_sql_type\"].replace(\"[]\", \"\").toLowerCase();\n                        tableColumn.type = this.connection.driver.normalizeType({type: type});\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"character_maximum_length\"]) {\n                        const length = dbColumn[\"character_maximum_length\"].toString();\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                    }\n                    tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"PRIMARY\");\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                            && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                            && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"])\n                        : false;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                    if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                        if (dbColumn[\"column_default\"] === \"unique_rowid()\") {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"rowid\";\n\n                        } else if (dbColumn[\"column_default\"].indexOf(\"nextval\") !== -1) {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"increment\";\n\n                        } else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\") {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"uuid\";\n\n                        } else {\n                            tableColumn.default = dbColumn[\"column_default\"].replace(/:::.*/, \"\");\n                        }\n                    }\n\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n\n                    return tableColumn;\n                }));\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableUnique({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: uniques.map(u => u[\"column_name\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableCheck({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: checks.map(c => c[\"column_name\"]),\n                    expression: constraint[\"expression\"] // column names are not escaped, may cause problems\n                });\n            });\n\n            // find exclusion constraints of table, group them by constraint name and build TableExclusion.\n            const tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"EXCLUDE\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.exclusions = tableExclusionConstraints.map(constraint => {\n                return new TableExclusion({\n                    name: constraint[\"constraint_name\"],\n                    expression: constraint[\"expression\"].substring(8) // trim EXCLUDE from start of expression\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"table_name\"], dbForeignKey[\"table_schema\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"constraint_name\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"constraint_name\"] === dbForeignKey[\"constraint_name\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = dbForeignKey[\"referenced_table_schema\"] === currentSchema ? undefined : dbTable[\"referenced_table_schema\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"constraint_name\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"column_name\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"referenced_column_name\"]),\n                    onDelete: dbForeignKey[\"on_delete\"],\n                    onUpdate: dbForeignKey[\"on_update\"]\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"table_name\"], dbIndex[\"table_schema\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"constraint_name\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => index[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"constraint_name\"],\n                    columnNames: indices.map(i => i[\"column_name\"]),\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                    where: constraint[\"condition\"],\n                    isSpatial: indices.every(i => this.driver.spatialTypes.indexOf(i[\"type_name\"]) >= 0),\n                    isFulltext: false\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        table.indices\n            .filter(index => index.isUnique)\n            .forEach(index => {\n                table.uniques.push(new TableUnique({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, index.columnNames),\n                    columnNames: index.columnNames\n                }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Extracts schema name from given Table object or table name string.\n     */\n    protected extractSchema(target: Table|string): string|undefined {\n        const tableName = target instanceof Table ? target.name : target;\n        return tableName.indexOf(\".\") === -1 ? this.driver.options.schema : tableName.split(\".\")[0];\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrPath: Table|string): Query {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const splittedName = viewName.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = viewName;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     * UNIQUE indices creates as UNIQUE constraints.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|TableUnique|string): Query {\n        let indexName = (indexOrName instanceof TableIndex || indexOrName instanceof TableUnique) ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX ${this.escapePath(table)}@\"${indexName}\" CASCADE`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique|TableIndex): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Builds sequence name from given table and column.\n     */\n    protected buildSequenceName(table: Table, columnOrName: TableColumn|string, disableEscape?: true): string {\n        const columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\n        return disableEscape ? `${table.name}_${columnName}_seq` : `\"${table.name}_${columnName}_seq\"`;\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\n\n        return tableName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    /**\n     * Returns object with table schema and table name.\n     */\n    protected parseTableName(target: Table|string) {\n        const tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema()\",\n                tableName: `'${tableName}'`\n            };\n        } else {\n            return {\n                schema: `'${tableName.split(\".\")[0]}'`,\n                tableName: `'${tableName.split(\".\")[1]}'`\n            };\n        }\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn) {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n\n        if (column.isGenerated) {\n            if (column.generationStrategy === \"increment\") {\n                c += ` INT DEFAULT nextval('${this.buildSequenceName(table, column)}')`;\n\n            } else if (column.generationStrategy === \"rowid\") {\n                c += \" INT DEFAULT unique_rowid()\";\n\n            } else if (column.generationStrategy === \"uuid\") {\n                c += \" UUID DEFAULT gen_random_uuid()\";\n            }\n        }\n        if (!column.isGenerated)\n            c += \" \" + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\n        if (column.collation)\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\n        if (!column.isNullable)\n            c += \" NOT NULL\";\n        if (!column.isGenerated && column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n\n        return c;\n    }\n\n}\n","import { ValueTransformer } from \"../decorator/options/ValueTransformer\";\n\nexport class ApplyValueTransformers {\n    static transformFrom(transformer: ValueTransformer | ValueTransformer[], databaseValue: any) {\n        if (Array.isArray(transformer)) {\n            const reverseTransformers = transformer.slice().reverse();\n            return reverseTransformers.reduce((transformedValue, _transformer) => {\n                return _transformer.from(transformedValue);\n            }, databaseValue);\n        }\n        return transformer.from(databaseValue);\n    }\n    static transformTo(transformer: ValueTransformer | ValueTransformer[], entityValue: any) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce((transformedValue, _transformer) => {\n                return _transformer.to(transformedValue);\n            }, entityValue);\n        }\n        return transformer.to(entityValue);\n    }\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {CockroachConnectionCredentialsOptions} from \"./CockroachConnectionCredentialsOptions\";\nimport {CockroachConnectionOptions} from \"./CockroachConnectionOptions\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {CockroachQueryRunner} from \"./CockroachQueryRunner\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\n/**\n * Organizes communication with Cockroach DBMS.\n */\nexport class CockroachDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Cockroach underlying library.\n     */\n    postgres: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    /**\n     * We store all created query runners because we need to release them.\n     */\n    connectedQueryRunners: QueryRunner[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: CockroachConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.cockroachlabs.com/docs/stable/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"array\",\n        \"bool\",\n        \"boolean\",\n        \"bytes\",\n        \"bytea\",\n        \"blob\",\n        \"date\",\n        \"numeric\",\n        \"decimal\",\n        \"dec\",\n        \"float\",\n        \"float4\",\n        \"float8\",\n        \"double precision\",\n        \"real\",\n        \"inet\",\n        \"int\",\n        \"int4\",\n        \"integer\",\n        \"int2\",\n        \"int8\",\n        \"int64\",\n        \"smallint\",\n        \"bigint\",\n        \"interval\",\n        \"string\",\n        \"character varying\",\n        \"character\",\n        \"char\",\n        \"char varying\",\n        \"varchar\",\n        \"text\",\n        \"time\",\n        \"time without time zone\",\n        \"timestamp\",\n        \"timestamptz\",\n        \"timestamp without time zone\",\n        \"timestamp with time zone\",\n        \"json\",\n        \"jsonb\",\n        \"uuid\",\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"character varying\",\n        \"char varying\",\n        \"varchar\",\n        \"character\",\n        \"char\",\n        \"string\",\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"numeric\",\n        \"decimal\",\n        \"dec\",\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"numeric\",\n        \"decimal\",\n        \"dec\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamptz\",\n        createDateDefault: \"now()\",\n        updateDate: \"timestamptz\",\n        updateDateDefault: \"now()\",\n        version: Number,\n        treeLevel: Number,\n        migrationId: Number,\n        migrationName: \"varchar\",\n        migrationTimestamp: \"int8\",\n        cacheId: Number,\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"int8\",\n        cacheDuration: Number,\n        cacheQuery: \"string\",\n        cacheResult: \"string\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"string\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n    };\n\n    /**\n     * No documentation specifying a maximum length for identifiers could be found\n     * for CockroarchDb.\n     */\n    maxAliasLength?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as CockroachConnectionOptions;\n        this.isReplicated = this.options.replication ? true : false;\n\n        // load postgres package\n        this.loadDependencies();\n\n        // ObjectUtils.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n\n        if (this.options.replication) {\n            this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {\n                return this.createPool(this.options, slave);\n            }));\n            this.master = await this.createPool(this.options, this.options.replication.master);\n            this.database = this.options.replication.master.database;\n\n        } else {\n            this.master = await this.createPool(this.options, this.options);\n            this.database = this.options.database;\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"cockroachdb\"));\n\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map(slave => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\n        return new CockroachQueryRunner(this, mode);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamptz\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if ([\"json\", \"jsonb\", ...this.spatialTypes].indexOf(columnMetadata.type) >= 0) {\n            return JSON.stringify(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        // unique_rowid() generates bigint value and should not be converted to number\n        if ((columnMetadata.type === Number && !columnMetadata.isArray) || columnMetadata.generationStrategy === \"increment\") {\n            value = parseInt(value);\n\n        } else if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamptz\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const builtParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else {\n                builtParameters.push(value);\n                return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        return schema ? `${schema}.${tableName}` : tableName;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number, isArray?: boolean, isGenerated?: boolean, generationStrategy?: \"increment\"|\"uuid\"|\"rowid\" }): string {\n        if (column.type === Number || column.type === \"integer\" || column.type === \"int\" || column.type === \"bigint\" || column.type === \"int64\") {\n            return \"int8\";\n\n        } else if (column.type === String || column.type === \"character varying\" || column.type === \"char varying\") {\n            return \"varchar\";\n\n        } else if (column.type === Date || column.type === \"timestamp without time zone\") {\n            return \"timestamp\";\n\n        } else if (column.type === \"timestamp with time zone\") {\n            return \"timestamptz\";\n\n        } else if (column.type === \"time without time zone\") {\n            return \"time\";\n\n        } else if (column.type === Boolean || column.type === \"boolean\") {\n            return \"bool\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\" || column.type === \"text\") {\n            return \"string\";\n\n        } else if (column.type === \"bytea\" || column.type === \"blob\") {\n            return \"bytes\";\n\n        } else if (column.type === \"smallint\") {\n            return \"int2\";\n\n        } else if (column.type === \"numeric\" || column.type === \"dec\") {\n            return \"decimal\";\n\n        } else if (column.type === \"double precision\" || column.type === \"float\") {\n            return \"float8\";\n\n        } else if (column.type === \"real\") {\n            return \"float4\";\n\n        } else if (column.type === \"character\") {\n            return \"char\";\n\n        } else if (column.type === \"json\") {\n            return \"jsonb\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n        const arrayCast = columnMetadata.isArray ? `::${columnMetadata.type}[]` : \"\";\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'${arrayCast}`;\n\n        } else if (defaultValue === null) {\n            return `null`;\n\n        } else if (typeof defaultValue === \"object\") {\n            return `'${JSON.stringify(defaultValue)}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata): string {\n        return column.length ? column.length.toString() : \"\";\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type +=  \"(\" + column.precision + \")\";\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise((ok, fail) => {\n            this.master.connect((err: any, connection: any, release: any) => {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n\n        return new Promise((ok, fail) => {\n            const random = Math.floor(Math.random() * this.slaves.length);\n            this.slaves[random].connect((err: any, connection: any, release: any) => {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     *\n     * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult)\n            return undefined;\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));\n            }\n            return map;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log(\"==========================================\");\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || (!tableColumn.isGenerated && this.lowerDefaultValueIfNecessary(this.normalizeDefault(columnMetadata)) !== tableColumn.default) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || tableColumn.isGenerated !== columnMetadata.isGenerated;\n        });\n    }\n\n    private lowerDefaultValueIfNecessary(value: string | undefined) {\n        if (!value) {\n            return value;\n        }\n        return value.split(`'`).map((v, i) => {\n            return i % 2 === 1 ? v : v.toLowerCase();\n        }).join(`'`);\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"$\" + (index + 1);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads postgres query stream package.\n     */\n    loadStreamDependency() {\n        try {\n            return PlatformTools.load(\"pg-query-stream\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new Error(`To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.`);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.postgres = PlatformTools.load(\"pg\");\n            try {\n                const pgNative = PlatformTools.load(\"pg-native\");\n                if (pgNative && this.postgres.native) this.postgres = this.postgres.native;\n\n            } catch (e) { }\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected async createPool(options: CockroachConnectionOptions, credentials: CockroachConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign(credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign({}, {\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: credentials.ssl\n        }, options.extra || {});\n\n        // create a connection pool\n        const pool = new this.postgres.Pool(connectionOptions);\n        const { logger } = this.connection;\n        /*\n          Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n          cause the hosting app to crash.\n         */\n        pool.on(\"error\", (error: any) => logger.log(\"warn\", `Postgres pool raised an error. ${error}`));\n\n        return new Promise((ok, fail) => {\n            pool.connect((err: any, connection: any, release: Function) => {\n                if (err) return fail(err);\n                release();\n                ok(pool);\n            });\n        });\n    }\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        await Promise.all(this.connectedQueryRunners.map(queryRunner => queryRunner.release()));\n        return new Promise<void>((ok, fail) => {\n            pool.end((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return new Promise((ok, fail) => {\n            connection.query(query, (err: any, result: any) => {\n                if (err) return fail(err);\n                ok(result);\n            });\n        });\n    }\n\n}\n","/**\n * Dummy driver classes for replacement via `package.json` in browser builds.\n * Using those classes reduces the build size by one third.\n *\n * If we don't include those dummy classes (and just disable the driver import\n * with `false` in `package.json`) typeorm will throw an error on runtime,\n * even if those driver are not used.\n */\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoQueryRunner {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoEntityManager {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoRepository {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class PostgresDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SqlServerDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MysqlDriver {}\n\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class OracleDriver {}\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {Table} from \"./table/Table\";\nimport {TableColumn} from \"./table/TableColumn\";\nimport {TableForeignKey} from \"./table/TableForeignKey\";\nimport {TableIndex} from \"./table/TableIndex\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {TableUtils} from \"./util/TableUtils\";\nimport {TableColumnOptions} from \"./options/TableColumnOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {TableUnique} from \"./table/TableUnique\";\nimport {TableCheck} from \"./table/TableCheck\";\nimport {TableExclusion} from \"./table/TableExclusion\";\nimport {View} from \"./view/View\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = this.connection.createQueryRunner(\"master\");\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        if (!(this.connection.driver instanceof CockroachDriver))\n            await this.queryRunner.startTransaction();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            if (!(this.connection.driver instanceof CockroachDriver))\n                await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                if (!(this.connection.driver instanceof CockroachDriver))\n                    await this.queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<SqlInMemory> {\n        this.queryRunner = this.connection.createQueryRunner(\"master\");\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache) // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\");\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get viewEntityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.tableType === \"view\");\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldViews();\n        await this.dropOldForeignKeys();\n        await this.dropOldIndices();\n        await this.dropOldChecks();\n        await this.dropOldExclusions();\n        await this.dropCompositeUniqueConstraints();\n        // await this.renameTables();\n        await this.renameColumns();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n        await this.createNewExclusions();\n        await this.createCompositeUniqueConstraints();\n        await this.createForeignKeys();\n        await this.createViews();\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {\n                const metadataFK = metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === tableForeignKey.name);\n                return !metadataFK\n                    || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)\n                    || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);\n            });\n            if (tableForeignKeysToDrop.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\n        });\n    }\n\n    /**\n     * Rename tables\n     */\n    protected async renameTables(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            // const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n\n        });\n    }\n\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    protected async renameColumns(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            if (metadata.columns.length !== table.columns.length)\n                return;\n\n            const renamedMetadataColumns = metadata.columns.filter(column => {\n                return !table.columns.find(tableColumn => {\n                    return tableColumn.name === column.databaseName\n                        && tableColumn.type === this.connection.driver.normalizeType(column)\n                        && tableColumn.isNullable === column.isNullable\n                        && tableColumn.isUnique === this.connection.driver.normalizeIsUnique(column);\n                });\n            });\n\n            if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                return;\n\n            const renamedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(column => {\n                    return column.databaseName === tableColumn.name\n                        && this.connection.driver.normalizeType(column) === tableColumn.type\n                        && column.isNullable === tableColumn.isNullable\n                        && this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                });\n            });\n\n            if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                return;\n\n            const renamedColumn = renamedTableColumns[0].clone();\n            renamedColumn.name = renamedMetadataColumns[0].databaseName;\n\n            this.connection.logger.logSchemaBuild(`renaming column \"${renamedTableColumns[0].name}\" in to \"${renamedColumn.name}\"`);\n            await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);\n        });\n    }\n\n    protected async dropOldIndices(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const dropQueries = table.indices\n                .filter(tableIndex => {\n                    const indexMetadata = metadata.indices.find(index => index.name === tableIndex.name);\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false)\n                            return false;\n\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true;\n\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true;\n\n                        if (indexMetadata.isFulltext !== tableIndex.isFulltext)\n                            return true;\n\n                        if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                            return true;\n\n                        return !indexMetadata.columns.every(column => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                    }\n\n                    return true;\n                })\n                .map(async tableIndex => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from table ${table.name}`);\n                    await this.queryRunner.dropIndex(table, tableIndex);\n                });\n\n            await Promise.all(dropQueries);\n        });\n    }\n\n    protected async dropOldChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver)\n            return;\n\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const oldChecks = table.checks.filter(tableCheck => {\n                return !metadata.checks.find(checkMetadata => checkMetadata.name === tableCheck.name);\n            });\n\n            if (oldChecks.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks.map(check => `\"${check.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropCheckConstraints(table, oldChecks);\n        });\n    }\n\n    protected async dropCompositeUniqueConstraints(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const compositeUniques = table.uniques.filter(tableUnique => {\n                return tableUnique.columnNames.length > 1 && !metadata.uniques.find(uniqueMetadata => uniqueMetadata.name === tableUnique.name);\n            });\n\n            if (compositeUniques.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropUniqueConstraints(table, compositeUniques);\n        });\n    }\n\n    protected async dropOldExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const oldExclusions = table.exclusions.filter(tableExclusion => {\n                return !metadata.exclusions.find(exclusionMetadata => exclusionMetadata.name === tableExclusion.name);\n            });\n\n            if (oldExclusions.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropExclusionConstraints(table, oldExclusions);\n        });\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find(table => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullTableName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                return table.name === fullTableName;\n            });\n            if (existTable)\n                return;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tablePath}`);\n\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver);\n            await this.queryRunner.createTable(table, false, false);\n            this.queryRunner.loadedTables.push(table);\n        });\n    }\n\n    protected async createViews(): Promise<void> {\n        await PromiseUtils.runInSequence(this.viewEntityToSyncMetadatas, async metadata => {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find(view => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n            if (existView)\n                return;\n\n            this.connection.logger.logSchemaBuild(`creating a new view: ${metadata.tablePath}`);\n\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver);\n            await this.queryRunner.createView(view);\n            this.queryRunner.loadedViews.push(view);\n        });\n    }\n\n    protected async dropOldViews(): Promise<void> {\n        await PromiseUtils.runInSequence(this.queryRunner.loadedViews, async view => {\n            const existViewMetadata = this.viewEntityToSyncMetadatas.find(metadata => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n\n            if (existViewMetadata)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);\n\n            // drop an old view\n            await this.queryRunner.dropView(view);\n            this.queryRunner.loadedViews.splice(this.queryRunner.loadedViews.indexOf(view), 1);\n        });\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected async dropRemovedColumns(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table) return;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\n            });\n            if (droppedTableColumns.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(\", \"));\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\n        });\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected async addNewColumns(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                return;\n\n            // create columns in the database\n            const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n            const newTableColumns = newTableColumnOptions.map(option => new TableColumn(option));\n\n            if (newTableColumns.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.addColumns(table, newTableColumns);\n        });\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    protected async updatePrimaryKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const primaryMetadataColumns = metadata.columns.filter(column => column.isPrimary);\n            const primaryTableColumns = table.columns.filter(column => column.isPrimary);\n            if (primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1) {\n                const changedPrimaryColumns = primaryMetadataColumns.map(primaryMetadataColumn => {\n                    return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));\n                });\n                await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);\n            }\n        });\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected async updateExistColumns(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n            if (changedColumns.length === 0)\n                return;\n\n            // drop all foreign keys that point to this column\n            await PromiseUtils.runInSequence(changedColumns, changedColumn => this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName));\n\n            // drop all composite indices related to this column\n            await PromiseUtils.runInSequence(changedColumns, changedColumn => this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName));\n\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (!(this.connection.driver instanceof MysqlDriver)) {\n                await PromiseUtils.runInSequence(changedColumns, changedColumn => this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName));\n            }\n\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map(changedColumn => {\n                const oldTableColumn = table.columns.find(column => column.name === changedColumn.databaseName)!;\n                const newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);\n                const newTableColumn = new TableColumn(newTableColumnOptions);\n\n                return {\n                    oldColumn: oldTableColumn,\n                    newColumn: newTableColumn\n                };\n            });\n\n            if (newAndOldTableColumns.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`columns changed in \"${table.name}\". updating: ` + changedColumns.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns);\n        });\n    }\n\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    protected async createNewIndices(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const newIndices = metadata.indices\n                .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map(indexMetadata => TableIndex.create(indexMetadata));\n\n            if (newIndices.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createIndices(table, newIndices);\n        });\n    }\n\n    protected async createNewChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver)\n            return;\n\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const newChecks = metadata.checks\n                .filter(checkMetadata => !table.checks.find(tableCheck => tableCheck.name === checkMetadata.name))\n                .map(checkMetadata => TableCheck.create(checkMetadata));\n\n            if (newChecks.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createCheckConstraints(table, newChecks);\n        });\n    }\n\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    protected async createCompositeUniqueConstraints(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const compositeUniques = metadata.uniques\n                .filter(uniqueMetadata => uniqueMetadata.columns.length > 1 && !table.uniques.find(tableUnique => tableUnique.name === uniqueMetadata.name))\n                .map(uniqueMetadata => TableUnique.create(uniqueMetadata));\n\n            if (compositeUniques.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createUniqueConstraints(table, compositeUniques);\n        });\n    }\n\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    protected async createNewExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const newExclusions = metadata.exclusions\n            .filter(exclusionMetadata => !table.exclusions.find(tableExclusion => tableExclusion.name === exclusionMetadata.name))\n            .map(exclusionMetadata => TableExclusion.create(exclusionMetadata));\n\n            if (newExclusions.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createExclusionConstraints(table, newExclusions);\n        });\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected async createForeignKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                return;\n\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\n                return !table.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\n            });\n            if (newKeys.length === 0)\n                return;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")} on table \"${table.name}\"`);\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\n        });\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const tablesWithFK: Table[] = [];\n        const columnForeignKey = table.foreignKeys.find(foreignKey => foreignKey.columnNames.indexOf(columnName) !== -1);\n        if (columnForeignKey) {\n            const clonedTable = table.clone();\n            clonedTable.foreignKeys = [columnForeignKey];\n            tablesWithFK.push(clonedTable);\n            table.removeForeignKey(columnForeignKey);\n        }\n\n        this.queryRunner.loadedTables.forEach(loadedTable => {\n            const dependForeignKeys = loadedTable.foreignKeys.filter(foreignKey => {\n                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n            });\n\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach(dependForeignKey => loadedTable.removeForeignKey(dependForeignKey));\n            }\n        });\n\n        if (tablesWithFK.length > 0) {\n            await PromiseUtils.runInSequence(tablesWithFK, tableWithFK => {\n                this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys.map(foreignKey => foreignKey.name).join(\", \")}`);\n                return this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n            });\n        }\n    }\n\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    protected async dropColumnCompositeIndices(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedIndices = table.indices.filter(index => index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1);\n        if (relatedIndices.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices.map(index => index.name).join(\", \")}`);\n        await this.queryRunner.dropIndices(table, relatedIndices);\n    }\n\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    protected async dropColumnCompositeUniques(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedUniques = table.uniques.filter(unique => unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1);\n        if (relatedUniques.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques.map(unique => unique.name).join(\", \")}`);\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques);\n    }\n\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    protected metadataColumnsToTableColumnOptions(columns: ColumnMetadata[]): TableColumnOptions[] {\n        return columns.map(columnMetadata => TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));\n    }\n\n    /**\n     * Creates typeorm service table for storing user defined Views.\n     */\n    protected async createTypeormMetadataTable() {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n\n        await this.queryRunner.createTable(new Table(\n            {\n                name: typeormMetadataTable,\n                columns: [\n                    {\n                        name: \"type\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataType}),\n                        isNullable: false\n                    },\n                    {\n                        name: \"database\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataDatabase}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"schema\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataSchema}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"table\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataTable}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataName}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"value\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataValue}),\n                        isNullable: true\n                    },\n                ]\n            },\n        ), true);\n    }\n\n}\n","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {SqlServerConnectionOptions} from \"./SqlServerConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {SqlServerConnectionCredentialsOptions} from \"./SqlServerConnectionCredentialsOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\n/**\n * Organizes communication with SQL Server DBMS.\n */\nexport class SqlServerDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * SQL Server library.\n     */\n    mssql: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SqlServerConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"bigint\",\n        \"bit\",\n        \"decimal\",\n        \"money\",\n        \"numeric\",\n        \"smallint\",\n        \"smallmoney\",\n        \"tinyint\",\n        \"float\",\n        \"real\",\n        \"date\",\n        \"datetime2\",\n        \"datetime\",\n        \"datetimeoffset\",\n        \"smalldatetime\",\n        \"time\",\n        \"char\",\n        \"varchar\",\n        \"text\",\n        \"nchar\",\n        \"nvarchar\",\n        \"ntext\",\n        \"binary\",\n        \"image\",\n        \"varbinary\",\n        \"hierarchyid\",\n        \"sql_variant\",\n        \"timestamp\",\n        \"uniqueidentifier\",\n        \"xml\",\n        \"geometry\",\n        \"geography\",\n        \"rowversion\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"geometry\",\n        \"geography\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"varchar\",\n        \"nchar\",\n        \"nvarchar\",\n        \"binary\",\n        \"varbinary\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"numeric\",\n        \"time\",\n        \"datetime2\",\n        \"datetimeoffset\"\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"numeric\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime2\",\n        createDateDefault: \"getdate()\",\n        updateDate: \"datetime2\",\n        updateDateDefault: \"getdate()\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"nvarchar(MAX)\" as any,\n        cacheResult: \"nvarchar(MAX)\" as any,\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"nvarchar(MAX)\" as any,\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n        \"nchar\": { length: 1 },\n        \"varchar\": { length: 255 },\n        \"nvarchar\": { length: 255 },\n        \"binary\": { length: 1 },\n        \"varbinary\": { length: 1 },\n        \"decimal\": { precision: 18, scale: 0 },\n        \"numeric\": { precision: 18, scale: 0 },\n        \"time\": { precision: 7 },\n        \"datetime2\": { precision: 7 },\n        \"datetimeoffset\": { precision: 7 }\n    };\n\n    /**\n     * Max length allowed by MSSQL Server for aliases (identifiers).\n     * @see https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server\n     */\n    maxAliasLength = 128;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SqlServerConnectionOptions;\n        this.isReplicated = this.options.replication ? true : false;\n\n        // load mssql package\n        this.loadDependencies();\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n            // throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n\n        if (this.options.replication) {\n            this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {\n                return this.createPool(this.options, slave);\n            }));\n            this.master = await this.createPool(this.options, this.options.replication.master);\n            this.database = this.options.replication.master.database;\n\n        } else {\n            this.master = await this.createPool(this.options, this.options);\n            this.database = this.options.database;\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\n\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map(slave => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\n        return new SqlServerQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    escapedParameters.push(v);\n                    return \"@\" + (escapedParameters.length - 1);\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"@\" + (escapedParameters.length - 1);\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        let fullName = tableName;\n        if (schema)\n            fullName = schema + \".\" + tableName;\n        if (database) {\n            if (!schema) {\n                fullName = database + \"..\" + tableName;\n            } else {\n                fullName = database + \".\" + fullName;\n            }\n        }\n\n        return fullName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToDate(value);\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === \"smalldatetime\"\n            || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value, false, false);\n\n        } else if (columnMetadata.type === \"datetime2\"\n            || columnMetadata.type === \"datetimeoffset\") {\n            return DateUtils.mixedDateToDate(value, false, true);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"datetime2\"\n            || columnMetadata.type === \"smalldatetime\"\n            || columnMetadata.type === \"datetimeoffset\") {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n\n        } else if (column.type === String) {\n            return \"nvarchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if (column.type === Boolean) {\n            return \"bit\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"binary\";\n\n        } else if (column.type === \"uuid\") {\n            return \"uniqueidentifier\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"ntext\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\";\n\n        } else if (column.type === \"dec\") {\n            return \"decimal\";\n\n        } else if (column.type === \"double precision\") {\n            return \"float\";\n\n        } else if (column.type === \"rowversion\") {\n            return \"timestamp\";  // the rowversion type's name in SQL server metadata is timestamp\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return /*\"(\" + */defaultValue()/* + \")\"*/;\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        if (column.type === \"varchar\" || column.type === \"nvarchar\" || column.type === String)\n            return \"255\";\n\n        return \"\";\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type +=  `(${column.precision})`;\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve(this.master);\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n\n        const random = Math.floor(Math.random() * this.slaves.length);\n        return Promise.resolve(this.slaves[random]);\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult)\n            return undefined;\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));\n            }\n            return map;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            return  tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                || (!tableColumn.isGenerated && this.lowerDefaultValueIfNessesary(this.normalizeDefault(columnMetadata)) !== this.lowerDefaultValueIfNessesary(tableColumn.default)) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || tableColumn.isGenerated !== columnMetadata.isGenerated;\n        });\n    }\n    private lowerDefaultValueIfNessesary(value: string | undefined) {\n        // SqlServer saves function calls in default value as lowercase #2733\n        if (!value) {\n            return value;\n        }\n        return value.split(`'`).map((v, i) => {\n            return i % 2 === 1 ? v : v.toLowerCase();\n        }).join(`'`);\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        if (this.options.options && this.options.options.disableOutputReturning) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"@\" + index;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps given value into MssqlParameter based on its column definition.\n     */\n    parametrizeValue(column: ColumnMetadata, value: any) {\n\n        // if its already MssqlParameter then simply return it\n        if (value instanceof MssqlParameter)\n            return value;\n\n        const normalizedType = this.normalizeType({ type: column.type });\n        if (column.length) {\n            return new MssqlParameter(value, normalizedType as any, column.length as any);\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            return new MssqlParameter(value, normalizedType as any, column.precision, column.scale);\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            return new MssqlParameter(value, normalizedType as any, column.precision);\n\n        } else if (column.scale !== null && column.scale !== undefined) {\n            return new MssqlParameter(value, normalizedType as any, column.scale);\n        }\n\n        return new MssqlParameter(value, normalizedType as any);\n    }\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps all values of the given object into MssqlParameter based on their column definitions in the given table.\n     */\n    parametrizeMap(tablePath: string, map: ObjectLiteral): ObjectLiteral {\n\n        // find metadata for the given table\n        if (!this.connection.hasMetadata(tablePath)) // if no metadata found then we can't proceed because we don't have columns and their types\n            return map;\n        const metadata = this.connection.getMetadata(tablePath);\n\n        return Object.keys(map).reduce((newMap, key) => {\n            const value = map[key];\n\n            // find column metadata\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (!column) // if we didn't find a column then we can't proceed because we don't have a column type\n                return value;\n\n            newMap[key] = this.parametrizeValue(column, value);\n            return newMap;\n        }, {} as ObjectLiteral);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mssql = PlatformTools.load(\"mssql\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createPool(options: SqlServerConnectionOptions, credentials: SqlServerConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign(credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign({}, {\n            connectionTimeout: this.options.connectionTimeout,\n            requestTimeout: this.options.requestTimeout,\n            stream: this.options.stream,\n            pool: this.options.pool,\n            options: this.options.options,\n        }, {\n            server: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            domain: credentials.domain,\n        }, options.extra || {});\n\n        // set default useUTC option if it hasn't been set\n        if (!connectionOptions.options) connectionOptions.options = { useUTC: false };\n        else if (!connectionOptions.options.useUTC) connectionOptions.options.useUTC = false;\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const pool = new this.mssql.ConnectionPool(connectionOptions);\n\n            const { logger } = this.connection;\n            /*\n              Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n              cause the hosting app to crash.\n             */\n            pool.on(\"error\", (error: any) => logger.log(\"warn\", `MSSQL pool raised an error. ${error}`));\n\n            const connection = pool.connect((err: any) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n    }\n\n}\n","import {Table} from \"../schema-builder/table/Table\";\nimport {Connection} from \"../connection/Connection\";\nimport {Migration} from \"./Migration\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if migrations must be executed in a transaction.\n     */\n    transaction: boolean = true;\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private readonly migrationsTable: string;\n    private readonly migrationsTableName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner?: QueryRunner) {\n\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        let hasUnappliedMigrations = false;\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        for (const migration of allMigrations) {\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n\n            if (executedMigration) {\n                this.connection.logger.logSchemaBuild(` [X] ${migration.name}`);\n            } else {\n                hasUnappliedMigrations = true;\n                this.connection.logger.logSchemaBuild(` [ ] ${migration.name}`);\n            }\n        }\n\n        // if query runner was created by us then release it\n        if (!this.queryRunner) {\n            await queryRunner.release();\n        }\n\n        return hasUnappliedMigrations;\n    }\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<Migration[]> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // variable to store all migrations we did successefuly\n        const successMigrations: Migration[] = [];\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n            return [];\n        }\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\n                return migration.instance!.up(queryRunner)\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\n                        return this.insertExecutedMigration(queryRunner, migration);\n                    })\n                    .then(() => { // informative log about migration success\n                        successMigrations.push(migration);\n                        this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been executed successfully.`);\n                    });\n            });\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n        return successMigrations;\n\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(`No migrations was found in the database. Nothing to revert!`);\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(queryRunner);\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\n            this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been reverted successfully.`);\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(queryRunner: QueryRunner): Promise<void> {\n        // If driver is mongo no need to create\n        if (this.connection.driver instanceof MongoDriver) {\n            return;\n        }\n        const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(new Table(\n                {\n                    name: this.migrationsTable,\n                    columns: [\n                        {\n                            name: \"id\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationId}),\n                            isGenerated: true,\n                            generationStrategy: \"increment\",\n                            isPrimary: true,\n                            isNullable: false\n                        },\n                        {\n                            name: \"timestamp\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationTimestamp}),\n                            isPrimary: false,\n                            isNullable: false\n                        },\n                        {\n                            name: \"name\",\n                            type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.migrationName}),\n                            isNullable: false\n                        },\n                    ]\n                },\n            ));\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    protected async loadExecutedMigrations(queryRunner: QueryRunner): Promise<Migration[]> {\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            return await mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).find().toArray();\n        } else {\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.migrationsTable, this.migrationsTableName)\n            .getRawMany();\n            return migrationsRaw.map(migrationRaw => {\n                return new Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n            });\n        }\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map(migration => {\n            const migrationClassName = (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(`${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`);\n\n            return new Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestTimestampMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Finds the latest migration (sorts by id) in the given array of migrations.\n     */\n    protected getLatestExecutedMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => ((a.id || 0) - (b.id || 0)) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n        const values: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            values[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\n            values[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\n        } else {\n            values[\"timestamp\"] = migration.timestamp;\n            values[\"name\"] = migration.name;\n        }\n        if (this.connection.driver instanceof MongoDriver) {  \n            const mongoRunner = queryRunner as MongoQueryRunner;\n            mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).insert(values);               \n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb.insert()\n                .into(this.migrationsTable)\n                .values(values)\n                .execute();\n        }\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n\n        const conditions: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            conditions[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any);\n            conditions[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any);\n        } else {\n            conditions[\"timestamp\"] = migration.timestamp;\n            conditions[\"name\"] = migration.name;\n        }\n\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            mongoRunner.databaseConnection.db(this.connection.driver.database!).collection(this.migrationsTableName).deleteOne(conditions);               \n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb.delete()\n                .from(this.migrationsTable)\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\n                .andWhere(`${qb.escape(\"name\")} = :name`)\n                .setParameters(conditions)\n                .execute();\n        }\n\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\n\n/**\n */\nexport class MissingPrimaryColumnError extends Error {\n    name = \"MissingPrimaryColumnError\";\n\n    constructor(entityMetadata: EntityMetadata) {\n        super();\n        Object.setPrototypeOf(this, MissingPrimaryColumnError.prototype);\n        this.message = `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;\n    }\n\n}","/**\n * Thrown when circular relations detected with nullable set to false.\n */\nexport class CircularRelationsError extends Error {\n    name = \"CircularRelationsError\";\n\n    constructor(path: string) {\n        super();\n        Object.setPrototypeOf(this, CircularRelationsError.prototype);\n        this.message = `Circular relations detected: ${path}. To resolve this issue you need to set nullable: false somewhere in this dependency structure.`;\n    }\n\n}","/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n\n/**\n * A simple dependency graph\n */\n\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\n    let currentPath: any[] = [];\n    let visited: any = {};\n    return function DFS(currentNode: any) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node: any) {\n            if (!visited[node]) {\n                DFS(node);\n            } else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\n\n\nexport class DepGraph {\n    nodes: any = {};\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\n    incomingEdges: any = {}; // Node -> [Dependant Node]\n\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    addNode(node: any, data?: any) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            } else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    }\n\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    removeNode(node: any) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key: any) {\n                    let idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    }\n\n    /**\n     * Check if a node exists in the graph\n     */\n    hasNode(node: any) {\n        return this.nodes.hasOwnProperty(node);\n    }\n\n    /**\n     * Get the data associated with a node name\n     */\n    getNodeData(node: any) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    setNodeData(node: any, data: any) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    addDependency(from: any, to: any) {\n        if (!this.hasNode(from)) {\n            throw new Error(`Node does not exist: ${from}`);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(`Node does not exist: ${to}`);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    }\n\n    /**\n     * Remove a dependency between two nodes.\n     */\n    removeDependency(from: any, to: any) {\n        let idx: any;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    }\n\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    dependenciesOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    dependantsOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    overallOrder(leavesOnly?: any) {\n        let self = this;\n        let result: any[] = [];\n        let keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        } else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n: any) {\n                CycleDFS(n);\n            });\n\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS(n);\n            });\n\n            return result;\n        }\n    }\n\n}","import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\nexport class DataTypeNotSupportedError extends Error {\n    name = \"DataTypeNotSupportedError\";\n\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\n        super();\n        Object.setPrototypeOf(this, DataTypeNotSupportedError.prototype);\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n\n}","/**\n * Thrown when some option is not set in the connection options.\n */\nexport class NoConnectionOptionError extends Error {\n\n    constructor(optionName: string) {\n        super();\n        Object.setPrototypeOf(this, NoConnectionOptionError.prototype);\n        this.message = `Option \"${optionName}\" is not set in your connection options, please define \"${optionName}\" option in your connection options or ormconfig.json`;\n    }\n\n}","import {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Thrown when relation has array initialized which is forbidden my ORM.\n *\n * @see https://github.com/typeorm/typeorm/issues/1319\n * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers\n */\nexport class InitializedRelationError extends Error {\n\n    constructor(relation: RelationMetadata) {\n        super();\n        Object.setPrototypeOf(this, InitializedRelationError.prototype);\n        this.message = `Array initializations are not allowed in entity relations. ` +\n                        `Please remove array initialization (= []) from \"${relation.entityMetadata.targetName}#${relation.propertyPath}\". ` +\n                        `This is ORM requirement to make relations to work properly. Refer docs for more information.`;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {MissingPrimaryColumnError} from \"../error/MissingPrimaryColumnError\";\nimport {CircularRelationsError} from \"../error/CircularRelationsError\";\nimport {DepGraph} from \"../util/DepGraph\";\nimport {Driver} from \"../driver/Driver\";\nimport {DataTypeNotSupportedError} from \"../error/DataTypeNotSupportedError\";\nimport {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {NoConnectionOptionError} from \"../error/NoConnectionOptionError\";\nimport {InitializedRelationError} from \"../error/InitializedRelationError\";\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[], driver: Driver) {\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas, driver));\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[], driver: Driver) {\n\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);\n\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(`Entity ${entityMetadata.name} has empty discriminator value. Discriminator value should not be empty.`);\n\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.`);\n        }\n\n        entityMetadata.relationCounts.forEach(relationCount => {\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\n                throw new Error(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n        });\n\n        if (!(driver instanceof MongoDriver)) {\n            entityMetadata.columns.forEach(column => {\n                const normalizedColumn = driver.normalizeType(column) as ColumnType;\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)\n                    throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new Error(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);\n            });\n        }\n\n        if (driver instanceof MysqlDriver) {\n            const generatedColumns = entityMetadata.columns.filter(column => column.isGenerated && column.generationStrategy !== \"uuid\");\n            if (generatedColumns.length > 1)\n                throw new Error(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);\n        }\n\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (driver instanceof MysqlDriver) {\n            const metadatasWithDatabase = allEntityMetadatas.filter(metadata => metadata.database);\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\");\n        }\n\n        if (driver instanceof SqlServerDriver) {\n            const charsetColumns = entityMetadata.columns.filter(column => column.charset);\n            if (charsetColumns.length > 1)\n                throw new Error(`Character set specifying is not supported in Sql Server`);\n        }\n\n        // check if relations are all without initialized properties\n        const entityInstance = entityMetadata.create();\n        entityMetadata.relations.forEach(relation => {\n            if (relation.isManyToMany || relation.isOneToMany) {\n\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n\n                // get entity relation value and check if its an array\n                const relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (relationInitializedValue instanceof Array)\n                    throw new InitializedRelationError(relation);\n            }\n        });\n\n        // validate relations\n        entityMetadata.relations.forEach(relation => {\n\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n\n\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n\n\n        });\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(relation => {\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation!.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation!.entityMetadata.name}#${relation.inverseRelation!.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n\n        entityMetadata.eagerRelations.forEach(relation => {\n\n        });\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n\n        const graph = new DepGraph();\n        entityMetadatas.forEach(entityMetadata => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.relationsWithJoinColumns\n                .filter(relation => !relation.isNullable)\n                .forEach(relation => {\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n                });\n        });\n        try {\n            graph.overallOrder();\n\n        } catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    protected validateEagerRelations(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.eagerRelations.forEach(relation => {\n                if (relation.inverseRelation && relation.inverseRelation.isEager)\n                    throw new Error(`Circular eager relations are disallowed. ` +\n                        `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` +\n                        `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` +\n                        ` Remove \"eager: true\" from one side of the relation.`);\n            });\n        });\n    }\n\n}","/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nexport class QueryRunnerProviderAlreadyReleasedError extends Error {\n    name = \"QueryRunnerProviderAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, QueryRunnerProviderAlreadyReleasedError.prototype);\n        this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;\n    }\n\n}","import {ObjectType} from \"../common/ObjectType\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends Error {\n    name = \"EntityNotFound\";\n\n    constructor(entityClass: ObjectType<any>|EntitySchema<any>|string, criteria: any) {\n        super();\n        Object.setPrototypeOf(this, EntityNotFoundError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        const criteriaString = this.stringifyCriteria(criteria);\n        this.message = `Could not find any entity of type \"${targetName}\" matching: ${criteriaString}`;\n    }\n\n    private stringifyCriteria(criteria: any): string {\n        try {\n            return JSON.stringify(criteria, null, 4);\n        } catch (e) { }\n        return \"\" + criteria;\n    }\n\n}\n","/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nexport class NoNeedToReleaseEntityManagerError extends Error {\n    name = \"NoNeedToReleaseEntityManagerError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, NoNeedToReleaseEntityManagerError.prototype);\n        this.message = `Entity manager is not using single database connection and cannot be released. ` +\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\n            `methods have a single database connection and they should be released.`;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {FindConditions} from \"../find-options/FindConditions\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(this.metadata.target as any, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        return this.manager.create<any>(this.metadata.target as any, plainEntityLikeOrPlainEntityLikes as any);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n        return this.manager.merge(this.metadata.target as any, mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.save<T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\n        return this.manager.remove(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n        return this.manager.update(this.metadata.target as any, criteria as any, partialEntity);\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(conditions?: FindConditions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target as any, ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target as any, optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target as any, optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target);\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(conditions: FindConditions<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(conditions: FindConditions<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    }\n\n}\n","import {Driver} from \"../Driver\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport abstract class AbstractSqliteDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Sqlite has a single QueryRunner because it works on a single database connection.\n     */\n    queryRunner?: QueryRunner;\n\n    /**\n     * Real database connection with sqlite database.\n     */\n    databaseConnection: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: BaseConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n     * @see https://sqlite.org/datatype3.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"unsigned big int\",\n        \"int2\",\n        \"int8\",\n        \"integer\",\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"clob\",\n        \"text\",\n        \"blob\",\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"boolean\",\n        \"date\",\n        \"time\",\n        \"datetime\"\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"blob\",\n        \"clob\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"datetime('now')\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"datetime('now')\",\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults;\n\n    /**\n     * No documentation specifying a maximum length for identifiers could be found\n     * for SQLite.\n     */\n    maxAliasLength?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as BaseConnectionOptions;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Abstract\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    abstract createQueryRunner(mode: \"master\"|\"slave\"): QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"boolean\") {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\");\n                }\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {\n                    value += \"Z\";\n                }\n            }\n\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if ( columnMetadata.type === \"simple-enum\" ) {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const builtParameters: any[] = Object.keys(nativeParameters).map(key => {\n            // Mapping boolean values to their numeric representation\n            if (typeof nativeParameters[key] === \"boolean\") {\n                return nativeParameters[key] === true ? 1 : 0;\n            }\n\n            return nativeParameters[key];\n        });\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"?\";\n                    // return \"$\" + builtParameters.length;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else {\n                builtParameters.push(value);\n                return \"?\";\n                // return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return tableName;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n\n        } else if (column.type === String) {\n            return \"varchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if (column.type === Boolean) {\n            return \"boolean\";\n\n        } else if (column.type === \"uuid\") {\n            return \"varchar\";\n\n        } else if (column.type === \"simple-array\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-json\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"varchar\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata): string {\n        return column.length ? column.length.toString() : \"\";\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type +=  \"(\" + column.precision + \")\";\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value: any;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\n                value = insertResult;\n            // } else if (generatedColumn.generationStrategy === \"uuid\") {\n            //     value = insertValue[generatedColumn.databaseName];\n            }\n\n            if (!value) return map;\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log(\"==========================================\");\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                //  || tableColumn.comment !== columnMetadata.comment || // todo\n                || this.normalizeDefault(columnMetadata) !== tableColumn.default\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        // return \"$\" + (index + 1);\n        return \"?\";\n        // return \"$\" + parameterName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        throw new Error(\"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        // dependencies have to be loaded in the specific driver\n    }\n\n}\n","import {Repository} from \"./Repository\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\n\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository<Entity> extends Repository<Entity> {\n\n    // todo: implement moving\n    // todo: implement removing\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(): Promise<Entity[]> {\n        const roots = await this.findRoots();\n        await Promise.all(roots.map(root => this.findDescendantsTree(root)));\n        return roots;\n    }\n\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(): Promise<Entity[]> {\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n        const parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(\n          this.metadata.treeParentRelation!.propertyName, \"id\"\n        );\n\n        return this.createQueryBuilder(\"treeEntity\")\n            .where(`${escapeAlias(\"treeEntity\")}.${escapeColumn(parentPropertyName)} IS NULL`)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(entity: Entity): Promise<Entity[]> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findDescendantsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity: Entity): Promise<number> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n        if (this.metadata.treeType === \"closure-table\") {\n\n            const joinCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = \" + escape(alias) + \".\" + escape(column.referencedColumn!.propertyPath);\n            }).join(\" AND \");\n\n            const parameters: ObjectLiteral = {};\n            const whereCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = :\" + column.referencedColumn!.propertyName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters);\n\n        } else if (this.metadata.treeType === \"nested-set\") {\n\n            const whereCondition = alias + \".\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\n                \"joined.\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" AND joined.\" + this.metadata.nestedSetRightColumn!.propertyPath;\n            const parameters: ObjectLiteral = {};\n            const joinCondition = this.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n                const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\n                return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", whereCondition)\n                .where(joinCondition, parameters);\n\n        } else if (this.metadata.treeType === \"materialized-path\") {\n            return this\n                .createQueryBuilder(alias)\n                .where(qb => {\n                    const subQuery = qb.subQuery()\n                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn!.propertyPath}`, \"path\")\n                        .from(this.metadata.target, this.metadata.targetName)\n                        .whereInIds(this.metadata.getEntityIdMap(entity));\n\n                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                    if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                        return `${alias}.${this.metadata.materializedPathColumn!.propertyPath} LIKE ${subQuery.getQuery()} || '%'`;\n                    } else {\n                        return `${alias}.${this.metadata.materializedPathColumn!.propertyPath} LIKE CONCAT(${subQuery.getQuery()}, '%')`;\n                    }\n                });\n        }\n\n        throw new Error(`Supported only in tree entities`);\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(entity: Entity): Promise<Entity[]> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findAncestorsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity: Entity): Promise<number> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n        if (this.metadata.treeType === \"closure-table\") {\n            const joinCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                return closureTableAlias + \".\" + column.propertyPath + \" = \" + alias + \".\" + column.referencedColumn!.propertyPath;\n            }).join(\" AND \");\n\n            const parameters: ObjectLiteral = {};\n            const whereCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {\n                parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\n                return closureTableAlias + \".\" + column.propertyPath + \" = :\" + column.referencedColumn!.propertyName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters);\n\n        } else if (this.metadata.treeType === \"nested-set\") {\n\n            const joinCondition = \"joined.\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\n                alias + \".\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" AND \" + alias + \".\" + this.metadata.nestedSetRightColumn!.propertyPath;\n            const parameters: ObjectLiteral = {};\n            const whereCondition = this.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n                const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\n                return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\n            }).join(\" AND \");\n\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", joinCondition)\n                .where(whereCondition, parameters);\n\n\n        } else if (this.metadata.treeType === \"materialized-path\") {\n            // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\n            return this\n                .createQueryBuilder(alias)\n                .where(qb => {\n                    const subQuery = qb.subQuery()\n                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn!.propertyPath}`, \"path\")\n                        .from(this.metadata.target, this.metadata.targetName)\n                        .whereInIds(this.metadata.getEntityIdMap(entity));\n\n                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                    if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                        return `${subQuery.getQuery()} LIKE ${alias}.${this.metadata.materializedPathColumn!.propertyPath} || '%'`;\n\n                    } else {\n                        return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${this.metadata.materializedPathColumn!.propertyPath}, '%')`;\n                    }\n                });\n        }\n\n        throw new Error(`Supported only in tree entities`);\n    }\n\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\n        return rawResults.map(rawResult => {\n            const joinColumn = this.metadata.treeParentRelation!.joinColumns[0];\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n            const id = rawResult[alias + \"_\" + this.metadata.primaryColumns[0].databaseName];\n            const parentId = rawResult[alias + \"_\" + joinColumnName];\n            return {\n                id: this.manager.connection.driver.prepareHydratedValue(id, this.metadata.primaryColumns[0]),\n                parentId: this.manager.connection.driver.prepareHydratedValue(parentId, joinColumn),\n            };\n        });\n    }\n\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const childProperty = this.metadata.treeChildrenRelation!.propertyName;\n        const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(entity.id) !== -1);\n        entity[childProperty].forEach((childEntity: any) => {\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\n        });\n    }\n\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const parentProperty = this.metadata.treeParentRelation!.propertyName;\n        const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n        const parentEntity = entities.find(entity => {\n            if (!parentRelationMap)\n                return false;\n\n            return entity[this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\n        }\n    }\n\n}\n","/**\n * Thrown when relations specified in the find options were not found in the entities.\n*/\nexport class FindRelationsNotFoundError extends Error {\n\n    constructor(notFoundRelations: string[]) {\n        super();\n        Object.setPrototypeOf(this, FindRelationsNotFoundError.prototype);\n        if (notFoundRelations.length === 1) {\n            this.message = `Relation \"${notFoundRelations[0]}\" was not found, please check if it is correct and really exist in your entity.`;\n        } else {\n            this.message = `Relations ${notFoundRelations.map(relation => `\"${relation}\"`).join(\", \")} were not found, please check if relations are correct and they exist in your entities.`;\n        }\n    }\n\n}","import {FindManyOptions} from \"./FindManyOptions\";\nimport {FindOneOptions} from \"./FindOneOptions\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {FindRelationsNotFoundError} from \"../error/FindRelationsNotFoundError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {shorten} from \"../util/StringUtils\";\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions(obj: any): obj is FindOneOptions<any> {\n        const possibleOptions: FindOneOptions<any> = obj;\n        return possibleOptions &&\n                (\n                    possibleOptions.select instanceof Array ||\n                    possibleOptions.where instanceof Object ||\n                    typeof possibleOptions.where === \"string\" ||\n                    possibleOptions.relations instanceof Array ||\n                    possibleOptions.join instanceof Object ||\n                    possibleOptions.order instanceof Object ||\n                    possibleOptions.cache instanceof Object ||\n                    typeof possibleOptions.cache === \"boolean\" ||\n                    typeof possibleOptions.cache === \"number\" ||\n                    possibleOptions.lock instanceof Object ||\n                    possibleOptions.loadRelationIds instanceof Object ||\n                    typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                    typeof possibleOptions.loadEagerRelations === \"boolean\"\n                );\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions(obj: any): obj is FindManyOptions<any> {\n        const possibleOptions: FindManyOptions<any> = obj;\n        return possibleOptions && (\n            this.isFindOneOptions(possibleOptions) ||\n            typeof (possibleOptions as FindManyOptions<any>).skip === \"number\" ||\n            typeof (possibleOptions as FindManyOptions<any>).take === \"number\" ||\n            typeof (possibleOptions as FindManyOptions<any>).skip === \"string\" ||\n            typeof (possibleOptions as FindManyOptions<any>).take === \"string\"\n        );\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string|undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n\n        return undefined;\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n     */\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }\n\n    /**\n     * Applies give find options to the given query builder.\n     */\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.findColumnWithPropertyPath(String(select)))\n                    throw new Error(`${select} column was not found in the ${metadata.name} entity.`);\n\n                qb.addSelect(qb.alias + \".\" + select);\n            });\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        if (options.relations) {\n            const allRelations = options.relations.map(relation => relation);\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version as any);\n            } else if (options.lock.mode === \"pessimistic_read\" || options.lock.mode === \"pessimistic_write\" || options.lock.mode === \"dirty_read\") {\n                qb.setLock(options.lock.mode);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        return qb;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    protected static applyRelationsRecursively(qb: SelectQueryBuilder<any>, allRelations: string[], alias: string, metadata: EntityMetadata, prefix: string): void {\n\n        // find all relations that match given prefix\n        let matchedBaseRelations: string[] = [];\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\n            matchedBaseRelations = allRelations\n                .filter(relation => relation.match(regexp))\n                .map(relation => relation.replace(regexp, \"\"))\n                .filter(relation => metadata.findRelationWithPropertyPath(relation));\n        } else {\n            matchedBaseRelations = allRelations.filter(relation => metadata.findRelationWithPropertyPath(relation));\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach(relation => {\n\n            // generate a relation alias\n            let relationAlias: string = alias + \"__\" + relation;\n            // shorten it if needed by the driver\n            if (qb.connection.driver.maxAliasLength && relationAlias.length > qb.connection.driver.maxAliasLength) {\n                relationAlias = shorten(relationAlias);\n            }\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation;\n            qb.leftJoinAndSelect(selection, relationAlias);\n\n            // join the eager relations of the found relation\n            const relMetadata = metadata.relations.find(metadata => metadata.propertyName === relation);\n            if (relMetadata) {\n                this.joinEagerRelations(qb, relationAlias, relMetadata.inverseEntityMetadata);\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(allRelations.indexOf(prefix ? prefix + \".\" + relation : relation), 1);\n\n            // try to find sub-relations\n            const join = qb.expressionMap.joinAttributes.find(join => join.entityOrProperty === selection);\n            this.applyRelationsRecursively(qb, allRelations, join!.alias.name, join!.metadata!, prefix ? prefix + \".\" + relation : relation);\n        });\n    }\n\n    public static joinEagerRelations(qb: SelectQueryBuilder<any>, alias: string, metadata: EntityMetadata) {\n        metadata.eagerRelations.forEach(relation => {\n            const relationAlias = qb.connection.namingStrategy.eagerJoinRelationAlias(alias, relation.propertyPath);\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\n            this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    }\n\n}\n","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToNewEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata, getLazyRelationsPromiseValue: boolean = false): T {\n        // console.log(\"groupAndTransform entity:\", newEntity);\n        // console.log(\"groupAndTransform object:\", object);\n        this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue);\n        // console.log(\"result:\", newEntity);\n        return newEntity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    private groupAndTransform(entity: ObjectLiteral, object: ObjectLiteral, metadata: EntityMetadata, getLazyRelationsPromiseValue: boolean = false): void {\n\n        // console.log(\"groupAndTransform entity:\", entity);\n        // console.log(\"groupAndTransform object:\", object);\n\n        // copy regular column properties from the given object\n        metadata.nonVirtualColumns.forEach(column => {\n            const objectColumnValue = column.getEntityValue(object);\n            if (objectColumnValue !== undefined)\n                column.setEntityValue(entity, objectColumnValue);\n        });\n\n        // // copy relation properties from the given object\n        if (metadata.relations.length) {\n            metadata.relations.forEach(relation => {\n\n                let entityRelatedValue = relation.getEntityValue(entity);\n                const objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);\n                if (objectRelatedValue === undefined)\n                    return;\n\n                if (relation.isOneToMany || relation.isManyToMany) {\n                    if (!(objectRelatedValue instanceof Array))\n                        return;\n\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = [];\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n\n                    objectRelatedValue.forEach(objectRelatedValueItem => {\n\n                        // check if we have this item from the merging object in the original entity we merge into\n                        let objectRelatedValueEntity = (entityRelatedValue as any[]).find(entityRelatedValueItem => {\n                            return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);\n                        });\n\n                        // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array\n                        if (!objectRelatedValueEntity) {\n                            objectRelatedValueEntity = relation.inverseEntityMetadata.create();\n                            entityRelatedValue.push(objectRelatedValueEntity);\n                        }\n\n                        this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\n                    });\n\n                } else {\n\n                    // if related object isn't an object (direct relation id for example)\n                    // we just set it to the entity relation, we don't need anything more from it\n                    // however we do it only if original entity does not have this relation set to object\n                    // to prevent full overriding of objects\n                    if (!(objectRelatedValue instanceof Object)) {\n                        if (!(entityRelatedValue instanceof Object))\n                            relation.setEntityValue(entity, objectRelatedValue);\n                        return;\n                    }\n\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = relation.inverseEntityMetadata.create();\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n\n                    this.groupAndTransform(entityRelatedValue, objectRelatedValue, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\n                }\n            });\n        }\n    }\n\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nclass LoadMapItem {\n\n    entity?: ObjectLiteral;\n    plainEntity: ObjectLiteral;\n    metadata: EntityMetadata;\n    parentLoadMapItem?: LoadMapItem;\n    relation?: RelationMetadata;\n\n    constructor(plainEntity: ObjectLiteral,\n                metadata: EntityMetadata,\n                parentLoadMapItem?: LoadMapItem,\n                relation?: RelationMetadata) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get id(): any {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n\n}\n\nclass LoadMap {\n\n    loadMapItems: LoadMapItem[] = [];\n\n    get mainLoadMapItem(): LoadMapItem|undefined {\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n    }\n\n    addLoadMap(newLoadMap: LoadMapItem) {\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n\n    fillEntities(target: Function|string, entities: any[]) {\n        entities.forEach(entity => {\n            const item = this.loadMapItems.find(loadMapItem => {\n                return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\n        const groups: { target: Function|string, ids: any[] }[] = [];\n        this.loadMapItems.forEach(loadMapItem => {\n            let group = groups.find(group => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    constructor(private manager: EntityManager) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter(value => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\n            return this.manager\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach(loadMapItem => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n\n            } else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n    }\n\n}","/**\n * Thrown if custom repository was not found.\n */\nexport class CustomRepositoryNotFoundError extends Error {\n    name = \"CustomRepositoryNotFoundError\";\n\n    constructor(repository: any) {\n        super();\n        Object.setPrototypeOf(this, CustomRepositoryNotFoundError.prototype);\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name } was not found. ` +\n            `Did you forgot to put @EntityRepository decorator on it?`;\n    }\n\n}","/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nexport class CustomRepositoryDoesNotHaveEntityError extends Error {\n    name = \"CustomRepositoryDoesNotHaveEntityError\";\n\n    constructor(repository: any) {\n        super();\n        Object.setPrototypeOf(this, CustomRepositoryDoesNotHaveEntityError.prototype);\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +\n            `Did you forget to specify entity for it @EntityRepository(MyEntity)? `;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {Repository} from \"./Repository\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {CustomRepositoryDoesNotHaveEntityError} from \"../error/CustomRepositoryDoesNotHaveEntityError\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected manager: EntityManager;\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getTreeRepository<Entity>(target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): SelectQueryBuilder<Entity> {\n        const target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.manager.getRepository<Entity>(target).createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): SelectQueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\n        return this.manager.getRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\n        return this.manager.getTreeRepository(entity);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    private getCustomRepositoryTarget(customRepository: any): Function|string|undefined {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        return entityRepositoryMetadataArgs.entity;\n    }\n\n}","/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nexport class CustomRepositoryCannotInheritRepositoryError extends Error {\n    name = \"CustomRepositoryCannotInheritRepositoryError\";\n\n    constructor(repository: any) {\n        super();\n        Object.setPrototypeOf(this, CustomRepositoryCannotInheritRepositoryError.prototype);\n        this.message = `Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`;\n    }\n\n}","import {EntitySchema} from \"../index\";\n\n/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotFoundError extends Error {\n    name = \"RepositoryNotFoundError\";\n\n    constructor(connectionName: string, entityClass: Function|EntitySchema<any>|string) {\n        super();\n        Object.setPrototypeOf(this, RepositoryNotFoundError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        this.message = `No repository for \"${targetName}\" was found. Looks like this entity is not registered in ` +\n            `current \"${connectionName}\" connection?`;\n    }\n\n}","import {EntitySchema} from \"../index\";\n\n/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotTreeError extends Error {\n    name = \"RepositoryNotTreeError\";\n\n    constructor(target: Function|EntitySchema<any>|string) {\n        super();\n        Object.setPrototypeOf(this, RepositoryNotTreeError.prototype);\n        let targetName: string;\n        if (target instanceof EntitySchema) {\n            targetName = target.options.name;\n        } else if (typeof target === \"function\") {\n            targetName = target.name;\n        } else {\n            targetName = target;\n        }\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to apply @Tree decorator on your entity.`;\n    }\n\n}","import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Repository} from \"./Repository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoRepository} from \"./MongoRepository\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a repository.\n     */\n    create(manager: EntityManager, metadata: EntityMetadata, queryRunner?: QueryRunner): Repository<any> {\n\n        if (metadata.treeType) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            const repository = new TreeRepository<any>();\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n\n        } else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            let repository: Repository<any>;\n            if (manager.connection.driver instanceof MongoDriver) {\n                repository = new MongoRepository();\n            } else {\n                repository = new Repository<any>();\n            }\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n\n            return repository;\n        }\n    }\n\n}","import {Driver} from \"../driver/Driver\";\n\nexport class TreeRepositoryNotSupportedError extends Error {\n    name = \"TreeRepositoryNotSupportedError\";\n\n    constructor(driver: Driver) {\n        super();\n        Object.setPrototypeOf(this, TreeRepositoryNotSupportedError.prototype);\n        this.message = `Tree repositories are not supported in ${driver.options.type} driver.`;\n    }\n\n}","/**\n * Thrown when method expects entity but instead something else is given.\n */\nexport class MustBeEntityError extends Error {\n    name = \"MustBeEntityError\";\n\n    constructor(operation: string, wrongValue: any) {\n        super();\n        Object.setPrototypeOf(this, MustBeEntityError.prototype);\n        this.message = `Cannot ${operation}, given value must be an entity, instead \"${wrongValue}\" is given.`;\n    }\n\n}","import {Subject} from \"./Subject\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\n\n/**\n * Orders insert or remove subjects in proper order (using topological sorting)\n * to make sure insert or remove operations are executed in a proper order.\n */\nexport class SubjectTopoligicalSorter {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Insert subjects needs to be sorted.\n     */\n    subjects: Subject[];\n\n    /**\n     * Unique list of entity metadatas of this subject.\n     */\n    metadatas: EntityMetadata[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(subjects: Subject[]) {\n        this.subjects = [...subjects]; // copy subjects to prevent changing of sent array\n        this.metadatas = this.getUniqueMetadatas(this.subjects);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sorts (orders) subjects in their topological order.\n     */\n    sort(direction: \"insert\"|\"delete\"): Subject[] {\n\n        // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here\n        if (!this.metadatas.length)\n            return this.subjects;\n\n        const sortedSubjects: Subject[] = [];\n\n        // first if we sort for deletion all junction subjects\n        // junction subjects are subjects without entity and database entity set\n        if (direction === \"delete\") {\n            const junctionSubjects = this.subjects.filter(subject => !subject.entity && !subject.databaseEntity);\n            sortedSubjects.push(...junctionSubjects);\n            this.removeAlreadySorted(junctionSubjects);\n        }\n\n        // next we always insert entities with non-nullable relations, sort them first\n        const nonNullableDependencies = this.getNonNullableDependencies();\n        let sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);\n        if (direction === \"insert\")\n            sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse();\n\n        // so we have a sorted entity targets\n        // go thought each of them and find all subjects with sorted entity target\n        // add those sorted targets and remove them from original array of targets\n        sortedNonNullableEntityTargets.forEach(sortedEntityTarget => {\n            const entityTargetSubjects = this.subjects.filter(subject => subject.metadata.targetName === sortedEntityTarget);\n            sortedSubjects.push(...entityTargetSubjects);\n            this.removeAlreadySorted(entityTargetSubjects);\n        });\n\n        // next sort all other entities\n        // same process as in above but with other entities\n        const otherDependencies: string[][] = this.getDependencies();\n        let sortedOtherEntityTargets = this.toposort(otherDependencies);\n        if (direction === \"insert\")\n            sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();\n\n        sortedOtherEntityTargets.forEach(sortedEntityTarget => {\n            const entityTargetSubjects = this.subjects.filter(subject => subject.metadata.targetName === sortedEntityTarget);\n            sortedSubjects.push(...entityTargetSubjects);\n            this.removeAlreadySorted(entityTargetSubjects);\n        });\n\n        // if we have something left in the subjects add them as well\n        sortedSubjects.push(...this.subjects);\n        return sortedSubjects;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes already sorted subjects from this.subjects list of subjects.\n     */\n    protected removeAlreadySorted(subjects: Subject[]) {\n        subjects.forEach(subject => {\n            this.subjects.splice(this.subjects.indexOf(subject), 1);\n        });\n    }\n\n    /**\n     * Extracts all unique metadatas from the given subjects.\n     */\n    protected getUniqueMetadatas(subjects: Subject[]) {\n        const metadatas: EntityMetadata[] = [];\n        subjects.forEach(subject => {\n            if (metadatas.indexOf(subject.metadata) === -1)\n                metadatas.push(subject.metadata);\n        });\n        return metadatas;\n    }\n\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    protected getNonNullableDependencies(): string[][] {\n        return this.metadatas.reduce((dependencies, metadata) => {\n            metadata.relationsWithJoinColumns.forEach(relation => {\n                if (relation.isNullable)\n                    return;\n\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, [] as string[][]);\n    }\n\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    protected getDependencies(): string[][] {\n        return this.metadatas.reduce((dependencies, metadata) => {\n            metadata.relationsWithJoinColumns.forEach(relation => {\n\n                // if relation is self-referenced we skip it\n                if (relation.inverseEntityMetadata === metadata)\n                    return;\n\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, [] as string[][]);\n    }\n\n    /**\n     * Sorts given graph using topological sorting algorithm.\n     *\n     * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.\n     */\n    protected toposort(edges: any[][]) {\n\n        function uniqueNodes(arr: any[]) {\n            let res = [];\n            for (let i = 0, len = arr.length; i < len; i++) {\n                let edge: any = arr[i];\n                if (res.indexOf(edge[0]) < 0) res.push(edge[0]);\n                if (res.indexOf(edge[1]) < 0) res.push(edge[1]);\n            }\n            return res;\n        }\n\n        const nodes = uniqueNodes(edges);\n        let cursor = nodes.length\n            , sorted = new Array(cursor)\n            , visited: any = {}\n            , i = cursor;\n\n        while (i--) {\n            if (!visited[i]) visit(nodes[i], i, []);\n        }\n\n        function visit(node: any, i: number, predecessors: any[]) {\n            if (predecessors.indexOf(node) >= 0) {\n                throw new Error(\"Cyclic dependency: \" + JSON.stringify(node)); // todo: better error\n            }\n\n            if (!~nodes.indexOf(node)) {\n                throw new Error(\"Found unknown node. Make sure to provided all involved nodes. Unknown node: \" + JSON.stringify(node));\n            }\n\n            if (visited[i]) return;\n            visited[i] = true;\n\n            // outgoing edges\n            let outgoing = edges.filter(function(edge) {\n                return edge[0] === node;\n            });\n            if (i = outgoing.length) {\n                let preds = predecessors.concat(node);\n                do {\n                    let child = outgoing[--i][1];\n                    visit(child, nodes.indexOf(child), preds);\n                } while (i);\n            }\n\n            sorted[--cursor] = node;\n        }\n\n        return sorted;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Thrown when user tries to create entity id map from the mixed id value,\n * but id value is a single value when entity requires multiple values.\n */\nexport class CannotCreateEntityIdMapError extends Error {\n    name = \"CannotCreateEntityIdMapError\";\n\n    constructor(metadata: EntityMetadata, id: any) {\n        super();\n        Object.setPrototypeOf(this, CannotCreateEntityIdMapError.prototype);\n        const objectExample = metadata.primaryColumns.reduce((object, column, index) => {\n            column.setEntityValue(object, index + 1);\n            return object;\n        }, {} as ObjectLiteral);\n        this.message = `Cannot use given entity id \"${id}\" because \"${metadata.targetName}\" contains multiple primary columns, you must provide object in following form: ${JSON.stringify(objectExample)} as an id.`;\n    }\n\n}","import {QueryRunner, SelectQueryBuilder} from \"..\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {CannotCreateEntityIdMapError} from \"../error/CannotCreateEntityIdMapError\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {TreeMetadataArgs} from \"../metadata-args/TreeMetadataArgs\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {shorten} from \"../util/StringUtils\";\nimport {CheckMetadata} from \"./CheckMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\nimport {ExclusionMetadata} from \"./ExclusionMetadata\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {TableType} from \"./types/TableTypes\";\nimport {TreeType} from \"./types/TreeTypes\";\nimport {UniqueMetadata} from \"./UniqueMetadata\";\n\n/**\n * Contains all entity metadata.\n */\nexport class EntityMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection where this entity metadata is created.\n     */\n    connection: Connection;\n\n    /**\n     * Metadata arguments used to build this entity metadata.\n     */\n    tableMetadataArgs: TableMetadataArgs;\n\n    /**\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\n     */\n    closureJunctionTable: EntityMetadata;\n\n    /**\n     * If this is entity metadata for a junction closure table then its owner closure table metadata will be set here.\n     */\n    parentClosureEntityMetadata: EntityMetadata;\n\n    /**\n     * Parent's entity metadata. Used in inheritance patterns.\n     */\n    parentEntityMetadata: EntityMetadata;\n\n    /**\n     * Children entity metadatas. Used in inheritance patterns.\n     */\n    childEntityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * All \"inheritance tree\" from a target entity.\n     * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n     * It also contains child entities for single table inheritance.\n     */\n    inheritanceTree: Function[] = [];\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    tableType: TableType = \"regular\";\n\n    /**\n     * Target class to which this entity metadata is bind.\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\n     * For virtual tables which lack of real entity (like junction tables) target is equal to their table name.\n     */\n    target: Function|string;\n\n    /**\n     * Gets the name of the target.\n     */\n    targetName: string;\n\n    /**\n     * Entity's name.\n     * Equal to entity target class's name if target is set to table.\n     * If target class is not then then it equals to table name.\n     */\n    name: string;\n\n    /**\n     * View's expression.\n     * Used in views\n     */\n    expression?: string|((connection: Connection) => SelectQueryBuilder<any>);\n\n    /**\n     * Original user-given table name (taken from schema or @Entity(tableName) decorator).\n     * If user haven't specified a table name this property will be undefined.\n     */\n    givenTableName?: string;\n\n    /**\n     * Entity table name in the database.\n     * This is final table name of the entity.\n     * This name already passed naming strategy, and generated based on\n     * multiple criteria, including user table name and global table prefix.\n     */\n    tableName: string;\n\n    /**\n     * Entity table path. Contains database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    tablePath: string;\n\n    /**\n     * Entity schema path. Contains database name and schema name.\n     * E.g. myDB.mySchema\n     */\n    schemaPath?: string;\n\n    /**\n     * Gets the table name without global table prefix.\n     * When querying table you need a table name with prefix, but in some scenarios,\n     * for example when you want to name a junction table that contains names of two other tables,\n     * you may want a table name without prefix.\n     */\n    tableNameWithoutPrefix: string;\n\n    /**\n     * Indicates if schema will be synchronized for this entity or not.\n     */\n    synchronize: boolean = true;\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    engine?: string;\n\n    /**\n     * Database name.\n     */\n    database?: string;\n\n    /**\n     * Schema name. Used in Postgres and Sql Server.\n     */\n    schema?: string;\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition;\n\n    /**\n     * If this entity metadata's table using one of the inheritance patterns,\n     * then this will contain what pattern it uses.\n     */\n    inheritancePattern?: \"STI\"/*|\"CTI\"*/;\n\n    /**\n     * Checks if there any non-nullable column exist in this entity.\n     */\n    hasNonNullableRelations: boolean = false;\n\n    /**\n     * Indicates if this entity metadata of a junction table, or not.\n     * Junction table is a table created by many-to-many relationship.\n     *\n     * Its also possible to understand if entity is junction via tableType.\n     */\n    isJunction: boolean = false;\n\n    /**\n     * Indicates if this entity is a tree, what type of tree it is.\n     */\n    treeType?: TreeType;\n\n    /**\n     * Checks if this table is a junction table of the closure table.\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    isClosureJunction: boolean = false;\n\n    /**\n     * Checks if entity's table has multiple primary columns.\n     */\n    hasMultiplePrimaryKeys: boolean = false;\n\n    /**\n     * Indicates if this entity metadata has uuid generated columns.\n     */\n    hasUUIDGeneratedColumns: boolean = false;\n\n    /**\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\n     * Used to store a value in a discriminator column.\n     */\n    discriminatorValue?: string;\n\n    /**\n     * Entity's column metadatas defined by user.\n     */\n    ownColumns: ColumnMetadata[] = [];\n\n    /**\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Ancestor columns used only in closure junction tables.\n     */\n    ancestorColumns: ColumnMetadata[] = [];\n\n    /**\n     * Descendant columns used only in closure junction tables.\n     */\n    descendantColumns: ColumnMetadata[] = [];\n\n    /**\n     * All columns except for virtual columns.\n     */\n    nonVirtualColumns: ColumnMetadata[] = [];\n\n    /**\n     * In the case if this entity metadata is junction table's entity metadata,\n     * this will contain all referenced columns of owner entity.\n     */\n    ownerColumns: ColumnMetadata[] = [];\n\n    /**\n     * In the case if this entity metadata is junction table's entity metadata,\n     * this will contain all referenced columns of inverse entity.\n     */\n    inverseColumns: ColumnMetadata[] = [];\n\n    /**\n     * Gets the column with generated flag.\n     */\n    generatedColumns: ColumnMetadata[] = [];\n\n    /**\n     * Gets the object id column used with mongodb database.\n     */\n    objectIdColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains a create date value.\n     */\n    createDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains an update date value.\n     */\n    updateDateColumn?: ColumnMetadata;\n\n    /**\n     * Gets entity column which contains an entity version.\n     */\n    versionColumn?: ColumnMetadata;\n\n    /**\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\n     */\n    discriminatorColumn?: ColumnMetadata;\n\n    /**\n     * Special column that stores tree level in tree entities.\n     */\n    treeLevelColumn?: ColumnMetadata;\n\n    /**\n     * Nested set's left value column.\n     * Used only in tree entities with nested set pattern applied.\n     */\n    nestedSetLeftColumn?: ColumnMetadata;\n\n    /**\n     * Nested set's right value column.\n     * Used only in tree entities with nested set pattern applied.\n     */\n    nestedSetRightColumn?: ColumnMetadata;\n\n    /**\n     * Materialized path column.\n     * Used only in tree entities with materialized path pattern applied.\n     */\n    materializedPathColumn?: ColumnMetadata;\n\n    /**\n     * Gets the primary columns.\n     */\n    primaryColumns: ColumnMetadata[] = [];\n\n    /**\n     * Entity's relation metadatas.\n     */\n    ownRelations: RelationMetadata[] = [];\n\n    /**\n     * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * List of eager relations this metadata has.\n     */\n    eagerRelations: RelationMetadata[] = [];\n\n    /**\n     * List of eager relations this metadata has.\n     */\n    lazyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only one-to-one relations of the entity.\n     */\n    oneToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner one-to-one relations of the entity.\n     */\n    ownerOneToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only one-to-many relations of the entity.\n     */\n    oneToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only many-to-one relations of the entity.\n     */\n    manyToOneRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only many-to-many relations of the entity.\n     */\n    manyToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner many-to-many relations of the entity.\n     */\n    ownerManyToManyRelations: RelationMetadata[] = [];\n\n    /**\n     * Gets only owner one-to-one and many-to-one relations.\n     */\n    relationsWithJoinColumns: RelationMetadata[] = [];\n\n    /**\n     * Tree parent relation. Used only in tree-tables.\n     */\n    treeParentRelation?: RelationMetadata;\n\n    /**\n     * Tree children relation. Used only in tree-tables.\n     */\n    treeChildrenRelation?: RelationMetadata;\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationIds: RelationIdMetadata[] = [];\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationCounts: RelationCountMetadata[] = [];\n\n    /**\n     * Entity's foreign key metadatas.\n     */\n    foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Entity's embedded metadatas.\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n     */\n    allEmbeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Entity's own indices.\n     */\n    ownIndices: IndexMetadata[] = [];\n\n    /**\n     * Entity's index metadatas.\n     */\n    indices: IndexMetadata[] = [];\n\n    /**\n     * Entity's unique metadatas.\n     */\n    uniques: UniqueMetadata[] = [];\n\n    /**\n     * Entity's own uniques.\n     */\n    ownUniques: UniqueMetadata[] = [];\n\n    /**\n     * Entity's check metadatas.\n     */\n    checks: CheckMetadata[] = [];\n\n    /**\n     * Entity's exclusion metadatas.\n     */\n    exclusions: ExclusionMetadata[] = [];\n\n    /**\n     * Entity's own listener metadatas.\n     */\n    ownListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Entity listener metadatas.\n     */\n    listeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER LOAD\" type.\n     */\n    afterLoadListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER INSERT\" type.\n     */\n    beforeInsertListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER INSERT\" type.\n     */\n    afterInsertListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER UPDATE\" type.\n     */\n    beforeUpdateListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER UPDATE\" type.\n     */\n    afterUpdateListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER REMOVE\" type.\n     */\n    beforeRemoveListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Listener metadatas with \"AFTER REMOVE\" type.\n     */\n    afterRemoveListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Map of columns and relations of the entity.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    propertiesMap: ObjectLiteral;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: Connection,\n        inheritanceTree?: Function[],\n        inheritancePattern?: \"STI\"/*|\"CTI\"*/,\n        tableTree?: TreeMetadataArgs,\n        parentClosureEntityMetadata?: EntityMetadata,\n        args: TableMetadataArgs\n    }) {\n        this.connection = options.connection;\n        this.inheritanceTree = options.inheritanceTree || [];\n        this.inheritancePattern = options.inheritancePattern;\n        this.treeType = options.tableTree ? options.tableTree.type : undefined;\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata!;\n        this.tableMetadataArgs = options.args;\n        this.target = this.tableMetadataArgs.target;\n        this.tableType = this.tableMetadataArgs.type;\n        this.expression = this.tableMetadataArgs.expression;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new entity.\n     */\n    create(queryRunner?: QueryRunner): any {\n        // if target is set to a function (e.g. class) that can be created then create it\n        let ret: any;\n        if (this.target instanceof Function) {\n            ret = new (<any> this.target)();\n            this.lazyRelations.forEach(relation => this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner));\n            return ret;\n        }\n\n        // otherwise simply return a new empty object\n        const newObject = {};\n        this.lazyRelations.forEach(relation => this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner));\n        return newObject;\n    }\n\n    /**\n     * Checks if given entity has an id.\n     */\n    hasId(entity: ObjectLiteral): boolean {\n        if (!entity)\n            return false;\n\n        return this.primaryColumns.every(primaryColumn => {\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    }\n\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    hasAllPrimaryKeys(entity: ObjectLiteral): boolean {\n        return this.primaryColumns.every(primaryColumn => {\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    }\n\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureEntityIdMap(id: any): ObjectLiteral {\n        if (id instanceof Object)\n            return id;\n\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError(this, id);\n\n        return this.primaryColumns[0].createValueMap(id);\n    }\n\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    getEntityIdMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\n        if (!entity)\n            return undefined;\n\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, { skipNulls: true });\n    }\n\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    getEntityIdMixedMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\n        if (!entity)\n            return entity;\n\n        const idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n\n        } else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?\n        }\n\n        return idMap;\n    }\n\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    compareEntities(firstEntity: ObjectLiteral, secondEntity: ObjectLiteral): boolean {\n\n        const firstEntityIdMap = this.getEntityIdMap(firstEntity);\n        if (!firstEntityIdMap) return false;\n\n        const secondEntityIdMap = this.getEntityIdMap(secondEntity);\n        if (!secondEntityIdMap) return false;\n\n        return EntityMetadata.compareIds(firstEntityIdMap, secondEntityIdMap);\n    }\n\n    /**\n     * Finds column with a given property name.\n     */\n    findColumnWithPropertyName(propertyName: string): ColumnMetadata|undefined {\n        return this.columns.find(column => column.propertyName === propertyName);\n    }\n\n    /**\n     * Finds column with a given database name.\n     */\n    findColumnWithDatabaseName(databaseName: string): ColumnMetadata|undefined {\n        return this.columns.find(column => column.databaseName === databaseName);\n    }\n\n    /**\n     * Finds column with a given property path.\n     */\n    findColumnWithPropertyPath(propertyPath: string): ColumnMetadata|undefined {\n        const column = this.columns.find(column => column.propertyPath === propertyPath);\n        if (column)\n            return column;\n\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.relations.find(relation => relation.propertyPath === propertyPath);\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0];\n\n        return undefined;\n    }\n\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    findColumnsWithPropertyPath(propertyPath: string): ColumnMetadata[] {\n        const column = this.columns.find(column => column.propertyPath === propertyPath);\n        if (column)\n            return [column];\n\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.relations.find(relation => relation.propertyPath === propertyPath);\n        if (relation && relation.joinColumns)\n            return relation.joinColumns;\n\n        return [];\n    }\n\n    /**\n     * Finds relation with the given property path.\n     */\n    findRelationWithPropertyPath(propertyPath: string): RelationMetadata|undefined {\n        return this.relations.find(relation => relation.propertyPath === propertyPath);\n    }\n\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    hasEmbeddedWithPropertyPath(propertyPath: string): boolean {\n        return this.allEmbeddeds.some(embedded => embedded.propertyPath === propertyPath);\n    }\n\n    /**\n     * Finds embedded with a given property path.\n     */\n    findEmbeddedWithPropertyPath(propertyPath: string): EmbeddedMetadata|undefined {\n        return this.allEmbeddeds.find(embedded => embedded.propertyPath === propertyPath);\n    }\n\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    extractRelationValuesFromEntity(entity: ObjectLiteral, relations: RelationMetadata[]): [RelationMetadata, any, EntityMetadata][] {\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = [];\n        relations.forEach(relation => {\n            const value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                value.forEach(subValue => relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]));\n            } else if (value) {\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\n            }\n        });\n        return relationsAndValues;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a property paths for a given entity.\n     */\n    static createPropertyPath(metadata: EntityMetadata, entity: ObjectLiteral, prefix: string = \"\") {\n        const paths: string[] = [];\n        Object.keys(entity).forEach(key => {\n\n            // check for function is needed in the cases when createPropertyPath used on values containg a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            const parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                const subPaths = this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push(...subPaths);\n            } else {\n                const path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    }\n\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    static difference(firstIdMaps: ObjectLiteral[], secondIdMaps: ObjectLiteral[]): ObjectLiteral[] {\n        return firstIdMaps.filter(firstIdMap => {\n            return !secondIdMaps.find(secondIdMap => OrmUtils.deepCompare(firstIdMap, secondIdMap));\n        });\n    }\n\n    /**\n     * Compares ids of the two entities.\n     * Returns true if they match, false otherwise.\n     */\n    static compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n\n        return OrmUtils.deepCompare(firstId, secondId);\n    }\n\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    static getValueMap(entity: ObjectLiteral, columns: ColumnMetadata[], options?: { skipNulls?: boolean }): ObjectLiteral|undefined {\n        return columns.reduce((map, column) => {\n            const value = column.getEntityValueMap(entity, options);\n\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined;\n\n            return column.isObjectId ? Object.assign(map, value) : OrmUtils.mergeDeep(map, value);\n        }, {} as ObjectLiteral|undefined);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    build() {\n        const namingStrategy = this.connection.namingStrategy;\n        const entityPrefix = this.connection.options.entityPrefix;\n        this.engine = this.tableMetadataArgs.engine;\n        this.database = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.database : this.tableMetadataArgs.database;\n        if (this.tableMetadataArgs.schema) {\n            this.schema = this.tableMetadataArgs.schema;\n        }\n        else if ((this.tableMetadataArgs.type === \"entity-child\") && this.parentEntityMetadata) {\n            this.schema = this.parentEntityMetadata.schema;\n        }\n        else {\n            this.schema = (this.connection.options as PostgresConnectionOptions|SqlServerConnectionOptions).schema;\n        }\n        this.givenTableName = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;\n        this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;\n        this.targetName = this.tableMetadataArgs.target instanceof Function ? (this.tableMetadataArgs.target as any).name : this.tableMetadataArgs.target;\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName!);\n        } else if (this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);\n        } else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);\n\n            if (this.connection.driver.maxAliasLength && this.connection.driver.maxAliasLength > 0 && this.tableNameWithoutPrefix.length > this.connection.driver.maxAliasLength) {\n                this.tableNameWithoutPrefix = shorten(this.tableNameWithoutPrefix, { separator: \"_\", segmentLength: 3 });\n            }\n        }\n        this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n        this.expression = this.tableMetadataArgs.expression;\n        this.tablePath = this.buildTablePath();\n        this.schemaPath = this.buildSchemaPath();\n        this.orderBy = (this.tableMetadataArgs.orderBy instanceof Function) ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not\n\n        this.isJunction = this.tableMetadataArgs.type === \"closure-junction\" || this.tableMetadataArgs.type === \"junction\";\n        this.isClosureJunction = this.tableMetadataArgs.type === \"closure-junction\";\n    }\n\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    registerColumn(column: ColumnMetadata) {\n        if (this.ownColumns.indexOf(column) !== -1)\n            return;\n\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), this.ownColumns);\n        this.primaryColumns = this.columns.filter(column => column.isPrimary);\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.hasUUIDGeneratedColumns = this.columns.filter(column => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n        this.propertiesMap = this.createPropertiesMap();\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach(entityMetadata => entityMetadata.registerColumn(column));\n    }\n\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    createPropertiesMap(): { [name: string]: string|any } {\n        const map: { [name: string]: string|any } = {};\n        this.columns.forEach(column => OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)));\n        this.relations.forEach(relation => OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)));\n        return map;\n    }\n\n    /**\n     * Builds table path using database name, schema name and table name.\n     */\n    protected buildTablePath(): string {\n        let tablePath = this.tableName;\n        if (this.schema)\n            tablePath = this.schema + \".\" + tablePath;\n        if (this.database && !(this.connection.driver instanceof PostgresDriver)) {\n            if (!this.schema && this.connection.driver instanceof SqlServerDriver) {\n                tablePath = this.database + \"..\" + tablePath;\n            } else {\n                tablePath = this.database + \".\" + tablePath;\n            }\n        }\n\n        return tablePath;\n    }\n\n    /**\n     * Builds table path using schema name and database name.\n     */\n    protected buildSchemaPath(): string|undefined {\n        if (!this.schema)\n            return undefined;\n\n        return this.database && !(this.connection.driver instanceof PostgresDriver) ? this.database + \".\" + this.schema : this.schema;\n    }\n\n}\n","import {Subject} from \"./Subject\";\nimport {DateUtils} from \"../util/DateUtils\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../util/OrmUtils\";\n\n/**\n * Finds what columns are changed in the subject entities.\n */\nexport class SubjectChangedColumnsComputer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    compute(subjects: Subject[]) {\n        subjects.forEach(subject => {\n            this.computeDiffColumns(subject);\n            this.computeDiffRelationalColumns(subjects, subject);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    protected computeDiffColumns(subject: Subject): void {\n\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n\n        subject.metadata.columns.forEach(column => {\n\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isDiscriminator ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isCreateDate)\n                return;\n\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.column === column);\n            if (changeMap) {\n                subject.changeMaps.splice(subject.changeMaps.indexOf(changeMap), 1);\n            }\n\n            // get user provided value - column value from the user provided persisted entity\n            const entityValue = column.getEntityValue(subject.entity!);\n\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n\n                // get database value of the column\n                let databaseValue = column.getEntityValue(subject.databaseEntity);\n\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    const value = column.relationMetadata.getEntityValue(subject.entity!);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n                let normalizedValue = entityValue;\n                // normalize special values to make proper comparision\n                if (entityValue !== null) {\n                    if (column.type === \"date\") {\n                        normalizedValue = DateUtils.mixedDateToDateString(entityValue);\n\n                    } else if (column.type === \"time\") {\n                        normalizedValue = DateUtils.mixedDateToTimeString(entityValue);\n\n                    } else if (column.type === \"datetime\" || column.type === Date) {\n                        normalizedValue = DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                        databaseValue = DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n\n                    } else if (column.type === \"json\" || column.type === \"jsonb\") {\n                        // JSON.stringify doesn't work because postgresql sorts jsonb before save.\n                        // If you try to save json '[{\"messages\": \"\", \"attribute Key\": \"\", \"level\":\"\"}] ' as jsonb,\n                        // then postgresql will save it as '[{\"level\": \"\", \"message\":\"\", \"attributeKey\": \"\"}]'\n                        if (OrmUtils.deepCompare(entityValue, databaseValue)) return;\n\n                    } else if (column.type === \"simple-array\") {\n                        normalizedValue = DateUtils.simpleArrayToString(entityValue);\n                        databaseValue = DateUtils.simpleArrayToString(databaseValue);\n                    } else if (column.type === \"simple-enum\") {\n                        normalizedValue = DateUtils.simpleEnumToString(entityValue);\n                        databaseValue = DateUtils.simpleEnumToString(databaseValue);\n                    }\n                }\n\n                // if value is not changed - then do nothing\n                if (normalizedValue === databaseValue)\n                    return;\n            }\n            subject.diffColumns.push(column);\n            subject.changeMaps.push({\n                column: column,\n                value: entityValue\n            });\n        });\n    }\n\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    protected computeDiffRelationalColumns(allSubjects: Subject[], subject: Subject): void {\n\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n\n        subject.metadata.relationsWithJoinColumns.forEach(relation => {\n\n            // get the related entity from the persisted entity\n            let relatedEntity = relation.getEntityValue(subject.entity!);\n\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                let relatedEntityRelationIdMap: ObjectLiteral = relatedEntity;\n                if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap)!;\n\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                const databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n\n                // if relation ids are equal then we don't need to update anything\n                const areRelatedIdsEqual = EntityMetadata.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual) {\n                    return;\n                } else {\n                    subject.diffRelations.push(relation);\n                }\n            }\n\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            const valueSubject = allSubjects.find(subject => subject.mustBeInserted && subject.entity === relatedEntity);\n            if (valueSubject)\n                relatedEntity = valueSubject;\n\n            // find if there is already a relation to be changed\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.relation === relation);\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = relatedEntity;\n\n            } else { // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity\n                });\n            }\n        });\n    }\n\n}\n","import {Subject} from \"../persistence/Subject\";\n\n/**\n * Thrown when operation is going to be executed on a subject without identifier.\n * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.\n * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.\n */\nexport class SubjectWithoutIdentifierError extends Error {\n    name = \"SubjectWithoutIdentifierError\";\n\n    constructor(subject: Subject) {\n        super();\n        Object.setPrototypeOf(this, SubjectWithoutIdentifierError.prototype);\n        this.message = `Internal error. Subject ${subject.metadata.targetName} must have an identifier to perform operation. ` +\n            `Please report a github issue if you face this error.`;\n    }\n\n}","import {Subject} from \"../persistence/Subject\";\n\n/**\n * Thrown when same object is scheduled for remove and updation at the same time.\n */\nexport class SubjectRemovedAndUpdatedError extends Error {\n    name = \"SubjectRemovedAndUpdatedError\";\n\n    constructor(subject: Subject) {\n        super();\n        Object.setPrototypeOf(this, SubjectRemovedAndUpdatedError.prototype);\n        this.message = `Removed entity \"${subject.metadata.name}\" is also scheduled for update operation. ` +\n            `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`;\n    }\n\n}","/**\n * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.\n */\nexport class BroadcasterResult {\n\n    /**\n     * Number of executed listeners and subscribers.\n     */\n    count: number = 0;\n\n    /**\n     * Promises returned by listeners and subscribers which needs to be awaited.\n     */\n    promises: Promise<any>[] = [];\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Query} from \"../Query\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {ColumnType, PromiseUtils} from \"../../index\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\n\n/**\n * Runs queries on a single oracle database connection.\n */\nexport class OracleQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: OracleDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: OracleDriver, mode: \"master\"|\"slave\" = \"master\") {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.isReleased = true;\n            if (this.databaseConnection) {\n                this.databaseConnection.close((err: any) => {\n                    if (err)\n                        return fail(err);\n\n                    ok();\n                });\n            } else {\n                ok();\n            }\n        });\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel: IsolationLevel = \"READ COMMITTED\"): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        if (isolationLevel !== \"SERIALIZABLE\" && isolationLevel !== \"READ COMMITTED\") {\n            throw new Error(`Oracle only supports SERIALIZABLE and READ COMMITTED isolation`);\n        }\n        await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n        this.isTransactionActive = true;\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n\n                const handler = (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n                    // TODO: find better solution. Must return result instead of properties\n                    ok(result.rows || result.outBinds || result.rowsAffected);\n                };\n                const executionOptions = {\n                    autoCommit: this.isTransactionActive ? false : true\n                };\n\n                const databaseConnection = await this.connect();\n                databaseConnection.execute(query, parameters || {}, executionOptions, handler);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by Oracle driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"TABLE_NAME\" FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"COLUMN_NAME\" FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" = '${tableName}' AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        await this.query(`CREATE DATABASE IF NOT EXISTS \"${database}\"`);\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemas: string, ifNotExist?: boolean): Promise<void> {\n        throw new Error(`Schema create queries are not supported by Oracle driver.`);\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        throw new Error(`Schema drop queries are not supported by Oracle driver.`);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableOrName: Table|string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        if (newTableOrName instanceof Table) {\n            newTable = newTableOrName;\n        } else {\n            newTable.name = newTableOrName;\n        }\n\n        // rename table\n        upQueries.push(new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTable.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME TO \"${oldTable.name}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`));\n            downQueries.push(new Query(`ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(column)}`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await PromiseUtils.runInSequence(columns, column => this.addColumn(tableOrName, column));\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {\n            // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`));\n                    downQueries.push(new Query(`ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                let defaultUp: string = \"\";\n                let defaultDown: string = \"\";\n                let nullableUp:  string = \"\";\n                let nullableDown:  string = \"\";\n\n                // changing column default\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    defaultUp = `DEFAULT ${newColumn.default}`;\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        defaultDown = `DEFAULT ${oldColumn.default}`;\n                    } else {\n                        defaultDown = \"DEFAULT NULL\";\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    defaultUp = \"DEFAULT NULL\";\n                    defaultDown = `DEFAULT ${oldColumn.default}`;\n                }\n\n                // changing column isNullable property\n                if (newColumn.isNullable !== oldColumn.isNullable) {\n                    if (newColumn.isNullable === true) {\n                        nullableUp = \"NULL\";\n                        nullableDown = \"NOT NULL\";\n                    } else {\n                        nullableUp = \"NOT NULL\";\n                        nullableDown = \"NULL\";\n                    }\n                }\n\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" MODIFY \"${oldColumn.name}\" ${this.connection.driver.createFullType(newColumn)} ${defaultUp} ${nullableUp}`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" MODIFY \"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} ${defaultDown} ${nullableDown}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        await PromiseUtils.runInSequence(changedColumns, changedColumn => this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn));\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.dropIndexSql(columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(column)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await PromiseUtils.runInSequence(columns, column => this.dropColumn(tableOrName, column));\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const columnNames = columns.map(column => column.name);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const dropViewsQuery = `SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(dropViewsQuery);\n            await Promise.all(dropViewQueries.map(query => this.query(query[\"query\"])));\n\n            const dropTablesQuery = `SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropTableQueries.map(query => this.query(query[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const viewNamesString = viewNames.map(name => \"'\" + name + \"'\").join(\", \");\n        let query = `SELECT \"T\".* FROM \"${this.getTypeormMetadataTableName()}\" \"T\" INNER JOIN \"USER_VIEWS\" \"V\" ON \"V\".\"VIEW_NAME\" = \"T\".\"name\" WHERE \"T\".\"type\" = 'VIEW'`;\n        if (viewNamesString.length > 0)\n            query += ` AND \"T\".\"name\" IN (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql = `SELECT * FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" IN (${tableNamesString})`;\n        const columnsSql = `SELECT * FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" IN (${tableNamesString})`;\n\n        const indicesSql = `SELECT \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\", ` +\n            `LISTAGG (\"COL\".\"COLUMN_NAME\", ',') WITHIN GROUP (ORDER BY \"COL\".\"COLUMN_NAME\") AS \"COLUMN_NAMES\" ` +\n            `FROM \"USER_INDEXES\" \"IND\" ` +\n            `INNER JOIN \"USER_IND_COLUMNS\" \"COL\" ON \"COL\".\"INDEX_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `LEFT JOIN \"USER_CONSTRAINTS\" \"CON\" ON \"CON\".\"CONSTRAINT_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `WHERE \"IND\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ` +\n            `GROUP BY \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\"`;\n\n        const foreignKeysSql = `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", ` +\n            `\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"REF_COL\" ON \"REF_COL\".\"OWNER\" = \"C\".\"R_OWNER\" AND \"REF_COL\".\"CONSTRAINT_NAME\" = \"C\".\"R_CONSTRAINT_NAME\" AND \"REF_COL\".\"POSITION\" = \"COL\".\"POSITION\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" = 'R'`;\n\n        const constraintsSql = `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'`;\n\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbConstraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return dbTables.map(dbTable => {\n            const table = new Table();\n            table.name = dbTable[\"TABLE_NAME\"];\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === table.name)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]);\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"U\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n                    const isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"P\");\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (tableColumn.type.indexOf(\"(\") !== -1)\n                        tableColumn.type = tableColumn.type.replace(/\\([0-9]*\\)/, \"\");\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1) {\n                        const length = tableColumn.type === \"raw\" ? dbColumn[\"DATA_LENGTH\"] : dbColumn[\"CHAR_COL_DECL_LENGTH\"];\n                        tableColumn.length = length && !this.isDefaultColumnLength(table, tableColumn, length) ? length.toString() : \"\";\n                    }\n\n                    if (tableColumn.type === \"number\" || tableColumn.type === \"float\") {\n                        if (dbColumn[\"DATA_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"DATA_PRECISION\"];\n                        if (dbColumn[\"DATA_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"DATA_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"DATA_SCALE\"];\n\n                    } else if ((tableColumn.type === \"timestamp\"\n                        || tableColumn.type === \"timestamp with time zone\"\n                        || tableColumn.type === \"timestamp with local time zone\") && dbColumn[\"DATA_SCALE\"] !== null) {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_SCALE\"]) ? dbColumn[\"DATA_SCALE\"] : undefined;\n                    }\n\n                    tableColumn.default = dbColumn[\"DATA_DEFAULT\"] !== null\n                        && dbColumn[\"DATA_DEFAULT\"] !== undefined\n                        && dbColumn[\"DATA_DEFAULT\"].trim() !== \"NULL\" ? tableColumn.default = dbColumn[\"DATA_DEFAULT\"].trim() : undefined;\n\n                    tableColumn.isNullable = dbColumn[\"NULLABLE\"] === \"Y\";\n                    tableColumn.isUnique = isUnique;\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\";\n                    if (tableColumn.isGenerated) {\n                        tableColumn.generationStrategy = \"increment\";\n                        tableColumn.default = undefined;\n                    }\n                    tableColumn.comment = \"\"; // todo\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"C\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"SEARCH_CONDITION\"]\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return dbForeignKey[\"TABLE_NAME\"] === table.name;\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"],\n                    onUpdate: \"NO ACTION\", // Oracle does not have onUpdate option in FK's, but we need it for proper synchronization\n                });\n            });\n\n            // create TableIndex objects from the loaded indices\n            table.indices = dbIndices\n                .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === table.name)\n                .map(dbIndex => {\n                    return new TableIndex({\n                        name: dbIndex[\"INDEX_NAME\"],\n                        columnNames: dbIndex[\"COLUMN_NAMES\"].split(\",\"),\n                        isUnique: dbIndex[\"UNIQUENESS\"] === \"UNIQUE\"\n                    });\n                });\n\n            return table;\n        });\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\n                if (fk.onDelete && fk.onDelete !== \"NO ACTION\") // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const query = ifExist ? `DROP TABLE IF EXISTS \"${tableName}\"` : `DROP TABLE \"${tableName}\"`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", name: view.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        return new Query(`DROP VIEW \"${viewName}\"`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: viewName })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${table.name}\" (${columns})`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\" (${referencedColumnNames})`;\n        // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n        if (foreignKey.onDelete && foreignKey.onDelete !== \"NO ACTION\")\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED ALWAYS AS IDENTITY\";\n\n        return c;\n    }\n\n\n}\n","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {OracleQueryRunner} from \"./OracleQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {OracleConnectionOptions} from \"./OracleConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {OracleConnectionCredentialsOptions} from \"./OracleConnectionCredentialsOptions\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\n/**\n * Organizes communication with Oracle RDBMS.\n */\nexport class OracleDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Underlying oracle library.\n     */\n    oracle: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: OracleConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.techonthenet.com/oracle/datatypes.php\n     * @see https://docs.oracle.com/cd/B28359_01/server.111/b28318/datatype.htm#CNCPT012\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"long\",\n        \"raw\",\n        \"long raw\",\n        \"number\",\n        \"numeric\",\n        \"float\",\n        \"dec\",\n        \"decimal\",\n        \"integer\",\n        \"int\",\n        \"smallint\",\n        \"real\",\n        \"double precision\",\n        \"date\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n        \"interval year to month\",\n        \"interval day to second\",\n        \"bfile\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"rowid\",\n        \"urowid\"\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"varchar\",\n        \"raw\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"number\",\n        \"float\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\"\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"number\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        version: \"number\",\n        treeLevel: \"number\",\n        migrationId: \"number\",\n        migrationName: \"varchar2\",\n        migrationTimestamp: \"number\",\n        cacheId: \"number\",\n        cacheIdentifier: \"varchar2\",\n        cacheTime: \"number\",\n        cacheDuration: \"number\",\n        cacheQuery: \"clob\",\n        cacheResult: \"clob\",\n        metadataType: \"varchar2\",\n        metadataDatabase: \"varchar2\",\n        metadataSchema: \"varchar2\",\n        metadataTable: \"varchar2\",\n        metadataName: \"varchar2\",\n        metadataValue: \"clob\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n        \"nchar\": { length: 1 },\n        \"varchar\": { length: 255 },\n        \"varchar2\": { length: 255 },\n        \"nvarchar2\": { length: 255 },\n        \"raw\": { length: 2000 },\n        \"float\": { precision: 126 },\n        \"timestamp\": { precision: 6 },\n        \"timestamp with time zone\": { precision: 6 },\n        \"timestamp with local time zone\": { precision: 6 }\n    };\n\n    /**\n     * Max length allowed by Oracle for aliases.\n     * @see https://docs.oracle.com/database/121/SQLRF/sql_elements008.htm#SQLRF51129\n     * > The following list of rules applies to both quoted and nonquoted identifiers unless otherwise indicated\n     * > Names must be from 1 to 30 bytes long with these exceptions:\n     * > [...]\n     *\n     * Since Oracle 12.2 (with a compatible driver/client), the limit has been set to 128.\n     * @see https://docs.oracle.com/en/database/oracle/oracle-database/12.2/sqlrf/Database-Object-Names-and-Qualifiers.html\n     *\n     * > If COMPATIBLE is set to a value of 12.2 or higher, then names must be from 1 to 128 bytes long with these exceptions\n     */\n    maxAliasLength = 30;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as OracleConnectionOptions;\n\n        // load oracle package\n        this.loadDependencies();\n\n        // extra oracle setup\n        this.oracle.outFormat = this.oracle.OBJECT;\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.sid)\n        //     throw new DriverOptionNotSetError(\"sid\");\n        //\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        this.oracle.fetchAsString = [ this.oracle.CLOB ];\n        this.oracle.fetchAsBuffer = [ this.oracle.BLOB ];\n        if (this.options.replication) {\n            this.slaves = await Promise.all(this.options.replication.slaves.map(slave => {\n                return this.createPool(this.options, slave);\n            }));\n            this.master = await this.createPool(this.options, this.options.replication.master);\n            this.database = this.options.replication.master.database;\n\n        } else {\n            this.master = await this.createPool(this.options, this.options);\n            this.database = this.options.database;\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"));\n\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map(slave => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\n        return new OracleQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => {\n            if (typeof nativeParameters[key] === \"boolean\")\n                return nativeParameters[key] ? 1 : 0;\n            return nativeParameters[key];\n        });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any, index: number) => {\n                    escapedParameters.push(v);\n                    return `:${key.substr(4)}${index}`;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else if (typeof value === \"boolean\") {\n                return value ? 1 : 0;\n\n            } else {\n                escapedParameters.push(value);\n                return key;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * Oracle does not support table schemas. One user can have only one schema.\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            if (typeof value === \"string\")\n                value = value.replace(/[^0-9-]/g, \"\");\n            return () => `TO_DATE('${DateUtils.mixedDateToDateString(value)}', 'YYYY-MM-DD')`;\n\n        } else if (columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp with local time zone\") {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp with local time zone\") {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"json\") {\n            value = JSON.parse(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number|string, precision?: number|null, scale?: number, isArray?: boolean }): string {\n        if (column.type === Number || column.type === Boolean || column.type === \"numeric\"\n            || column.type === \"dec\" || column.type === \"decimal\" || column.type === \"int\"\n            || column.type === \"integer\" || column.type === \"smallint\") {\n            return \"number\";\n\n        } else if (column.type === \"real\" || column.type === \"double precision\") {\n            return \"float\";\n\n        } else if (column.type === String || column.type === \"varchar\") {\n            return \"varchar2\";\n\n        } else if (column.type === Date) {\n            return \"timestamp\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n\n        } else if (column.type === \"uuid\") {\n            return \"varchar2\";\n\n        } else if (column.type === \"simple-array\") {\n            return \"clob\";\n\n        } else if (column.type === \"simple-json\") {\n            return \"clob\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(uq => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"varchar2\":\n            case \"nvarchar2\":\n                return \"255\";\n            case \"raw\":\n                return \"2000\";\n            case \"uuid\":\n                return \"36\";\n            default:\n                return \"\";\n        }\n    }\n\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because in Oracle column length is required for some data types.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n\n        if (column.type === \"timestamp with time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH TIME ZONE\";\n\n        } else if (column.type === \"timestamp with local time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH LOCAL TIME ZONE\";\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            this.master.getConnection((err: any, connection: any, release: Function) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n\n        return new Promise<any>((ok, fail) => {\n            const random = Math.floor(Math.random() * this.slaves.length);\n\n            this.slaves[random].getConnection((err: any, connection: any) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult)\n            return undefined;\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column)));\n            }\n            return map;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                || this.normalizeDefault(columnMetadata) !== tableColumn.default\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \":\" + parameterName;\n    }\n\n    /**\n     * Converts column type in to native oracle type.\n     */\n    columnTypeToNativeParameter(type: ColumnType): any {\n        switch (this.normalizeType({ type: type as any })) {\n            case \"number\":\n            case \"numeric\":\n            case \"int\":\n            case \"integer\":\n            case \"smallint\":\n            case \"dec\":\n            case \"decimal\":\n                return this.oracle.NUMBER;\n            case \"char\":\n            case \"nchar\":\n            case \"nvarchar2\":\n            case \"varchar2\":\n                return this.oracle.STRING;\n            case \"blob\":\n                return this.oracle.BLOB;\n            case \"clob\":\n                return this.oracle.CLOB;\n            case \"date\":\n            case \"timestamp\":\n            case \"timestamp with time zone\":\n            case \"timestamp with local time zone\":\n                return this.oracle.DATE;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.oracle = PlatformTools.load(\"oracledb\");\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\");\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected async createPool(options: OracleConnectionOptions, credentials: OracleConnectionCredentialsOptions): Promise<any> {\n\n        credentials = Object.assign(credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign({}, {\n            user: credentials.username,\n            password: credentials.password,\n            connectString: credentials.connectString ? credentials.connectString : credentials.host + \":\" + credentials.port + \"/\" + credentials.sid,\n        }, options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            this.oracle.createPool(connectionOptions, (err: any, pool: any) => {\n                if (err)\n                    return fail(err);\n                ok(pool);\n            });\n        });\n\n    }\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => err ? fail(err) : ok());\n            pool = undefined;\n        });\n    }\n\n}\n","import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\n\n/**\n * Executes subject operations for nested set tree entities.\n */\nexport class NestedSetSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n        const escape = (alias: string) => this.queryRunner.connection.driver.escape(alias);\n        const tableName = this.getTableName(subject.metadata.tablePath);\n        const leftColumnName = escape(subject.metadata.nestedSetLeftColumn!.databaseName);\n        const rightColumnName = escape(subject.metadata.nestedSetRightColumn!.databaseName);\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        let parentNsRight: number|undefined = undefined;\n        if (parentId) {\n            parentNsRight = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(subject.metadata.targetName + \".\" + subject.metadata.nestedSetRightColumn!.propertyPath, \"right\")\n                .from(subject.metadata.target, subject.metadata.targetName)\n                .whereInIds(parentId)\n                .getRawOne()\n                .then(result => {\n                    const value: any = result ? result[\"right\"] : undefined;\n                    // CockroachDB returns numeric types as string\n                    return typeof value === \"string\" ? parseInt(value) : value;\n                });\n        }\n\n        if (parentNsRight !== undefined) {\n            await this.queryRunner.query(`UPDATE ${tableName} SET ` +\n                `${leftColumnName} = CASE WHEN ${leftColumnName} > ${parentNsRight} THEN ${leftColumnName} + 2 ELSE ${leftColumnName} END,` +\n                `${rightColumnName} = ${rightColumnName} + 2 ` +\n                `WHERE ${rightColumnName} >= ${parentNsRight}`);\n\n            OrmUtils.mergeDeep(\n                subject.insertedValueSet,\n                subject.metadata.nestedSetLeftColumn!.createValueMap(parentNsRight),\n                subject.metadata.nestedSetRightColumn!.createValueMap(parentNsRight + 1),\n            );\n        } else {\n            OrmUtils.mergeDeep(\n                subject.insertedValueSet,\n                subject.metadata.nestedSetLeftColumn!.createValueMap(1),\n                subject.metadata.nestedSetRightColumn!.createValueMap(2),\n            );\n        }\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.queryRunner.connection.driver.escape(i);\n            }).join(\".\");\n    }\n\n}\n","/**\n * Thrown when user saves tree children entity but its parent is not saved yet.\n*/\nexport class CannotAttachTreeChildrenEntityError extends Error {\n    name = \"CannotAttachTreeChildrenEntityError\";\n\n    constructor(entityName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotAttachTreeChildrenEntityError.prototype);\n        this.message = `Cannot attach entity \"${entityName}\" to its parent. Please make sure parent is saved in the database before saving children nodes.`;\n    }\n\n}","import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {CannotAttachTreeChildrenEntityError} from \"../../error/CannotAttachTreeChildrenEntityError\";\n\n/**\n * Executes subject operations for closure entities.\n */\nexport class ClosureSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all children of the given subject's entity.\n\n    async deleteChildrenOf(subject: Subject) {\n        // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);\n        // console.log(\"relationValue: \", relationValue);\n        // this.queryRunner.manager\n        //     .createQueryBuilder()\n        //     .from(subject.metadata.closureJunctionTable.target, \"tree\")\n        //     .where(\"tree.\");\n    }*/\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n\n        // create values to be inserted into the closure junction\n        const closureJunctionInsertMap: ObjectLiteral = {};\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach(column => {\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n        });\n        subject.metadata.closureJunctionTable.descendantColumns.forEach(column => {\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n        });\n\n        // insert values into the closure junction table\n        await this.queryRunner\n            .manager\n            .createQueryBuilder()\n            .insert()\n            .into(subject.metadata.closureJunctionTable.tablePath)\n            .values(closureJunctionInsertMap)\n            .updateEntity(false)\n            .callListeners(false)\n            .execute();\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n\n        if (parent) {\n            const escape = (alias: string) => this.queryRunner.connection.driver.escape(alias);\n            const tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n            const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(column => {\n                return escape(column.databaseName);\n            });\n            const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(column => {\n                return escape(column.databaseName);\n            });\n            const firstQueryParameters: any[] = [];\n            const childEntityIdValues = subject.metadata.primaryColumns.map(column => column.getEntityValue(subject.insertedValueSet!));\n            const childEntityIds1 = subject.metadata.primaryColumns.map((column, index) => {\n                firstQueryParameters.push(childEntityIdValues[index]);\n                return this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters.length - 1);\n            });\n            const whereCondition = subject.metadata.primaryColumns.map(column => {\n                const columnName = escape(column.databaseName + \"_descendant\");\n                const parentId = column.getEntityValue(parent);\n                if (!parentId)\n                    throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n\n                firstQueryParameters.push(parentId);\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters.length - 1);\n                return columnName + \" = \" + parameterName;\n            }).join(\", \");\n\n            await this.queryRunner.query(\n                `INSERT INTO ${tableName} (${[...ancestorColumnNames, ...descendantColumnNames].join(\", \")}) ` +\n                `SELECT ${ancestorColumnNames.join(\", \")}, ${childEntityIds1.join(\", \")} FROM ${tableName} WHERE ${whereCondition}`,\n                firstQueryParameters\n            );\n        }\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.queryRunner.connection.driver.escape(i);\n            }).join(\".\");\n    }\n\n\n}","import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\n/**\n * Executes subject operations for materialized-path tree entities.\n */\nexport class MaterializedPathSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        let parentPath: string = \"\";\n        if (parentId) {\n            parentPath = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(subject.metadata.targetName + \".\" + subject.metadata.materializedPathColumn!.propertyPath, \"path\")\n                .from(subject.metadata.target, subject.metadata.targetName)\n                .whereInIds(parentId)\n                .getRawOne()\n                .then(result => result ? result[\"path\"] : undefined);\n        }\n\n        const insertedEntityId = subject.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n            return joinColumn.referencedColumn!.getEntityValue(subject.insertedValueSet!);\n        }).join(\"_\");\n\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n                [subject.metadata.materializedPathColumn!.propertyPath]: parentPath + insertedEntityId + \".\"\n            } as any)\n            .where(subject.identifier!)\n            .execute();\n    }\n\n}\n","import {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Subject} from \"./Subject\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {SubjectTopoligicalSorter} from \"./SubjectTopoligicalSorter\";\nimport {SubjectChangedColumnsComputer} from \"./SubjectChangedColumnsComputer\";\nimport {SubjectWithoutIdentifierError} from \"../error/SubjectWithoutIdentifierError\";\nimport {SubjectRemovedAndUpdatedError} from \"../error/SubjectRemovedAndUpdatedError\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {NestedSetSubjectExecutor} from \"./tree/NestedSetSubjectExecutor\";\nimport {ClosureSubjectExecutor} from \"./tree/ClosureSubjectExecutor\";\nimport {MaterializedPathSubjectExecutor} from \"./tree/MaterializedPathSubjectExecutor\";\nimport {OrmUtils} from \"../util/OrmUtils\";\n\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nexport class SubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\n     */\n    hasExecutableOperations: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryRunner used to execute all queries with a given subjects.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * Persistence options.\n     */\n    protected options?: SaveOptions & RemoveOptions;\n\n    /**\n     * All subjects that needs to be operated.\n     */\n    protected allSubjects: Subject[];\n\n    /**\n     * Subjects that must be inserted.\n     */\n    protected insertSubjects: Subject[] = [];\n\n    /**\n     * Subjects that must be updated.\n     */\n    protected updateSubjects: Subject[] = [];\n\n    /**\n     * Subjects that must be removed.\n     */\n    protected removeSubjects: Subject[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(queryRunner: QueryRunner, subjects: Subject[], options?: SaveOptions & RemoveOptions) {\n        this.queryRunner = queryRunner;\n        this.allSubjects = subjects;\n        this.options = options;\n        this.validate();\n        this.recompute();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    async execute(): Promise<void> {\n        // console.time(\"SubjectExecutor.execute\");\n\n        // broadcast \"before\" events before we start insert / update / remove operations\n        let broadcasterResult: BroadcasterResult | undefined = undefined;\n        if (!this.options || this.options.listeners !== false) {\n            // console.time(\".broadcastBeforeEventsForAll\");\n            broadcasterResult = this.broadcastBeforeEventsForAll();\n            if (broadcasterResult.promises.length > 0) await Promise.all(broadcasterResult.promises);\n            // console.timeEnd(\".broadcastBeforeEventsForAll\");\n        }\n\n        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\n        // recompute only in the case if any listener or subscriber was really executed\n        if (broadcasterResult && broadcasterResult.count > 0) {\n            // console.time(\".recompute\");\n            this.insertSubjects.forEach(subject => subject.recompute());\n            this.updateSubjects.forEach(subject => subject.recompute());\n            this.removeSubjects.forEach(subject => subject.recompute());\n            this.recompute();\n            // console.timeEnd(\".recompute\");\n        }\n\n        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\n\n        // console.timeEnd(\"prepare\");\n\n        // execute all insert operations\n        // console.time(\".insertion\");\n        this.insertSubjects = new SubjectTopoligicalSorter(this.insertSubjects).sort(\"insert\");\n        await this.executeInsertOperations();\n        // console.timeEnd(\".insertion\");\n\n        // recompute update operations since insertion can create updation operations for the\n        // properties it wasn't able to handle on its own (referenced columns)\n        this.updateSubjects = this.allSubjects.filter(subject => subject.mustBeUpdated);\n\n        // execute update operations\n        // console.time(\".updation\");\n        await this.executeUpdateOperations();\n        // console.timeEnd(\".updation\");\n\n        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\n        // console.time(\".removal\");\n        this.removeSubjects = new SubjectTopoligicalSorter(this.removeSubjects).sort(\"delete\");\n        await this.executeRemoveOperations();\n        // console.timeEnd(\".removal\");\n\n        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n        await this.updateSpecialColumnsInPersistedEntities();\n        // console.timeEnd(\".updateSpecialColumnsInPersistedEntities\");\n\n        // finally broadcast \"after\" events after we finish insert / update / remove operations\n        if (!this.options || this.options.listeners !== false) {\n            // console.time(\".broadcastAfterEventsForAll\");\n            broadcasterResult = this.broadcastAfterEventsForAll();\n            if (broadcasterResult.promises.length > 0) await Promise.all(broadcasterResult.promises);\n            // console.timeEnd(\".broadcastAfterEventsForAll\");\n        }\n        // console.timeEnd(\"SubjectExecutor.execute\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given subjects.\n     */\n    protected validate() {\n        this.allSubjects.forEach(subject => {\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\n                throw new SubjectRemovedAndUpdatedError(subject);\n        });\n    }\n\n    /**\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\n     */\n    protected recompute(): void {\n        new SubjectChangedColumnsComputer().compute(this.allSubjects);\n        this.insertSubjects = this.allSubjects.filter(subject => subject.mustBeInserted);\n        this.updateSubjects = this.allSubjects.filter(subject => subject.mustBeUpdated);\n        this.removeSubjects = this.allSubjects.filter(subject => subject.mustBeRemoved);\n        this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0;\n    }\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    protected broadcastBeforeEventsForAll(): BroadcasterResult {\n        const result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity!));\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity!, subject.databaseEntity));\n        return result;\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     * Returns void if there wasn't any listener or subscriber executed.\n     * Note: this method has a performance-optimized code organization.\n     */\n    protected broadcastAfterEventsForAll(): BroadcasterResult {\n        const result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity!));\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity!, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(subject => this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity!, subject.databaseEntity));\n        return result;\n    }\n\n    /**\n     * Executes insert operations.\n     */\n    protected async executeInsertOperations(): Promise<void> {\n        // group insertion subjects to make bulk insertions\n        const [groupedInsertSubjects, groupedInsertSubjectKeys] = this.groupBulkSubjects(this.insertSubjects, \"insert\");\n\n        // then we run insertion in the sequential order which is important since we have an ordered subjects\n        await PromiseUtils.runInSequence(groupedInsertSubjectKeys, async groupName => {\n            const subjects = groupedInsertSubjects[groupName];\n\n            // we must separately insert entities which does not have any values to insert\n            // because its not possible to insert multiple entities with only default values in bulk\n            const bulkInsertMaps: ObjectLiteral[] = [];\n            const bulkInsertSubjects: Subject[] = [];\n            const singleInsertSubjects: Subject[] = [];\n            if (this.queryRunner.connection.driver instanceof MongoDriver) {\n                subjects.forEach(subject => {\n                    if (subject.metadata.createDateColumn && subject.entity) {\n                        subject.entity[subject.metadata.createDateColumn.databaseName] = new Date();\n                    }\n\n                    if (subject.metadata.updateDateColumn && subject.entity) {\n                        subject.entity[subject.metadata.updateDateColumn.databaseName] = new Date();\n                    }\n\n                    subject.createValueSetAndPopChangeMap();\n\n                    bulkInsertSubjects.push(subject);\n                    bulkInsertMaps.push(subject.entity!);\n                });\n            } else if (this.queryRunner.connection.driver instanceof OracleDriver) {\n                subjects.forEach(subject => {\n                    singleInsertSubjects.push(subject);\n                });\n            } else {\n                subjects.forEach(subject => {\n\n                    // we do not insert in bulk in following cases:\n                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\n                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\n                    // - when oracle is used, since oracle's bulk insertion is very bad\n                    if (subject.changeMaps.length === 0 ||\n                        subject.metadata.treeType ||\n                        this.queryRunner.connection.driver instanceof OracleDriver) {\n                        singleInsertSubjects.push(subject);\n\n                    } else {\n                        bulkInsertSubjects.push(subject);\n                        bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());\n                    }\n                });\n            }\n\n            // for mongodb we have a bit different insertion logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const manager = this.queryRunner.manager as MongoEntityManager;\n                const insertResult = await manager.insert(subjects[0].metadata.target, bulkInsertMaps);\n                subjects.forEach((subject, index) => {\n                    subject.identifier = insertResult.identifiers[index];\n                    subject.generatedMap = insertResult.generatedMaps[index];\n                    subject.insertedValueSet = bulkInsertMaps[index];\n                });\n\n            } else {\n\n                // here we execute our insertion query\n                // we need to enable entity updation because we DO need to have updated insertedMap\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                if (bulkInsertMaps.length > 0) {\n                    const insertResult = await this.queryRunner\n                        .manager\n                        .createQueryBuilder()\n                        .insert()\n                        .into(subjects[0].metadata.target)\n                        .values(bulkInsertMaps)\n                        .updateEntity(this.options && this.options.reload === false ? false : true)\n                        .callListeners(false)\n                        .execute();\n\n                    bulkInsertSubjects.forEach((subject, index) => {\n                        subject.identifier = insertResult.identifiers[index];\n                        subject.generatedMap = insertResult.generatedMaps[index];\n                        subject.insertedValueSet = bulkInsertMaps[index];\n                    });\n                }\n\n                // insert subjects which must be inserted in separate requests (all default values)\n                if (singleInsertSubjects.length > 0) {\n                    await PromiseUtils.runInSequence(singleInsertSubjects, async subject => {\n                        subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it\n\n                        // for nested set we execute additional queries\n                        if (subject.metadata.treeType === \"nested-set\")\n                            await new NestedSetSubjectExecutor(this.queryRunner).insert(subject);\n\n                        await this.queryRunner\n                            .manager\n                            .createQueryBuilder()\n                            .insert()\n                            .into(subject.metadata.target)\n                            .values(subject.insertedValueSet)\n                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                            .callListeners(false)\n                            .execute()\n                            .then(insertResult => {\n                                subject.identifier = insertResult.identifiers[0];\n                                subject.generatedMap = insertResult.generatedMaps[0];\n                            });\n\n                        // for tree tables we execute additional queries\n                        if (subject.metadata.treeType === \"closure-table\") {\n                            await new ClosureSubjectExecutor(this.queryRunner).insert(subject);\n\n                        } else if (subject.metadata.treeType === \"materialized-path\") {\n                            await new MaterializedPathSubjectExecutor(this.queryRunner).insert(subject);\n                        }\n                    });\n                }\n            }\n\n            subjects.forEach(subject => {\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach(column => {\n                        const value = column.getEntityValue(subject.generatedMap!);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap!, preparedValue);\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Updates all given subjects in the database.\n     */\n    protected async executeUpdateOperations(): Promise<void> {\n        await Promise.all(this.updateSubjects.map(async subject => {\n\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n\n            // for mongodb we have a bit different updation logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const partialEntity = OrmUtils.mergeDeep({}, subject.entity!);\n                if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n\n                if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n\n                if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n\n                const manager = this.queryRunner.manager as MongoEntityManager;\n\n                await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n\n            } else {\n\n                const updateMap: ObjectLiteral = subject.createValueSetAndPopChangeMap();\n\n                // here we execute our updation query\n                // we need to enable entity updation because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const updateQueryBuilder = this.queryRunner\n                    .manager\n                    .createQueryBuilder()\n                    .update(subject.metadata.target)\n                    .set(updateMap)\n                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                    .callListeners(false);\n\n                if (subject.entity) {\n                    updateQueryBuilder.whereEntity(subject.identifier);\n\n                } else { // in this case identifier is just conditions object to update by\n                    updateQueryBuilder.where(subject.identifier);\n                }\n\n                const updateResult = await updateQueryBuilder.execute();\n                subject.generatedMap = updateResult.generatedMaps[0];\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach(column => {\n                        const value = column.getEntityValue(subject.generatedMap!);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap!, preparedValue);\n                        }\n                    });\n                }\n\n                // experiments, remove probably, need to implement tree tables children removal\n                // if (subject.updatedRelationMaps.length > 0) {\n                //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\n                //         if (!updatedRelation.relation.isTreeParent) return;\n                //         if (!updatedRelation.value !== null) return;\n                //\n                //         if (subject.metadata.treeType === \"closure-table\") {\n                //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\n                //         }\n                //     }));\n                // }\n            }\n        }));\n    }\n\n    /**\n     * Removes all given subjects from the database.\n     *\n     * todo: we need to apply topological sort here as well\n     */\n    protected async executeRemoveOperations(): Promise<void> {\n        // group insertion subjects to make bulk insertions\n        const [groupedRemoveSubjects, groupedRemoveSubjectKeys] = this.groupBulkSubjects(this.removeSubjects, \"delete\");\n\n        await PromiseUtils.runInSequence(groupedRemoveSubjectKeys, async groupName => {\n            const subjects = groupedRemoveSubjects[groupName];\n            const deleteMaps = subjects.map(subject => {\n                if (!subject.identifier)\n                    throw new SubjectWithoutIdentifierError(subject);\n\n                return subject.identifier;\n            });\n\n            // for mongodb we have a bit different updation logic\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                const manager = this.queryRunner.manager as MongoEntityManager;\n                await manager.delete(subjects[0].metadata.target, deleteMaps);\n\n            } else {\n\n                // here we execute our deletion query\n                // we don't need to specify entities and set update entity to true since the only thing query builder\n                // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                // also, we disable listeners because we call them on our own in persistence layer\n                await this.queryRunner\n                    .manager\n                    .createQueryBuilder()\n                    .delete()\n                    .from(subjects[0].metadata.target)\n                    .where(deleteMaps)\n                    .callListeners(false)\n                    .execute();\n            }\n        });\n    }\n\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    protected updateSpecialColumnsInPersistedEntities(): void {\n\n        // update inserted entity properties\n        if (this.insertSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);\n\n        // update updated entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);\n\n        // remove ids from the entities that were removed\n        if (this.removeSubjects.length) {\n            this.removeSubjects.forEach(subject => {\n                if (!subject.entity) return;\n\n                subject.metadata.primaryColumns.forEach(primaryColumn => {\n                    primaryColumn.setEntityValue(subject.entity!, undefined);\n                });\n            });\n        }\n\n        // other post-persist updations\n        this.allSubjects.forEach(subject => {\n            if (!subject.entity) return;\n\n            subject.metadata.relationIds.forEach(relationId => {\n                relationId.setValue(subject.entity!);\n            });\n\n            // mongo _id remove\n            if (this.queryRunner instanceof MongoQueryRunner) {\n                if (subject.metadata.objectIdColumn\n                    && subject.metadata.objectIdColumn.databaseName\n                    && subject.metadata.objectIdColumn.databaseName !== subject.metadata.objectIdColumn.propertyName\n                ) {\n                    delete subject.entity[subject.metadata.objectIdColumn.databaseName];\n                }\n            }\n        });\n    }\n\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    protected updateSpecialColumnsInInsertedAndUpdatedEntities(subjects: Subject[]): void {\n        subjects.forEach(subject => {\n            if (!subject.entity) return;\n\n            // set values to \"null\" for nullable columns that did not have values\n            subject.metadata.columns.forEach(column => {\n\n                // if table inheritance is used make sure this column is not child's column\n                if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)\n                    return;\n\n                // entities does not have virtual columns\n                if (column.isVirtual)\n                    return;\n\n                // update nullable columns\n                if (column.isNullable) {\n                    const columnValue = column.getEntityValue(subject.entity!);\n                    if (columnValue === undefined)\n                        column.setEntityValue(subject.entity!, null);\n                }\n\n                // update relational columns\n                if (subject.updatedRelationMaps.length > 0) {\n                    subject.updatedRelationMaps.forEach(updatedRelationMap => {\n                        updatedRelationMap.relation.joinColumns.forEach(column => {\n                            if (column.isVirtual === true)\n                                return;\n\n                            column.setEntityValue(subject.entity!, updatedRelationMap.value instanceof Object ? column.referencedColumn!.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);\n                        });\n                    });\n                }\n            });\n\n            // merge into entity all generated values returned by a database\n            if (subject.generatedMap)\n                this.queryRunner.manager.merge(subject.metadata.target as any, subject.entity, subject.generatedMap);\n        });\n    }\n\n    /**\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\n     * That's why we only support bulking in junction tables for those drivers.\n     *\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\n     */\n    protected groupBulkSubjects(subjects: Subject[], type: \"insert\" | \"delete\"): [{ [key: string]: Subject[] }, string[]] {\n        const group: { [key: string]: Subject[] } = {};\n        const keys: string[] = [];\n        const groupingAllowed = type === \"delete\" || this.queryRunner.connection.driver.isReturningSqlSupported();\n\n        subjects.forEach((subject, index) => {\n            const key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + \"_\" + index;\n            if (!group[key]) {\n                group[key] = [subject];\n                keys.push(key);\n            } else {\n                group[key].push(subject);\n            }\n        });\n\n        return [group, keys];\n    }\n\n}\n","/**\n * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.\n */\nexport class CannotDetermineEntityError extends Error {\n    name = \"CannotDetermineEntityError\";\n\n    constructor(operation: string) {\n        super();\n        Object.setPrototypeOf(this, CannotDetermineEntityError.prototype);\n        this.message = `Cannot ${operation}, given value must be instance of entity class, instead object literal is given. Or you must specify an entity target to method call.`;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SubjectChangeMap} from \"./SubjectChangeMap\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata;\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral|undefined = undefined;\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral|undefined = undefined;\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject;\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral;\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral;\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false;\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = [];\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral;\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral;\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false;\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false;\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false;\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: { relation: RelationMetadata, value: ObjectLiteral }[] = [];\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = [];\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata,\n        parentSubject?: Subject,\n        entity?: ObjectLiteral,\n        canBeInserted?: boolean,\n        canBeUpdated?: boolean,\n        mustBeRemoved?: boolean,\n        identifier?: ObjectLiteral,\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata;\n        this.entity = options.entity;\n        this.parentSubject = options.parentSubject;\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted;\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated;\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved;\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier;\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps);\n\n        this.recompute();\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity;\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            this.changeMaps.length > 0;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = [];\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value;\n            if (value instanceof Subject) {\n\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet ? value.insertedValueSet : value.entity;\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral|undefined;\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn!.getEntityValue(value));\n\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value);\n\n            } else if (changeMap.relation) {\n\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (value instanceof Object) {\n\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId = changeMap.relation!.getRelationIdMap(value);\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap);\n                        this.canBeUpdated = true;\n                        return updateMap;\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId);\n                    this.updatedRelationMaps.push({ relation: changeMap.relation, value: relationId });\n\n                } else { // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value);\n                    this.updatedRelationMaps.push({ relation: changeMap.relation, value: value });\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap);\n            return updateMap;\n        }, {} as ObjectLiteral);\n        this.changeMaps = changeMapsWithoutValues;\n        return changeSet;\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity);\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach(primaryColumn => {\n                    if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === this.parentSubject!.metadata) {\n                        primaryColumn.setEntityValue(this.entityWithFulfilledIds!, this.parentSubject!.entity);\n                    }\n                });\n            }\n            this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n        }\n    }\n\n}\n","import {Subject} from \"../Subject\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n * Builds operations needs to be executed for one-to-many relations of the given subjects.\n *\n * by example: post contains one-to-many relation with category in the property called \"categories\", e.g.\n *             @OneToMany(type => Category, category => category.post) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToManySubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds all required operations.\n     */\n    build(): void {\n        this.subjects.forEach(subject => {\n            subject.metadata.oneToManyRelations.forEach(relation => {\n\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\n\n        // prepare objects (relation id maps) for the database entity\n        // note: subject.databaseEntity contains relations with loaded relation ids only\n        // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,\n        //             particularly their relation ids, e.g. category ids stored in the database\n        let relatedEntityDatabaseRelationIds: ObjectLiteral[] = [];\n        if (subject.databaseEntity) { // related entities in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationIds = relation.getEntityValue(subject.databaseEntity);\n        }\n\n        // get related entities of persisted entity\n        // by example: get categories from the passed to persist post entity\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(subject.entity!);\n        if (relatedEntities === null) // we treat relations set to null as removed, so we don't skip it\n            relatedEntities = [] as ObjectLiteral[];\n        if (relatedEntities === undefined) // if relation is undefined then nothing to update\n            return;\n\n        // extract only relation ids from the related entities, since we only need them for comparision\n        // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)\n        const relatedPersistedEntityRelationIds: ObjectLiteral[] = [];\n        relatedEntities.forEach(relatedEntity => { // by example: relatedEntity is a category here\n            let relationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            let relatedEntitySubject = this.subjects.find(subject => {\n                return subject.entity === relatedEntity;\n            });\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relationIdMap = relatedEntitySubject.identifier;\n\n            // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n            // by example: if post contains categories which does not have ids yet (because they are new)\n            //             it means they are always newly inserted and relation update operation always must be created for them\n            //             it does not make sense to perform difference operation for them for both add and remove actions\n            if (!relationIdMap) {\n\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`One-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n\n                // okay, so related subject exist and its marked for insertion, then add a new change map\n                // by example: this will tell category to insert into its post relation our post we are working with\n                //             relatedEntitySubject is newly inserted CategorySubject\n                //             relation.inverseRelation is ManyToOne relation inside Category\n                //             subject is Post needs to be inserted into Category\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation!,\n                    value: subject\n                });\n\n                return;\n            }\n\n            // check if this binding really exist in the database\n            // by example: find our category if its already bind in the database\n            const relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find(relatedDatabaseEntityRelationId => {\n                return OrmUtils.deepCompare(relationIdMap, relatedDatabaseEntityRelationId);\n            });\n\n            // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to \"bind\" them\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is ManyToOne relation inside Category\n            //             subject is Post needs to be inserted into Category\n            if (!relationIdInDatabaseSubjectRelation) {\n\n                // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n                // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n                // we create a new subject here:\n                if (!relatedEntitySubject) {\n                    relatedEntitySubject = new Subject({\n                        metadata: relation.inverseEntityMetadata,\n                        parentSubject: subject,\n                        canBeUpdated: true,\n                        identifier: relationIdMap\n                    });\n                    this.subjects.push(relatedEntitySubject);\n                }\n\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation!,\n                    value: subject\n                });\n            }\n\n            // if related entity has relation id then we add it to the list of relation ids\n            // this list will be used later to compare with database relation ids to find a difference\n            // what exist in this array and does not exist in the database are newly inserted relations\n            // what does not exist in this array, but exist in the database are removed relations\n            // removed relations are set to null from inverse side of relation\n            relatedPersistedEntityRelationIds.push(relationIdMap);\n        });\n\n        // find what related entities were added and what were removed based on difference between what we save and what database has\n        EntityMetadata\n            .difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds)\n            .forEach(removedRelatedEntityRelationId => { // by example: removedRelatedEntityRelationId is category that was bind in the database before, but now its unbind\n\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: removedRelatedEntityRelationId,\n                    changeMaps: [{\n                        relation: relation.inverseRelation!,\n                        value: null\n                    }]\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            });\n    }\n\n}","import {Subject} from \"../Subject\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToOneInverseSideSubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds all required operations.\n     */\n    build(): void {\n        this.subjects.forEach(subject => {\n            subject.metadata.oneToOneRelations.forEach(relation => {\n\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return;\n\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\n\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        let relatedEntityDatabaseRelationId: ObjectLiteral|undefined = undefined;\n        if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);\n\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        let relatedEntity: ObjectLiteral|null = relation.getEntityValue(subject.entity!); // by example: relatedEntity is a category here\n        if (relatedEntity === undefined) // if relation is undefined then nothing to update\n            return;\n\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [{\n                        relation: relation.inverseRelation!,\n                        value: null\n                    }]\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            }\n\n            return;\n        } // else means entity is bind in the database\n\n        // extract only relation id from the related entities, since we only need it for comparision\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        let relationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        let relatedEntitySubject = this.subjects.find(operateSubject => {\n            return !!operateSubject.entity && operateSubject.entity === relatedEntity;\n        });\n\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier;\n\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new Error(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject)\n                return;\n\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation!,\n                value: subject\n            });\n        }\n\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        const areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils.deepCompare(relationIdMap, relatedEntityDatabaseRelationId);\n\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap\n                });\n                this.subjects.push(relatedEntitySubject);\n            }\n\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation!,\n                value: subject\n            });\n        }\n    }\n\n}","import {Subject} from \"../Subject\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach(subject => {\n\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach(relation => {\n\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach(relation => {\n\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] = relation.getEntityValue(subject.databaseEntity!);\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach(relationId => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(subject, relation, relationId)\n                });\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject);\n            });\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\n\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = [];\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(subject.entity!);\n        if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!(relatedEntities instanceof Array))\n            return;\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach(relatedEntity => { // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparision\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity);\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find(subject => {\n                return subject.entity === relatedEntity;\n            });\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(databaseRelatedEntityRelationId => {\n                return EntityMetadata.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n\n            const ownerValue = relation.isOwning ? subject : (relatedEntitySubject || relatedEntity); // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning ? (relatedEntitySubject || relatedEntity) : subject; // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            this.subjects.push(junctionSubject);\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach(column => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                });\n            });\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(column => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                });\n            });\n        });\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = [];\n        relatedEntities.forEach(relatedEntity => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity);\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find(subject => {\n                return subject.entity === relatedEntity;\n            });\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n\n            if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(existRelationId => {\n            return !changedInverseEntityRelationIds.find(changedRelationId => {\n                return EntityMetadata.compareIds(changedRelationId, existRelationId);\n            });\n        });\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach(removedEntityRelationId => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n            });\n            this.subjects.push(junctionSubject);\n        });\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(subject: Subject, relation: RelationMetadata, relationId: ObjectLiteral) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId;\n        const inverseEntityMap = relation.isOwning ? relationId : subject.entity!;\n\n        const identifier: ObjectLiteral = {};\n        relation.junctionEntityMetadata!.ownerColumns.forEach(column => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn!.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata!.inverseColumns.forEach(column => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn!.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    }\n\n}\n","import {Subject} from \"./Subject\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\n\n/**\n * Loads database entities for all operate subjects which do not have database entity set.\n * All entities that we load database entities for are marked as updated or inserted.\n * To understand which of them really needs to be inserted or updated we need to load\n * their original representations from the database.\n */\nexport class SubjectDatabaseEntityLoader {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner,\n                protected subjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Loads database entities for all subjects.\n     *\n     * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.\n     * This option is used for deletion.\n     */\n    async load(operationType: \"save\"|\"remove\"): Promise<void> {\n\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\n        // go through the groups and perform loading of database entities of each subject in the group\n        const promises = this.groupByEntityTargets().map(async subjectGroup => {\n\n            // prepare entity ids of the subjects we need to load\n            const allIds: ObjectLiteral[] = [];\n            const allSubjects: Subject[] = [];\n            subjectGroup.subjects.forEach(subject => {\n\n                // we don't load if subject already has a database entity loaded\n                if (subject.databaseEntity || !subject.identifier)\n                    return;\n\n                allIds.push(subject.identifier);\n                allSubjects.push(subject);\n            });\n\n            // if there no ids found (means all entities are new and have generated ids) - then nothing to load there\n            if (!allIds.length)\n                return;\n\n            const loadRelationPropertyPaths: string[] = [];\n\n            // for the save operation\n            // extract all property paths of the relations we need to load relation ids for\n            // this is for optimization purpose - this way we don't load relation ids for entities\n            // whose relations are undefined, and since they are undefined its really pointless to\n            // load something for them, since undefined properties are skipped by the orm\n            if (operationType === \"save\") {\n                subjectGroup.subjects.forEach(subject => {\n\n                    // gets all relation property paths that exist in the persisted entity.\n                    subject.metadata.relations.forEach(relation => {\n                        const value = relation.getEntityValue(subject.entityWithFulfilledIds!);\n                        if (value === undefined)\n                            return;\n\n                        if (loadRelationPropertyPaths.indexOf(relation.propertyPath) === -1)\n                            loadRelationPropertyPaths.push(relation.propertyPath);\n                    });\n                });\n            } else { // remove\n\n                // for remove operation\n                // we only need to load junction relation ids since only they are removed by cascades\n                loadRelationPropertyPaths.push(...subjectGroup.subjects[0].metadata.manyToManyRelations.map(relation => relation.propertyPath));\n            }\n\n            const findOptions: FindManyOptions<any> = {\n                loadEagerRelations: false,\n                loadRelationIds: {\n                    relations: loadRelationPropertyPaths,\n                    disableMixedMap: true\n                }\n            };\n\n            // load database entities for all given ids\n            const entities = await this.queryRunner.manager\n                .getRepository<ObjectLiteral>(subjectGroup.target)\n                .findByIds(allIds, findOptions);\n\n            // now when we have entities we need to find subject of each entity\n            // and insert that entity into database entity of the found subjects\n            entities.forEach(entity => {\n                const subjects = this.findByPersistEntityLike(subjectGroup.target, entity);\n                subjects.forEach(subject => {\n                  subject.databaseEntity = entity;\n                  if (!subject.identifier)\n                      subject.identifier = subject.metadata.hasAllPrimaryKeys(entity) ? subject.metadata.getEntityIdMap(entity) : undefined;\n                });\n            });\n\n            // this way we tell what subjects we tried to load database entities of\n            for (let subject of allSubjects) {\n                subject.databaseEntityLoaded = true;\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Finds subjects where entity like given subject's entity.\n     * Comparision made by entity id.\n     * Multiple subjects may be returned if duplicates are present in the subject array.\n     * This will likely result in the same row being updated multiple times during a transaction.\n     */\n    protected findByPersistEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject[] {\n        return this.subjects.filter(subject => {\n            if (!subject.entity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds!, entity);\n        });\n    }\n\n    /**\n     * Groups given Subject objects into groups separated by entity targets.\n     */\n    protected groupByEntityTargets(): { target: Function|string, subjects: Subject[] }[] {\n        return this.subjects.reduce((groups, operatedEntity) => {\n            let group = groups.find(group => group.target === operatedEntity.metadata.target);\n            if (!group) {\n                group = { target: operatedEntity.metadata.target, subjects: [] };\n                groups.push(group);\n            }\n            group.subjects.push(operatedEntity);\n            return groups;\n        }, [] as { target: Function|string, subjects: Subject[] }[]);\n    }\n\n}\n","import {Subject} from \"../Subject\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nexport class CascadesSubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected allSubjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    build(subject: Subject) {\n\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity!, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(([relation, relationEntity, relationEntityMetadata]) => {\n\n                // we need only defined values and insert or update cascades of the relation should be set\n                if (relationEntity === undefined ||\n                    relationEntity === null ||\n                    (!relation.isCascadeInsert && !relation.isCascadeUpdate))\n                    return;\n\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we don't really need to check cascades since there is no object to insert or update\n                if (!(relationEntity instanceof Object))\n                    return;\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistRelationEntitySubject = this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n                if (alreadyExistRelationEntitySubject) {\n                    if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet\n                        alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true;\n                    if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet\n                        alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true;\n                    return;\n                }\n\n                // mark subject with what we can do with it\n                // and add to the array of subjects to load only if there is no same entity there already\n                const relationEntitySubject = new Subject({\n                    metadata: relationEntityMetadata,\n                    parentSubject: subject,\n                    entity: relationEntity,\n                    canBeInserted: relation.isCascadeInsert === true,\n                    canBeUpdated: relation.isCascadeUpdate === true\n                });\n                this.allSubjects.push(relationEntitySubject);\n\n                // go recursively and find other entities we need to insert/update\n                this.build(relationEntitySubject);\n            });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    protected findByPersistEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.allSubjects.find(subject => {\n            if (!subject.entity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds!, entity);\n        });\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {MustBeEntityError} from \"../error/MustBeEntityError\";\nimport {SubjectExecutor} from \"./SubjectExecutor\";\nimport {CannotDetermineEntityError} from \"../error/CannotDetermineEntityError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {Subject} from \"./Subject\";\nimport {OneToManySubjectBuilder} from \"./subject-builder/OneToManySubjectBuilder\";\nimport {OneToOneInverseSideSubjectBuilder} from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\nimport {ManyToManySubjectBuilder} from \"./subject-builder/ManyToManySubjectBuilder\";\nimport {SubjectDatabaseEntityLoader} from \"./SubjectDatabaseEntityLoader\";\nimport {CascadesSubjectBuilder} from \"./subject-builder/CascadesSubjectBuilder\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\n\n/**\n * Persists a single entity or multiple entities - saves or removes them.\n */\nexport class EntityPersistExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected mode: \"save\"|\"remove\",\n                protected target: Function|string|undefined,\n                protected entity: ObjectLiteral|ObjectLiteral[],\n                protected options?: SaveOptions & RemoveOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes persistence operation ob given entity or entities.\n     */\n    execute(): Promise<void> {\n\n        // check if entity we are going to save is valid and is an object\n        if (!this.entity || !(this.entity instanceof Object))\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity));\n\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\n        return Promise.resolve().then(async () => {\n\n            // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n            // if its not defined we create a new query runner - single connection where we'll execute all our operations\n            const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n            // save data in the query runner - this is useful functionality to share data from outside of the world\n            // with third classes - like subscribers and listener methods\n            if (this.options && this.options.data)\n                queryRunner.data = this.options.data;\n\n            try {\n\n                // collect all operate subjects\n                const entities: ObjectLiteral[] = this.entity instanceof Array ? this.entity : [this.entity];\n                const entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? OrmUtils.chunk(entities, this.options.chunk) : [entities];\n\n                // console.time(\"building subject executors...\");\n                const executors = await Promise.all(entitiesInChunks.map(async entities => {\n                    const subjects: Subject[] = [];\n\n                    // create subjects for all entities we received for the persistence\n                    entities.forEach(entity => {\n                        const entityTarget = this.target ? this.target : entity.constructor;\n                        if (entityTarget === Object)\n                            throw new CannotDetermineEntityError(this.mode);\n\n                        subjects.push(new Subject({\n                            metadata: this.connection.getMetadata(entityTarget),\n                            entity: entity,\n                            canBeInserted: this.mode === \"save\",\n                            canBeUpdated: this.mode === \"save\",\n                            mustBeRemoved: this.mode === \"remove\"\n                        }));\n                    });\n\n                    // console.time(\"building cascades...\");\n                    // go through each entity with metadata and create subjects and subjects by cascades for them\n                    const cascadesSubjectBuilder = new CascadesSubjectBuilder(subjects);\n                    subjects.forEach(subject => {\n                        // next step we build list of subjects we will operate with\n                        // these subjects are subjects that we need to insert or update alongside with main persisted entity\n                        cascadesSubjectBuilder.build(subject);\n                    });\n                    // console.timeEnd(\"building cascades...\");\n\n                    // load database entities for all subjects we have\n                    // next step is to load database entities for all operate subjects\n                    // console.time(\"loading...\");\n                    await new SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode);\n                    // console.timeEnd(\"loading...\");\n\n                    // console.time(\"other subjects...\");\n                    // build all related subjects and change maps\n                    if (this.mode === \"save\") {\n                        new OneToManySubjectBuilder(subjects).build();\n                        new OneToOneInverseSideSubjectBuilder(subjects).build();\n                        new ManyToManySubjectBuilder(subjects).build();\n                    } else {\n                        subjects.forEach(subject => {\n                            if (subject.mustBeRemoved) {\n                                new ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);\n                            }\n                        });\n                    }\n                    // console.timeEnd(\"other subjects...\");\n                    // console.timeEnd(\"building subjects...\");\n                    // console.log(\"subjects\", subjects);\n\n                    // create a subject executor\n                    return new SubjectExecutor(queryRunner, subjects, this.options);\n                }));\n                // console.timeEnd(\"building subject executors...\");\n\n                // make sure we have at least one executable operation before we create a transaction and proceed\n                // if we don't have operations it means we don't really need to update or remove something\n                const executorsWithExecutableOperations = executors.filter(executor => executor.hasExecutableOperations);\n                if (executorsWithExecutableOperations.length === 0)\n                    return;\n\n                // start execute queries in a transaction\n                // if transaction is already opened in this query runner then we don't touch it\n                // if its not opened yet then we open it here, and once we finish - we close it\n                let isTransactionStartedByUs = false;\n                try {\n\n                    // open transaction if its not opened yet\n                    if (!queryRunner.isTransactionActive) {\n                        if (!this.options || this.options.transaction !== false) { // start transaction until it was not explicitly disabled\n                            isTransactionStartedByUs = true;\n                            await queryRunner.startTransaction();\n                        }\n                    }\n\n                    // execute all persistence operations for all entities we have\n                    // console.time(\"executing subject executors...\");\n                    await PromiseUtils.runInSequence(executorsWithExecutableOperations, executor => executor.execute());\n                    // console.timeEnd(\"executing subject executors...\");\n\n                    // commit transaction if it was started by us\n                    // console.time(\"commit\");\n                    if (isTransactionStartedByUs === true)\n                        await queryRunner.commitTransaction();\n                    // console.timeEnd(\"commit\");\n\n                } catch (error) {\n\n                    // rollback transaction if it was started by us\n                    if (isTransactionStartedByUs) {\n                        try {\n                            await queryRunner.rollbackTransaction();\n                        } catch (rollbackError) { }\n                    }\n                    throw error;\n                }\n\n            } finally {\n\n                // release query runner only if its created by us\n                if (!this.queryRunner)\n                    await queryRunner.release();\n            }\n        });\n    }\n\n}\n","import {Connection} from \"../connection/Connection\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityNotFoundError} from \"../error/EntityNotFoundError\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {NoNeedToReleaseEntityManagerError} from \"../error/NoNeedToReleaseEntityManagerError\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {Repository} from \"../repository/Repository\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\nimport {EntitySchema, getMetadataArgsStorage, ObjectLiteral} from \"../index\";\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../error/CustomRepositoryCannotInheritRepositoryError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {RepositoryNotFoundError} from \"../error/RepositoryNotFoundError\";\nimport {RepositoryNotTreeError} from \"../error/RepositoryNotTreeError\";\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\nimport {TreeRepositoryNotSupportedError} from \"../error/TreeRepositoryNotSupportedError\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {EntityPersistExecutor} from \"../persistence/EntityPersistExecutor\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {FindConditions} from \"../find-options/FindConditions\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by en repositories.\n     */\n    protected repositories: Repository<any>[] = [];\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this });\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction: IsolationLevel | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>\n    ): Promise<T> {\n\n        const isolation = typeof isolationOrRunInTransaction === \"string\" ? isolationOrRunInTransaction : undefined;\n        const runInTransaction = typeof isolationOrRunInTransaction === \"function\" ? isolationOrRunInTransaction : runInTransactionParam;\n\n        if (!runInTransaction) {\n            throw new Error(`Transaction method requires callback in second paramter if isolation level is supplied.`);\n        }\n\n        if (this.connection.driver instanceof MongoDriver)\n            throw new Error(`Transactions aren't supported by MongoDB.`);\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        if (this.queryRunner && this.queryRunner.isTransactionActive)\n            throw new Error(`Cannot start transaction because its already started`);\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n        try {\n            if (isolation) {\n                await queryRunner.startTransaction(isolation);\n              } else {\n                await queryRunner.startTransaction();\n              }\n            const result = await runInTransaction(queryRunner.manager);\n            await queryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            try { // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw err;\n\n        } finally {\n            if (!this.queryRunner) // if we used a new query runner provider then release it\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.connection.query(query, parameters, this.queryRunner);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: EntitySchema<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityName: string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|EntitySchema<Entity>|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass as EntitySchema<Entity>|string, alias, queryRunner || this.queryRunner);\n\n        } else {\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || queryRunner || this.queryRunner);\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function|string, entity: any): boolean;\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: Function|string, entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>, plainObject?: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjects?: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entitySchema: EntitySchema<Entity>, plainObject?: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entitySchema: EntitySchema<Entity>, plainObjects?: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityName: string, plainObject?: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityName: string, plainObjects?: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        const metadata = this.connection.getMetadata(entityClass);\n\n        if (!plainObjectOrObjects)\n            return metadata.create(this.queryRunner);\n\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass as any, plainEntityLike));\n\n        const mergeIntoEntity = metadata.create(this.queryRunner);\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: ObjectType<Entity>, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity;\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entitySchema: EntitySchema<Entity>, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity;\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityName: string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity;\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        entityLikes.forEach(object => this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload<Entity>(entityClass: ObjectType<Entity>, entityLike: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload<Entity>(entitySchema: EntitySchema<Entity>, entityLike: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload(entityName: string, entityLike: DeepPartial<any>): Promise<any|undefined>;\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity)\n            return this.merge(entityClass as any, transformedEntity as Entity, entityLike);\n\n        return undefined;\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T>(targetOrEntity: string, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T>(targetOrEntity: string, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|ObjectType<Entity>|EntitySchema<Entity>|string, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\n\n        // normalize mixed parameters\n        let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: EntitySchema<Entity>, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: EntitySchema<Entity>, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\n\n        // normalize mixed parameters\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n\n        // TODO: Oracle does not support multiple values. Need to create another nice solution.\n        if (this.connection.driver instanceof OracleDriver && entity instanceof Array) {\n            const results = await Promise.all(entity.map(entity => this.insert(target, entity)));\n            return results.reduce((mergedResult, result) => Object.assign(mergedResult, result), {} as InsertResult);\n        }\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute();\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|any, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (criteria instanceof Array && criteria.length === 0)) {\n\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the update method.`));\n        }\n\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            criteria instanceof Array) {\n\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute();\n\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>|string, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|any): Promise<DeleteResult> {\n\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (criteria instanceof Array && criteria.length === 0)) {\n\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            criteria instanceof Array) {\n\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, options?: FindOneOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: EntitySchema<Entity>, options?: FindOneOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: string, options?: FindOneOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: EntitySchema<Entity>, conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: string, conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    async count<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|any): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entitySchema: EntitySchema<Entity>, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entitySchema: EntitySchema<Entity>, conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: string, conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|any): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: EntitySchema<Entity>, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions?: FindConditions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: EntitySchema<Entity>, conditions?: FindConditions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: string, conditions?: FindConditions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|any): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: EntitySchema<Entity>, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: EntitySchema<Entity>, ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: string, ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    async findByIds<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|any): Promise<Entity[]> {\n\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length)\n            return Promise.resolve([]);\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n\n        return qb.andWhereInIds(ids).getMany();\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: EntitySchema<Entity>, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: string, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: EntitySchema<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: EntitySchema<Entity>, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: string, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, idOrOptionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|any, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n\n        let findOptions: FindManyOptions<any>|FindOneOptions<any>|undefined = undefined;\n        if (FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {\n            findOptions = idOrOptionsOrConditions;\n        } else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions)) {\n            findOptions = maybeOptions;\n        }\n\n        let options: ObjectLiteral|undefined = undefined;\n        if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))\n            options = idOrOptionsOrConditions as ObjectLiteral;\n\n        const metadata = this.connection.getMetadata(entityClass);\n        let alias: string = metadata.name;\n        if (findOptions && findOptions.join) {\n            alias = findOptions.join.alias;\n\n        } else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {\n            alias = maybeOptions.join.alias;\n        }\n        const qb = this.createQueryBuilder<Entity>(entityClass as any, alias);\n\n        if (!findOptions || findOptions.loadEagerRelations !== false)\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias!.metadata);\n\n        findOptions = {\n            ...(findOptions || {}),\n            take: 1,\n        };\n\n        FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n\n        if (options) {\n            qb.where(options);\n\n        } else if (typeof idOrOptionsOrConditions === \"string\" || typeof idOrOptionsOrConditions === \"number\" || (idOrOptionsOrConditions as any) instanceof Date) {\n            qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));\n        }\n\n        return qb.getOne();\n    }\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: ObjectType<Entity>, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntitySchema<Entity>, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: string, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: ObjectType<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntitySchema<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given find options or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: string, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: ObjectType<Entity>, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: EntitySchema<Entity>, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    findOneOrFail<Entity>(entityClass: string, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    async findOneOrFail<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, idOrOptionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|any, maybeOptions?: FindOneOptions<Entity>): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, idOrOptionsOrConditions as any, maybeOptions).then((value) => {\n            if (value === undefined) {\n                return Promise.reject(new EntityNotFoundError(entityClass, idOrOptionsOrConditions));\n            }\n            return Promise.resolve(value);\n        });\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n        try {\n            return await queryRunner.clearTable(metadata.tablePath); // await is needed here because we are using finally\n\n        } finally {\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string,\n                            conditions: any,\n                            propertyPath: string,\n                            value: number | string): Promise<UpdateResult> {\n\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\n        if (!column)\n            throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n\n        if (isNaN(Number(value)))\n            throw new Error(`Value \"${value}\" is not a number.`);\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value }) as any,\n                () => this.connection.driver.escape(column.databaseName) + \" + \" + value\n            );\n\n        return this\n            .createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute();\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string,\n                            conditions: any,\n                            propertyPath: string,\n                            value: number | string): Promise<UpdateResult> {\n\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\n        if (!column)\n            throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n\n        if (isNaN(Number(value)))\n            throw new Error(`Value \"${value}\" is not a number.`);\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value }) as any,\n                () => this.connection.driver.escape(column.databaseName) + \" - \" + value\n            );\n\n        return this\n            .createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute();\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): Repository<Entity> {\n\n        // throw exception if there is no repository with this target registered\n        if (!this.connection.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.connection.name, target);\n\n        // find already created repository instance and return it if found\n        const metadata = this.connection.getMetadata(target);\n        const repository = this.repositories.find(repository => repository.metadata === metadata);\n        if (repository)\n            return repository;\n\n        // if repository was not found then create it, store its instance and return it\n        const newRepository = new RepositoryFactory().create(this, metadata, this.queryRunner);\n        this.repositories.push(newRepository);\n        return newRepository;\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): TreeRepository<Entity> {\n\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\n\n        // check if repository is real tree repository\n        const repository = this.getRepository(target);\n        if (!(repository instanceof TreeRepository))\n            throw new RepositoryNotTreeError(target);\n\n        return repository;\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target);\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n\n            (entityRepositoryInstance as any)[\"manager\"] = this;\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\n        }\n\n        return entityRepositoryInstance;\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner)\n            throw new NoNeedToReleaseEntityManagerError();\n\n        return this.queryRunner.release();\n    }\n}\n","import {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"./EntityManager\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\n\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nexport class SqljsEntityManager extends EntityManager {\n    private driver: SqljsDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        super(connection, queryRunner);\n        this.driver = connection.driver as SqljsDriver;\n    }\n    \n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    async loadDatabase(fileNameOrLocalStorageOrData: string | Uint8Array): Promise<void> {\n        await this.driver.load(fileNameOrLocalStorageOrData);\n    }\n    \n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\n        await this.driver.save(fileNameOrLocalStorage);\n    }\n\n    /**\n     * Returns the current database definition.\n     */\n    exportDatabase(): Uint8Array {\n        return this.driver.export();\n    }\n\n }","import {FindOperatorType} from \"./FindOperatorType\";\nimport {Connection} from \"../\";\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    private _type: FindOperatorType;\n\n    /**\n     * Parameter value.\n     */\n    private _value: T|FindOperator<T>;\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean;\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(type: FindOperatorType, value: T|FindOperator<T>, useParameter: boolean = true, multipleParameters: boolean = false) {\n        this._type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.useParameter;\n\n        return this._useParameter;\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.multipleParameters;\n\n        return this._multipleParameters;\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T {\n        if (this._value instanceof FindOperator)\n            return this._value.value;\n\n        return this._value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets SQL needs to be inserted into final query.\n     */\n    toSql(connection: Connection, aliasPath: string, parameters: string[]): string {\n        switch (this._type) {\n            case \"not\":\n                if (this._value instanceof FindOperator) {\n                    return `NOT(${this._value.toSql(connection, aliasPath, parameters)})`;\n                } else {\n                    return `${aliasPath} != ${parameters[0]}`;\n                }\n            case \"lessThan\":\n                return `${aliasPath} < ${parameters[0]}`;\n            case \"lessThanOrEqual\":\n                return `${aliasPath} <= ${parameters[0]}`;\n            case \"moreThan\":\n                return `${aliasPath} > ${parameters[0]}`;\n            case \"moreThanOrEqual\":\n                return `${aliasPath} >= ${parameters[0]}`;\n            case \"equal\":\n                return `${aliasPath} = ${parameters[0]}`;\n            case \"like\":\n                return `${aliasPath} LIKE ${parameters[0]}`;\n            case \"between\":\n                return `${aliasPath} BETWEEN ${parameters[0]} AND ${parameters[1]}`;\n            case \"in\":\n                return `${aliasPath} IN (${parameters.join(\", \")})`;\n            case \"any\":\n                return `${aliasPath} = ANY(${parameters[0]})`;\n            case \"isNull\":\n                return `${aliasPath} IS NULL`;\n            case \"raw\":\n                if (this.value instanceof Function) {\n                    return this.value(aliasPath);\n                } else {\n                    return `${aliasPath} = ${this.value}`;\n                }\n        }\n\n        return \"\";\n    }\n\n}","import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {ValueTransformer} from \"../decorator/options/ValueTransformer\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {FindOperator} from \"../find-options/FindOperator\";\nimport {ApplyValueTransformers} from \"../util/ApplyValueTransformers\";\n\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class where column decorator is used.\n     * This may not be always equal to entity metadata (for example embeds or inheritance cases).\n     */\n    target: Function|string;\n\n    /**\n     * Entity metadata where this column metadata is.\n     *\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata where this column metadata is.\n     * If this column is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * If column is a foreign key of some relation then this relation's metadata will be there.\n     * If this column does not have a foreign key then this property value is undefined.\n     */\n    relationMetadata?: RelationMetadata;\n\n    /**\n     * Class's property name on which this column is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The database type of the column.\n     */\n    type: ColumnType;\n\n    /**\n     * Type's length in the database.\n     */\n    length: string = \"\";\n\n    /**\n     * Type's display width in the database.\n     */\n    width?: number;\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string;\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string;\n\n    /**\n     * Indicates if this column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if this column is generated (auto increment or generated other way).\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Indicates if column can contain nulls or not.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is selected by query builder or not.\n     */\n    isSelect: boolean = true;\n\n    /**\n     * Indicates if column is inserted by default or not.\n     */\n    isInsert: boolean = true;\n\n    /**\n     * Indicates if column allows updates or not.\n     */\n    isUpdate: boolean = true;\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     */\n    generationStrategy?: \"uuid\"|\"increment\"|\"rowid\";\n\n    /**\n     * Column comment.\n     * This feature is not supported by all databases.\n     */\n    comment: string = \"\";\n\n    /**\n     * Default database value.\n     */\n    default?: any;\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\n     * which is the maximum number of digits that are stored for the values.\n     */\n    precision?: number|null;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false;\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false;\n\n    /**\n     * Array of possible enumerated values.\n     *\n     * `postgres` and `mysql` store enum values as strings but we want to keep support\n     * for numeric and heterogeneous based typescript enums, so we need (string|number)[]\n     */\n    enum?: (string|number)[];\n\n    /**\n     * Generated column expression. Supports only in MySQL.\n     */\n    asExpression?: string;\n\n    /**\n     * Generated column type. Supports only in MySQL.\n     */\n    generatedType?: \"VIRTUAL\"|\"STORED\";\n\n    /**\n     * Return type of HSTORE column.\n     * Returns value as string or as object.\n     */\n    hstoreType?: \"object\"|\"string\";\n\n    /**\n     * Indicates if this column is an array.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Gets full path to this column property (including column property name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string;\n\n    /**\n     * Same as property path, but dots are replaced with '_'.\n     * Used in query builder statements.\n     */\n    propertyAliasName: string;\n\n    /**\n     * Gets full path to this column database name (including column database name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just database name of the column.\n     */\n    databasePath: string;\n\n    /**\n     * Complete column name in the database including its embedded prefixes.\n     */\n    databaseName: string;\n\n    /**\n     * Database name in the database without embedded prefixes applied.\n     */\n    databaseNameWithoutPrefixes: string;\n\n    /**\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\n     */\n    givenDatabaseName?: string;\n\n    /**\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n     */\n    isVirtual: boolean = false;\n\n    /**\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n     */\n    isDiscriminator: boolean = false;\n\n    /**\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n     */\n    isTreeLevel: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity creation date.\n     */\n    isCreateDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity update date.\n     */\n    isUpdateDate: boolean = false;\n\n    /**\n     * Indicates if this column contains an entity version.\n     */\n    isVersion: boolean = false;\n\n    /**\n     * Indicates if this column contains an object id.\n     */\n    isObjectId: boolean = false;\n\n    /**\n     * If this column is foreign key then it references some other column,\n     * and this property will contain reference to this column.\n     */\n    referencedColumn: ColumnMetadata|undefined;\n\n    /**\n     * Specifies a value transformer that is to be used to (un)marshal\n     * this column when reading or writing to the database.\n     */\n    transformer?: ValueTransformer|ValueTransformer[];\n\n    /**\n     * Column type in the case if this column is in the closure table.\n     * Column can be ancestor or descendant in the closure tables.\n     */\n    closureType?: \"ancestor\"|\"descendant\";\n\n    /**\n     * Indicates if this column is nested set's left column.\n     * Used only in tree entities with nested-set type.\n     */\n    isNestedSetLeft: boolean = false;\n\n    /**\n     * Indicates if this column is nested set's right column.\n     * Used only in tree entities with nested-set type.\n     */\n    isNestedSetRight: boolean = false;\n\n    /**\n     * Indicates if this column is materialized path's path column.\n     * Used only in tree entities with materialized path type.\n     */\n    isMaterializedPath: boolean = false;\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string;\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: Connection,\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        referencedColumn?: ColumnMetadata,\n        args: ColumnMetadataArgs,\n        closureType?: \"ancestor\"|\"descendant\",\n        nestedSetLeft?: boolean,\n        nestedSetRight?: boolean,\n        materializedPath?: boolean,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata!;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.target)\n            this.target = options.args.target;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = options.args.options.length ? options.args.options.length.toString() : \"\";\n        if (options.args.options.width)\n            this.width = options.args.options.width;\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset;\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation;\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select;\n        if (options.args.options.insert !== undefined)\n            this.isInsert = options.args.options.insert;\n        if (options.args.options.update !== undefined)\n            this.isUpdate = options.args.options.update;\n        if (options.args.options.readonly !== undefined)\n            this.isUpdate = !options.args.options.readonly;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate;\n        if (options.args.options.scale !== null && options.args.options.scale !== undefined)\n            this.scale = options.args.options.scale;\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill;\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned;\n        if (options.args.options.precision !== undefined)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum) {\n            if (options.args.options.enum instanceof Object && !Array.isArray(options.args.options.enum)) {\n                this.enum = Object.keys(options.args.options.enum)\n                    .filter(key => isNaN(+key))     // remove numeric keys - typescript numeric enum types generate them\n                    .map(key => (options.args.options.enum as ObjectLiteral)[key]);\n\n            } else {\n                this.enum = options.args.options.enum;\n            }\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression;\n            this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : \"VIRTUAL\";\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType;\n        if (options.args.options.array)\n            this.isArray = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer;\n        if (options.args.options.spatialFeatureType)\n            this.spatialFeatureType = options.args.options.spatialFeatureType;\n        if (options.args.options.srid)\n            this.srid = options.args.options.srid;\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.createDateDefault;\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.updateDateDefault;\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n        if (options.closureType)\n            this.closureType = options.closureType;\n        if (options.nestedSetLeft)\n            this.isNestedSetLeft = options.nestedSetLeft;\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight;\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any, useDatabaseName = false) {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if ((this.generationStrategy === \"increment\" || this.generationStrategy === \"rowid\") && this.type === \"bigint\")\n                    value = String(value);\n\n                map[useDatabaseName ? this.databaseName : this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if ((this.generationStrategy === \"increment\" || this.generationStrategy === \"rowid\") && this.type === \"bigint\")\n                value = String(value);\n\n            return { [useDatabaseName ? this.databaseName : this.propertyName]: value };\n        }\n    }\n\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    getEntityValueMap(entity: ObjectLiteral, options?: { skipNulls?: boolean }): ObjectLiteral|undefined {\n        const returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral, map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (value === undefined)\n                    return map;\n\n                if (propertyName) {\n                    const submap: ObjectLiteral = {};\n                    extractEmbeddedColumnValue(propertyNames, value[propertyName], submap);\n                    if (Object.keys(submap).length > 0) {\n                        map[propertyName] = submap;\n                    }\n                    return map;\n                }\n                if (value[this.propertyName] !== undefined && (returnNulls === false || value[this.propertyName] !== null))\n                    map[this.propertyName] = value[this.propertyName];\n                return map;\n            };\n            const map: ObjectLiteral = {};\n            extractEmbeddedColumnValue(propertyNames, entity, map);\n            return Object.keys(map).length > 0 ? map : undefined;\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {\n                const map = this.relationMetadata.joinColumns.reduce((map, joinColumn) => {\n                    const value = joinColumn.referencedColumn!.getEntityValueMap(entity[this.propertyName]);\n                    if (value === undefined) return map;\n                    return OrmUtils.mergeDeep(map, value);\n                }, {});\n                if (Object.keys(map).length > 0)\n                    return { [this.propertyName]: map };\n\n                return undefined;\n            } else {\n                if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))\n                    return { [this.propertyName]: entity[this.propertyName] };\n\n                return undefined;\n            }\n        }\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity: ObjectLiteral, transform: boolean = false): any|undefined {\n        if (entity === undefined || entity === null) return undefined;\n\n        // extract column value from embeddeds of entity if column is in embedded\n        let value: any = undefined;\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                return propertyName && value ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\n            };\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(relatedEntity));\n\n                    } else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n\n                    } else {\n                        value = PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n\n                    }\n\n                } else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n\n                } else {\n                    value = PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                }\n            }\n\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\n                if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator) && !(relatedEntity instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(relatedEntity));\n\n                } else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator) && !(entity[this.propertyName] instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(entity[this.propertyName]));\n\n                } else {\n                    value = entity[this.propertyName];\n                }\n\n            } else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(entity[this.propertyName]));\n\n            } else {\n                value = entity[this.propertyName];\n            }\n        }\n\n        if (transform && this.transformer)\n            value = ApplyValueTransformers.transformTo(this.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        if (this.embeddedMetadata) {\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n\n        } else {\n            entity[this.propertyName] = value;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: Connection): this {\n        this.propertyPath = this.buildPropertyPath();\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\n        this.databaseName = this.buildDatabaseName(connection);\n        this.databasePath = this.buildDatabasePath();\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    }\n\n    protected buildPropertyPath(): string {\n        let path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n\n        path += this.propertyName;\n\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\n            path += \".\" + this.referencedColumn.propertyName;\n\n        return path;\n    }\n\n    protected buildDatabasePath(): string {\n        let path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n\n        path += this.databaseName;\n\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)\n            path += \".\" + this.referencedColumn.databaseName;\n\n        return path;\n    }\n\n    protected buildDatabaseName(connection: Connection): string {\n        let propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];\n        if (connection.driver instanceof MongoDriver) // we don't need to include embedded name for the mongodb column names\n            propertyNames = [];\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    }\n\n}\n","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Query} from \"../Query\";\nimport {AbstractSqliteDriver} from \"./AbstractSqliteDriver\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport abstract class AbstractSqliteQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AbstractSqliteDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor() {\n        super();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve(this.driver.databaseConnection);\n    }\n\n    /**\n     * Releases used database connection.\n     * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.\n     */\n    release(): Promise<void> {\n        this.loadedTables = [];\n        this.clearSqlMemory();\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n\n        if (isolationLevel) {\n            if (isolationLevel !== \"READ UNCOMMITTED\" && isolationLevel !== \"SERIALIZABLE\") {\n                throw new Error(`SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation`);\n            }\n\n            if (isolationLevel === \"READ UNCOMMITTED\") {\n                await this.query(\"PRAGMA read_uncommitted = true\");\n            } else {\n                await this.query(\"PRAGMA read_uncommitted = false\");\n            }\n        }\n\n        await this.query(\"BEGIN TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by sqlite driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        throw new Error(`This driver does not support table schemas`);\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        upQueries.push(this.dropTableSql(table, ifExist));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        newTable.name = newTableName;\n\n        // rename table\n        const up = new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTableName}\"`);\n        const down = new Query(`ALTER TABLE \"${newTableName}\" RENAME TO \"${oldTable.name}\"`);\n        await this.executeQueries(up, down);\n\n        // rename old table;\n        oldTable.name = newTable.name;\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            unique.name = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n        });\n\n        // rename indices\n        newTable.indices.forEach(index => {\n            index.name = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n        });\n\n        // recreate table with new constraint names\n        await this.recreateTable(newTable, oldTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        return this.addColumns(table!, [column]);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const changedTable = table.clone();\n        columns.forEach(column => changedTable.addColumn(column));\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        await this.changeColumns(table, [{oldColumn, newColumn}]);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { oldColumn: TableColumn, newColumn: TableColumn }[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const changedTable = table.clone();\n        changedColumns.forEach(changedColumnSet => {\n            if (changedColumnSet.newColumn.name !== changedColumnSet.oldColumn.name) {\n                changedTable.findColumnUniques(changedColumnSet.oldColumn).forEach(unique => {\n                    unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    unique.columnNames.push(changedColumnSet.newColumn.name);\n                    unique.name = this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);\n                });\n\n                changedTable.findColumnForeignKeys(changedColumnSet.oldColumn).forEach(fk => {\n                    fk.columnNames.splice(fk.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    fk.columnNames.push(changedColumnSet.newColumn.name);\n                    fk.name = this.connection.namingStrategy.foreignKeyName(changedTable, fk.columnNames);\n                });\n\n                changedTable.findColumnIndices(changedColumnSet.oldColumn).forEach(index => {\n                    index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    index.columnNames.push(changedColumnSet.newColumn.name);\n                    index.name = this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);\n                });\n            }\n            const originalColumn = changedTable.columns.find(column => column.name === changedColumnSet.oldColumn.name);\n            if (originalColumn)\n                changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;\n        });\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        await this.dropColumns(table, [column]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove column and its constraints from cloned table\n        const changedTable = table.clone();\n        columns.forEach(column => {\n            changedTable.removeColumn(column);\n            changedTable.findColumnUniques(column).forEach(unique => changedTable.removeUniqueConstraint(unique));\n            changedTable.findColumnIndices(column).forEach(index => changedTable.removeIndex(index));\n            changedTable.findColumnForeignKeys(column).forEach(fk => changedTable.removeForeignKey(fk));\n        });\n\n        await this.recreateTable(changedTable, table);\n\n        // remove column and its constraints from original table.\n        columns.forEach(column => {\n            table.removeColumn(column);\n            table.findColumnUniques(column).forEach(unique => table.removeUniqueConstraint(unique));\n            table.findColumnIndices(column).forEach(index => table.removeIndex(index));\n            table.findColumnForeignKeys(column).forEach(fk => table.removeForeignKey(fk));\n        });\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        // clone original table and mark columns as primary\n        const changedTable = table.clone();\n        changedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n\n        await this.recreateTable(changedTable, table);\n        // mark columns as primary in original table\n        table.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        await Promise.resolve();\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        // clone original table and mark primary columns as non-primary\n        const changedTable = table.clone();\n        changedTable.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n\n        await this.recreateTable(changedTable, table);\n        // mark primary columns as non-primary in original table\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        await this.createUniqueConstraints(tableOrName, [uniqueConstraint]);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and add unique constraints in to cloned table\n        const changedTable = table.clone();\n        uniqueConstraints.forEach(uniqueConstraint => changedTable.addUniqueConstraint(uniqueConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        await this.dropUniqueConstraints(table, [uniqueConstraint]);\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove unique constraints from cloned table\n        const changedTable = table.clone();\n        uniqueConstraints.forEach(uniqueConstraint => changedTable.removeUniqueConstraint(uniqueConstraint));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        await this.createCheckConstraints(tableOrName, [checkConstraint]);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and add check constraints in to cloned table\n        const changedTable = table.clone();\n        checkConstraints.forEach(checkConstraint => changedTable.addCheckConstraint(checkConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        await this.dropCheckConstraints(table, [checkConstraint]);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove check constraints from cloned table\n        const changedTable = table.clone();\n        checkConstraints.forEach(checkConstraint => changedTable.removeCheckConstraint(checkConstraint));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Sqlite does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        await this.createForeignKeys(tableOrName, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        // clone original table and add foreign keys in to cloned table\n        const changedTable = table.clone();\n        foreignKeys.forEach(foreignKey => changedTable.addForeignKey(foreignKey));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        await this.dropForeignKeys(tableOrName, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // clone original table and remove foreign keys from cloned table\n        const changedTable = table.clone();\n        foreignKeys.forEach(foreignKey => changedTable.removeForeignKey(foreignKey));\n\n        await this.recreateTable(changedTable, table);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.startTransaction();\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const viewNamesString = viewNames.map(name => \"'\" + name + \"'\").join(\", \");\n        let query = `SELECT \"t\".* FROM \"${this.getTypeormMetadataTableName()}\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = 'VIEW'`;\n        if (viewNamesString.length > 0)\n            query += ` AND \"t\".\"name\" IN (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" IN (${tableNamesString})`);\n\n        // load indices\n        const dbIndicesDef: ObjectLiteral[] = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table({name: dbTable[\"name\"]});\n            const sql = dbTable[\"sql\"];\n\n            // load columns and indices\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            let autoIncrementIndex = tableSql.toUpperCase().indexOf(\"AUTOINCREMENT\");\n            if (autoIncrementIndex !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, autoIncrementIndex);\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create columns from the loaded columns\n            table.columns = dbColumns.map(dbColumn => {\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"name\"];\n                tableColumn.type = dbColumn[\"type\"].toLowerCase();\n                tableColumn.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                tableColumn.isNullable = dbColumn[\"notnull\"] === 0;\n                // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0\n                tableColumn.isPrimary = dbColumn[\"pk\"] > 0;\n                tableColumn.comment = \"\"; // SQLite does not support column comments\n                tableColumn.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                if (tableColumn.isGenerated) {\n                    tableColumn.generationStrategy = \"increment\";\n                }\n\n                if (tableColumn.type === \"varchar\") {\n                    // Check if this is an enum\n                    const enumMatch = sql.match(new RegExp(\"\\\"(\" + tableColumn.name + \")\\\" varchar CHECK\\\\s*\\\\(\\\\s*\\\\1\\\\s+IN\\\\s*\\\\(('[^']+'(?:\\\\s*,\\\\s*'[^']+')+)\\\\s*\\\\)\\\\s*\\\\)\"));\n                    if (enumMatch) {\n                        // This is an enum\n                        tableColumn.type = \"simple-enum\";\n                        tableColumn.enum = enumMatch[2].substr(1, enumMatch[2].length - 2).split(\"','\");\n                    }\n                }\n\n                // parse datatype and attempt to retrieve length\n                let pos = tableColumn.type.indexOf(\"(\");\n                if (pos !== -1) {\n                    let dataType = tableColumn.type.substr(0, pos);\n                    if (!!this.driver.withLengthColumnTypes.find(col => col === dataType)) {\n                        let len = parseInt(tableColumn.type.substring(pos + 1, tableColumn.type.length - 1));\n                        if (len) {\n                            tableColumn.length = len.toString();\n                            tableColumn.type = dataType; // remove the length part from the datatype\n                        }\n                    }\n                }\n\n                return tableColumn;\n            });\n\n            // build foreign keys\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys, dbForeignKey => dbForeignKey[\"id\"]);\n            table.foreignKeys = tableForeignKeyConstraints.map(foreignKey => {\n                const ownForeignKeys = dbForeignKeys.filter(dbForeignKey => dbForeignKey[\"id\"] === foreignKey[\"id\"] && dbForeignKey[\"table\"] === foreignKey[\"table\"]);\n                const columnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey[\"from\"]);\n                const referencedColumnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey[\"to\"]);\n                // build foreign key name, because we can not get it directly.\n                const fkName = this.connection.namingStrategy.foreignKeyName(table, columnNames);\n\n                return new TableForeignKey({\n                    name: fkName,\n                    columnNames: columnNames,\n                    referencedTableName: foreignKey[\"table\"],\n                    referencedColumnNames: referencedColumnNames,\n                    onDelete: foreignKey[\"on_delete\"],\n                    onUpdate: foreignKey[\"on_update\"]\n                });\n            });\n\n            // build unique constraints\n            const tableUniquePromises = dbIndices\n                .filter(dbIndex => dbIndex[\"origin\"] === \"u\")\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index)\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\n                        .map(indexInfo => indexInfo[\"name\"]);\n\n                    if (indexColumns.length === 1) {\n                        const column = table.columns.find(column => {\n                            return !!indexColumns.find(indexColumn => indexColumn === column.name);\n                        });\n                        if (column)\n                            column.isUnique = true;\n                    }\n\n                    // Sqlite does not store unique constraint name, so we generate its name manually.\n                    return new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),\n                        columnNames: indexColumns\n                    });\n                });\n            table.uniques = (await Promise.all(tableUniquePromises)) as TableUnique[];\n\n            // build checks\n            let result;\n            const regexp = /CONSTRAINT \"([^\"]*)\" CHECK (\\(.*?\\))([,]|[)]$)/g;\n            while (((result = regexp.exec(sql)) !== null)) {\n                table.checks.push(new TableCheck({ name: result[1], expression: result[2] }));\n            }\n\n            // build indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => dbIndex[\"origin\"] === \"c\")\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n\n                    const indexDef = dbIndicesDef.find(dbIndexDef => dbIndexDef[\"name\"] === dbIndexName);\n                    const condition = /WHERE (.*)/.exec(indexDef![\"sql\"]);\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\n                        .map(indexInfo => indexInfo[\"name\"]);\n\n                    const isUnique = dbIndex![\"unique\"] === \"1\" || dbIndex![\"unique\"] === 1;\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: dbIndex![\"name\"],\n                        columnNames: indexColumns,\n                        isUnique: isUnique,\n                        where: condition ? condition[1] : undefined\n                    });\n                });\n            const indices = await Promise.all(indicesPromises);\n            table.indices = indices.filter(index => !!index) as TableIndex[];\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        const hasAutoIncrement = primaryColumns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n        const skipPrimary = primaryColumns.length > 1;\n        if (skipPrimary && hasAutoIncrement)\n            throw new Error(`Sqlite does not support AUTOINCREMENT on composite primary key`);\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, skipPrimary)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n\n        // need for `addColumn()` method, because it recreates table.\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        if (primaryColumns.length > 1) {\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const query = ifExist ? `DROP TABLE IF EXISTS \"${tableName}\"` : `DROP TABLE \"${tableName}\"`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", name: view.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        return new Query(`DROP VIEW \"${viewName}\"`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(viewOrPath: View|string): Query {\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: viewName })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${table.name}\" (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn, skipPrimary?: boolean): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.driver.normalizeType(column);\n        } else {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n\n        if (column.enum)\n            c += \" CHECK( \" + column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \") )\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTOINCREMENT\";\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT (\" + column.default + \")\";\n\n        return c;\n    }\n\n    protected async recreateTable(newTable: Table, oldTable: Table, migrateData = true): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop old table indices\n        oldTable.indices.forEach(index => {\n            upQueries.push(this.dropIndexSql(index));\n            downQueries.push(this.createIndexSql(oldTable, index));\n        });\n\n        // change table name into 'temporary_table'\n        newTable.name = \"temporary_\" + newTable.name;\n\n        // create new table\n        upQueries.push(this.createTableSql(newTable, true));\n        downQueries.push(this.dropTableSql(newTable));\n\n        // migrate all data from the old table into new table\n        if (migrateData) {\n            let newColumnNames = newTable.columns.map(column => `\"${column.name}\"`).join(\", \");\n            let oldColumnNames = oldTable.columns.map(column => `\"${column.name}\"`).join(\", \");\n            if (oldTable.columns.length < newTable.columns.length) {\n                newColumnNames = newTable.columns.filter(column => {\n                    return oldTable.columns.find(c => c.name === column.name);\n                }).map(column => `\"${column.name}\"`).join(\", \");\n\n            } else if (oldTable.columns.length > newTable.columns.length) {\n                oldColumnNames = oldTable.columns.filter(column => {\n                    return newTable.columns.find(c => c.name === column.name);\n                }).map(column => `\"${column.name}\"`).join(\", \");\n            }\n\n            upQueries.push(new Query(`INSERT INTO \"${newTable.name}\"(${newColumnNames}) SELECT ${oldColumnNames} FROM \"${oldTable.name}\"`));\n            downQueries.push(new Query(`INSERT INTO \"${oldTable.name}\"(${oldColumnNames}) SELECT ${newColumnNames} FROM \"${newTable.name}\"`));\n        }\n\n        // drop old table\n        upQueries.push(this.dropTableSql(oldTable));\n        downQueries.push(this.createTableSql(oldTable, true));\n\n        // rename old table\n        upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME TO \"${oldTable.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTable.name}\"`));\n        newTable.name = oldTable.name;\n\n        // recreate table indices\n        newTable.indices.forEach(index => {\n            // new index may be passed without name. In this case we generate index name manually.\n            if (!index.name)\n                index.name = this.connection.namingStrategy.indexName(newTable.name, index.columnNames, index.where);\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(index));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n}\n","import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {SqljsDriver} from \"./SqljsDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: SqljsDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqljsDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    \n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        await super.commitTransaction();\n        await this.driver.autoSave();\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = this.driver.databaseConnection;\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            let statement: any;\n            try {\n                statement = databaseConnection.prepare(query);\n                statement.bind(parameters);\n                \n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                const result: any[] = [];\n\n                while (statement.step()) {\n                    result.push(statement.getAsObject());\n                }\n                \n                statement.free();\n                ok(result);\n            }\n            catch (e) {\n                if (statement) {\n                    statement.free();\n                }\n\n                this.driver.connection.logger.logQueryError(e, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, e));\n            }\n        });\n    }\n}","/**\n * Thrown if some required driver's option is not set.\n */\nexport class DriverOptionNotSetError extends Error {\n    name = \"DriverOptionNotSetError\";\n\n    constructor(optionName: string) {\n        super();\n        Object.setPrototypeOf(this, DriverOptionNotSetError.prototype);\n        this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;\n    }\n\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {SqljsConnectionOptions} from \"./SqljsConnectionOptions\";\nimport {SqljsQueryRunner} from \"./SqljsQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n// This is needed to satisfy the typescript compiler.\ninterface Window {\n    SQL: any;\n    localforage: any;\n}\ndeclare var window: Window;\n\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: SqljsConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n        }\n\n        // load sql.js package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection.close();\n                ok();\n            }\n            catch (e)  {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\" | \"slave\" = \"master\"): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n\n        return this.queryRunner;\n    }\n    \n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(fileNameOrLocalStorageOrData: string | Uint8Array, checkIfFileOrLocalStorageExists: boolean = true): Promise<any> {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                    return this.createDatabaseConnectionWithImport(database);\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            } \n            else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null;\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n                    } else {\n                        throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                    }\n                } else {\n                    localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                }\n                \n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n        }\n        else {\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n        }\n    }\n\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location?: string) {\n        if (!location && !this.options.location) {\n            throw new Error(`No location is set, specify a location parameter or add the location option to your configuration`);\n        }\n        \n        let path = \"\";\n        if (location) {\n            path = location;\n        }\n        else if (this.options.location) {\n            path = this.options.location;\n        }\n\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = new Buffer(this.databaseConnection.export());\n                await PlatformTools.writeFile(path, content);\n            }\n            catch (e) {\n                throw new Error(`Could not save database, error: ${e}`);\n            }\n        }\n        else {\n            const database: Uint8Array = this.databaseConnection.export();\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database);\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(path, JSON.stringify(databaseArray));\n                } else {\n                    throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                }\n            } else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            }\n        }\n    }\n\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     */\n    async autoSave() {\n        if (this.options.autoSave) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export());\n            }\n            else {\n                await this.save();\n            }\n        }\n    }\n    \n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export(): Uint8Array {\n        return this.databaseConnection.export();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n                const query = \"SELECT last_insert_rowid()\";\n                try {\n                    let result = this.databaseConnection.exec(query);\n                    this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n\n            return map;\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected createDatabaseConnection(): Promise<any> {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    }\n\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    protected async createDatabaseConnectionWithImport(database?: Uint8Array): Promise<any> {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n        const sqlite = isLegacyVersion ? this.sqlite : await this.sqlite(); \n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database);\n        }\n        else {\n            this.databaseConnection = new sqlite.Database();\n        }\n\n        // Enable foreign keys for database\n        return new Promise<any>((ok, fail) => {\n            try {\n                this.databaseConnection.exec(`PRAGMA foreign_keys = ON;`);\n                ok(this.databaseConnection);\n            }\n            catch (e) {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        if (PlatformTools.type === \"browser\") {\n            this.sqlite = window.SQL;\n        }\n        else {\n            try {\n                this.sqlite = PlatformTools.load(\"sql.js\");\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    }\n}","import {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"./EntityManager\";\nimport {MongoEntityManager} from \"./MongoEntityManager\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {SqljsEntityManager} from \"./SqljsEntityManager\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Helps to create entity managers.\n */\nexport class EntityManagerFactory {\n\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    create(connection: Connection, queryRunner?: QueryRunner): EntityManager {\n        if (connection.driver instanceof MongoDriver)\n            return new MongoEntityManager(connection);\n\n        if (connection.driver instanceof SqljsDriver)\n            return new SqljsEntityManager(connection, queryRunner);\n\n        return new EntityManager(connection, queryRunner);\n    }\n\n}","/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends Error {\n    name = \"MissingDriverError\";\n\n    constructor(driverType: string) {\n        super();\n        Object.setPrototypeOf(this, MissingDriverError.prototype);\n        this.message = `Wrong driver: \"${driverType}\" given. Supported drivers are: \"cordova\", \"expo\", \"mariadb\", \"mongodb\", \"mssql\", \"mysql\", \"oracle\", \"postgres\", \"sqlite\", \"sqljs\", \"react-native\".`;\n    }\n\n}","import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {SqliteDriver} from \"./SqliteDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqliteDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqliteDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n\n        return new Promise<any[]>(async (ok, fail) => {\n\n            const handler = function (err: any, result: any) {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                } else {\n                    ok(isInsertQuery ? this[\"lastID\"] : result);\n                }\n            };\n\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n            if (isInsertQuery) {\n                databaseConnection.run(query, parameters, handler);\n            } else {\n                databaseConnection.all(query, parameters, handler);\n            }\n        });\n    }\n}","import {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {SqliteConnectionOptions} from \"./SqliteConnectionOptions\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class SqliteDriver extends AbstractSqliteDriver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SqliteConnectionOptions;\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.connection = connection;\n        this.options = connection.options as SqliteConnectionOptions;\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new SqliteQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\";\n        }\n\n        return super.normalizeType(column);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        await this.createDatabaseDirectory(this.options.database);\n\n        const databaseConnection: any = await new Promise((ok, fail) => {\n            const connection = new this.sqlite.Database(this.options.database, (err: any) => {\n                if (err) return fail(err);\n                ok(connection);\n            });\n        });\n\n        // Internal function to run a command on the connection and fail if an error occured.\n        function run(line: string): Promise<void> {\n            return new Promise((ok, fail) => {\n                databaseConnection.run(line, (err: any) => {\n                    if (err) return fail(err);\n                    ok();\n                });\n            });\n        }\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await run(`PRAGMA foreign_keys = ON;`);\n\n        // in the options, if encryption key for SQLCipher is setted.\n        if (this.options.key) {\n            await run(`PRAGMA key = ${JSON.stringify(this.options.key)};`);\n        }\n\n        return databaseConnection;\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\n        }\n    }\n\n    /**\n     * Auto creates database directory if it does not exist.\n     */\n    protected createDatabaseDirectory(fullPath: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const mkdirp = PlatformTools.load(\"mkdirp\");\n            const path = PlatformTools.load(\"path\");\n            mkdirp(path.dirname(fullPath), (err: any) => err ? reject(err) : resolve());\n        });\n    }\n\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {CordovaDriver} from \"./CordovaDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: CordovaDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CordovaDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            databaseConnection.executeSql(query, parameters, (result: any) => {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (query.substr(0, 11) === \"INSERT INTO\") {\n                    ok(result.insertId);\n                }\n                else {\n                    let resultSet = [];\n                    for (let i = 0; i < result.rows.length; i++) {\n                        resultSet.push(result.rows.item(i));\n                    }\n                    \n                    ok(resultSet);\n                }\n            }, (err: any) => {\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, err));\n            });\n        });\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     // todo: implement new syntax\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<InsertResult>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                    if (!value) return map;\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n                }, {} as ObjectLiteral);\n\n                ok({\n                    result: undefined,\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n                });\n            }, (err: any) => {\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n                fail(err);\n            });\n        });\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {CordovaConnectionOptions} from \"./CordovaConnectionOptions\";\nimport {CordovaQueryRunner} from \"./CordovaQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\n\n// needed for typescript compiler\ninterface Window {\n    sqlitePlugin: any;\n}\n\ndeclare var window: Window;\n\nexport class CordovaDriver extends AbstractSqliteDriver {\n    options: CordovaConnectionOptions;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n    \n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n    \n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new CordovaQueryRunner(this);\n\n        return this.queryRunner;\n    }\n    \n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n                location: this.options.location,\n            }, this.options.extra || {});\n\n            this.sqlite.openDatabase(options, (db: any) => {\n                const databaseConnection = db;\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result: any) => {\n                    ok(databaseConnection);\n                }, (error: any) => {\n                    fail(error);\n                });\n            }, (error: any) => {\n                fail(error);\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = window.sqlitePlugin;\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n        }\n    }\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {ReactNativeDriver} from \"./ReactNativeDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: ReactNativeDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ReactNativeDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            databaseConnection.executeSql(query, parameters, (result: any) => {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                // return id of inserted row, if query was insert statement.\n                if (query.substr(0, 11) === \"INSERT INTO\") {\n                    ok(result.insertId);\n                }\n                else {\n                    let resultSet = [];\n                    for (let i = 0; i < result.rows.length; i++) {\n                        resultSet.push(result.rows.item(i));\n                    }\n                    \n                    ok(resultSet);\n                }\n            }, (err: any) => {\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, err));\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {ReactNativeConnectionOptions} from \"./ReactNativeConnectionOptions\";\nimport {ReactNativeQueryRunner} from \"./ReactNativeQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\n\nexport class ReactNativeDriver extends AbstractSqliteDriver {\n    options: ReactNativeConnectionOptions;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n    \n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n    \n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ReactNativeQueryRunner(this);\n\n        return this.queryRunner;\n    }\n    \n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n                location: this.options.location,\n            }, this.options.extra || {});\n\n            this.sqlite.openDatabase(options, (db: any) => {\n                const databaseConnection = db;\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result: any) => {\n                    ok(databaseConnection);\n                }, (error: any) => {\n                    fail(error);\n                });\n            }, (error: any) => {\n                fail(error);\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = require(\"react-native-sqlite-storage\");\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"React-Native\", \"react-native-sqlite-storage\");\n        }\n    }\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {NativescriptDriver} from \"./NativescriptDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: NativescriptDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: NativescriptDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n\n        return new Promise<any[]>( (ok, fail) => {\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n            const handler = function (err: any, result: any) {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                } else {\n                    // when isInsertQuery == true, result is the id\n                    ok(result);\n                }\n            };\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            this.connect().then(databaseConnection => {\n                if (isInsertQuery) {\n                    databaseConnection.execSQL(query, parameters, handler);\n                } else {\n                    databaseConnection.all(query, parameters, handler);\n                }\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {NativescriptConnectionOptions} from \"./NativescriptConnectionOptions\";\nimport {NativescriptQueryRunner} from \"./NativescriptQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ColumnType} from \"../types/ColumnTypes\";\n\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: NativescriptConnectionOptions;\n\n    /**\n     * Nativescript driver module\n     * this is most likely `nativescript-sqlite`\n     * but user can pass his own\n     */\n    driver: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.connection = connection;\n        this.options = connection.options as NativescriptConnectionOptions;\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n\n        // validate options to make sure everything is set\n        if (!this.options.database) {\n            throw new DriverOptionNotSetError(\"database\");\n        }\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close().then(ok).catch(fail);\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this);\n        }\n\n        return this.queryRunner;\n    }\n\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\";\n        }\n\n        return super.normalizeType(column);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n            }, this.options.extra || {});\n\n            new this.sqlite(options.name, (err: Error, db: any): any => {\n                if (err) return fail(err);\n\n                // use object mode to work with TypeORM\n                db.resultType(this.sqlite.RESULTSASOBJECT);\n\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                db.execSQL(`PRAGMA foreign_keys = ON;`, [], (err: Error, result: any): any => {\n                    if (err) return fail(err);\n                    // We are all set\n                    ok(db);\n                });\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n        }\n    }\n}\n","import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ExpoDriver} from \"./ExpoDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n// Needed to satisfy the Typescript compiler\ninterface IResultSet {\n    insertId: number | undefined;\n    rowsAffected: number;\n    rows: {\n        length: number;\n        item: (idx: number) => any;\n        _array: any[];\n    };\n}\ninterface ITransaction {\n    executeSql: (\n        sql: string,\n        args: any[] | undefined,\n        ok: (tsx: ITransaction, resultSet: IResultSet) => void,\n        fail: (tsx: ITransaction, err: any) => void\n    ) => void;\n}\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ExpoQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: ExpoDriver;\n\n    /**\n     * Database transaction object\n     */\n    private transaction?: ITransaction;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ExpoDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Starts transaction. Within Expo, all database operations happen in a\n     * transaction context, so issuing a `BEGIN TRANSACTION` command is\n     * redundant and will result in the following error:\n     * \n     * `Error: Error code 1: cannot start a transaction within a transaction`\n     * \n     * Instead, we keep track of a `Transaction` object in `this.transaction`\n     * and continue using the same object until we wish to commit the\n     * transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive && typeof this.transaction !== \"undefined\")\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     * Since Expo will automatically commit the transaction once all the\n     * callbacks of the transaction object have been completed, \"committing\" a\n     * transaction in this driver's context means that we delete the transaction\n     * object and set the stage for the next transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive && typeof this.transaction === \"undefined\")\n            throw new TransactionNotStartedError();\n\n        this.isTransactionActive = false;\n        this.transaction = undefined;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     * This method's functionality is identical to `commitTransaction()` because\n     * the transaction lifecycle is handled within the Expo transaction object.\n     * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive && typeof this.transaction === \"undefined\")\n            throw new TransactionNotStartedError();\n\n        this.isTransactionActive = false;\n        this.transaction = undefined;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any>(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            // All Expo SQL queries are executed in a transaction context\n            databaseConnection.transaction((transaction: ITransaction) => {\n                if (typeof this.transaction === \"undefined\") {\n                    this.startTransaction();\n                    this.transaction = transaction;\n                }\n                this.transaction.executeSql(query, parameters, (t: ITransaction, result: IResultSet) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                    }\n    \n                    // return id of inserted row, if query was insert statement.\n                    if (query.substr(0, 11) === \"INSERT INTO\") {\n                        ok(result.insertId);\n                    }\n                    else {\n                        let resultSet = [];\n                        for (let i = 0; i < result.rows.length; i++) {\n                            resultSet.push(result.rows.item(i));\n                        }\n                        ok(resultSet);\n                    }\n                }, (t: ITransaction, err: any) => {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                });\n            }, (err: any) => {\n                this.rollbackTransaction();\n            }, () => {\n                this.isTransactionActive = false;\n                this.transaction = undefined;\n            });\n        });\n    }\n}\n","import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {ExpoConnectionOptions} from \"./ExpoConnectionOptions\";\nimport {ExpoQueryRunner} from \"./ExpoQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\n\n// needed for typescript compiler\ninterface Window {\n    Expo: any;\n}\ndeclare const window: Window;\n\nexport class ExpoDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n    \n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection = undefined;\n                ok();\n            } catch (error) {\n                fail(error);\n            }\n        });\n    }\n    \n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoQueryRunner(this);\n\n        return this.queryRunner;\n    }\n    \n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(this.options.database);\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction((tsx: any) => {\n                    tsx.executeSql(`PRAGMA foreign_keys = ON;`, [], (t: any, result: any) => {\n                        ok(databaseConnection);\n                    }, (t: any, err: any) => {\n                        fail({transaction: t, error: err});\n                    });\n                }, (err: any) => {\n                    fail(err);\n                });\n            } catch (error) {\n                fail(error);\n            }\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = window.Expo.SQLite;\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Expo\", \"expo\");\n        }\n    }\n}\n","import {MissingDriverError} from \"../error/MissingDriverError\";\nimport {CockroachDriver} from \"./cockroachdb/CockroachDriver\";\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"./oracle/OracleDriver\";\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\nimport {CordovaDriver} from \"./cordova/CordovaDriver\";\nimport {ReactNativeDriver} from \"./react-native/ReactNativeDriver\";\nimport {NativescriptDriver} from \"./nativescript/NativescriptDriver\";\nimport {SqljsDriver} from \"./sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\nimport {ExpoDriver} from \"./expo/ExpoDriver\";\nimport {Driver} from \"./Driver\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: Connection): Driver {\n        const {type} = connection.options;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    }\n\n}\n","import {PlatformTools} from \"../platform/PlatformTools\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\n\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\n        if (typeof exported === \"function\" || exported instanceof EntitySchema) {\n            allLoaded.push(exported);\n\n        } else if (Array.isArray(exported)) {\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\n\n        } else if (typeof exported === \"object\" && exported !== null) {\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\n\n        }\n        return allLoaded;\n    }\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\n    }, [] as string[]);\n\n    const dirs = allFiles\n        .filter(file => {\n            const dtsExtension = file.substring(file.length - 5, file.length);\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\n        })\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\n\n    return loadFileClasses(dirs, []);\n}\n\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\n    }, [] as string[]);\n\n    return allFiles\n        .filter(file => PlatformTools.pathExtname(file) === format)\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\n}","/**\n * Container options.\n */\nexport interface UseContainerOptions {\n\n    /**\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\n     */\n    fallback?: boolean;\n\n    /**\n     * If set to true, then default container will be used in the case if given container thrown an exception.\n     */\n    fallbackOnErrors?: boolean;\n\n}\n\nexport type ContainedType<T> = { new (...args: any[]): T } | Function;\n\nexport interface ContainerInterface {\n    get<T>(someClass: ContainedType<T>): T;\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer: ContainerInterface = new (class implements ContainerInterface {\n    private instances: { type: Function, object: any }[] = [];\n\n    get<T>(someClass: ContainedType<T>): T {\n        let instance = this.instances.find(i => i.type === someClass);\n        if (!instance) {\n            instance = { type: someClass, object: new (someClass as new() => T)()};\n            this.instances.push(instance);\n        }\n\n        return instance.object;\n    }\n})();\n\nlet userContainer: ContainerInterface;\nlet userContainerOptions: UseContainerOptions|undefined;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: ContainerInterface, options?: UseContainerOptions) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: ContainedType<T>): T {\n    if (userContainer) {\n        try {\n            const instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n\n        } catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get<T>(someClass);\n}","import {EntityMetadata} from \"./EntityMetadata\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata if this index was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean = false;\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean = false;\n\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    synchronize: boolean = true;\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    isSparse?: boolean;\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    isBackground?: boolean;\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Index filter condition.\n     */\n    where?: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        columns?: ColumnMetadata[],\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null && options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.isBackground = options.args.background;\n            this.expireAfterSeconds = options.args.expireAfterSeconds;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        if (this.synchronize === false) {\n            this.name = this.givenName!;\n            return this;\n        }\n\n        const map: { [key: string]: number } = {};\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = [];\n            if (this.givenColumnNames instanceof Array) {\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\n                    if (this.embeddedMetadata)\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\n\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n            } else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (columnsFnResult instanceof Array) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyPaths.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            this.columns = columnPropertyPaths.map(propertyPath => {\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new Error(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);\n            })\n            .reduce((a, b) => a.concat(b));\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n\n            return updatedMap;\n        }, {} as { [key: string]: number });\n\n        this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName), this.where);\n        return this;\n    }\n\n}\n","import {RelationType} from \"./types/RelationTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {DeferrableType} from \"./types/DeferrableType\";\nimport {OnUpdateType} from \"./types/OnUpdateType\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\nimport {PropertyTypeFactory} from \"./types/PropertyTypeInFunction\";\n\n/**\n * Contains all information about some entity's relation.\n */\nexport class RelationMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity where this relation is placed.\n     *\n     * For example for @ManyToMany(type => Category) in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata of the entity that is targeted by this relation.\n     *\n     * For example for @ManyToMany(type => Category) in Post, inverseEntityMetadata will be metadata of Category entity.\n     */\n    inverseEntityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata of the junction table.\n     * Junction tables have their own entity metadata objects.\n     * Defined only for many-to-many relations.\n     */\n    junctionEntityMetadata?: EntityMetadata;\n\n    /**\n     * Embedded metadata where this relation is.\n     * If this relation is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Relation type, e.g. is it one-to-one, one-to-many, many-to-one or many-to-many.\n     */\n    relationType: RelationType;\n\n    /**\n     * Target entity to which this relation is applied.\n     * Target IS NOT equal to entityMetadata.target, because relation\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Post.\n     * If @ManyToMany(type => Category) is in Counters which is embedded into Post, target will be Counters.\n     * If @ManyToMany(type => Category) is in abstract class BaseUser which Post extends, target will be BaseUser.\n     * Target can be string if its defined in entity schema instead of class.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which relation decorator is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Gets full path to this column property (including relation name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string;\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    isTreeParent: boolean = false;\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    isTreeChildren: boolean = false;\n\n    /**\n     * Indicates if this relation's column is a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if this relation is lazily loaded.\n     */\n    isLazy: boolean = false;\n\n    /**\n     * Indicates if this relation is eagerly loaded.\n     */\n    isEager: boolean = false;\n\n    /**\n     * Indicates if persistence is enabled for the relation.\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n     */\n    persistenceEnabled: boolean = true;\n\n    /**\n     * If set to true then related objects are allowed to be inserted to the database.\n     */\n    isCascadeInsert: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be updated in the database.\n     */\n    isCascadeUpdate: boolean = false;\n\n    /**\n     * If set to true then related objects are allowed to be remove from the database.\n     */\n    isCascadeRemove: boolean = false;\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    isNullable: boolean = true;\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    deferrable?: DeferrableType;\n\n    /**\n     * Gets the property's type to which this relation is applied.\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Category.\n     */\n    type: Function|string;\n\n    /**\n     * Indicates if this side is an owner of this relation.\n     */\n    isOwning: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"one-to-one\".\n     */\n    isOneToOne: boolean = false;\n\n    /**\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\n     * Owner side means this side of relation has a join column in the table.\n     */\n    isOneToOneOwner: boolean = false;\n\n    /**\n     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n     */\n    isWithJoinColumn: boolean = false;\n\n    /**\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n     * NOT owner side means this side of relation does not have a join column in the table.\n     */\n    isOneToOneNotOwner: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"one-to-many\".\n     */\n    isOneToMany: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-one\".\n     */\n    isManyToOne: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\".\n     */\n    isManyToMany: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n     * Owner side means this side of relation has a join table.\n     */\n    isManyToManyOwner: boolean = false;\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n     * Not owner side means this side of relation does not have a join table.\n     */\n    isManyToManyNotOwner: boolean = false;\n\n    /**\n     * Gets the property path of the inverse side of the relation.\n     */\n    inverseSidePropertyPath: string;\n\n    /**\n     * Inverse side of the relation set by user.\n     *\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\n     * either can be a function that accepts a map of properties with the object and returns one of them.\n     * Second approach is used to achieve type-safety.\n     */\n    givenInverseSidePropertyFactory: PropertyTypeFactory<any>;\n\n    /**\n     * Gets the relation metadata of the inverse side of this relation.\n     */\n    inverseRelation?: RelationMetadata;\n\n    /**\n     * Join table name.\n     */\n    joinTableName: string;\n\n    /**\n     * Foreign keys created for this relation.\n     */\n    foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Join table columns.\n     * Join columns can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be empty.\n     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n     * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n     */\n    joinColumns: ColumnMetadata[] = [];\n\n    /**\n     * Inverse join table columns.\n     * Inverse join columns are supported only for many-to-many relations\n     * and can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be undefined.\n     */\n    inverseJoinColumns: ColumnMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        args: RelationMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata!;\n        const args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n\n        this.isLazy = args.isLazy || false;\n        this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        this.isPrimary = args.options.primary || false;\n        this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;\n        this.onDelete = args.options.onDelete;\n        this.onUpdate = args.options.onUpdate;\n        this.deferrable = args.options.deferrable;\n        this.isEager = args.options.eager || false;\n        this.persistenceEnabled = args.options.persistence === false ? false : true;\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        this.type = args.type instanceof Function ? (args.type as () => any)() : args.type;\n\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    getRelationIdMap(entity: ObjectLiteral): ObjectLiteral|undefined {\n        const joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation!.joinColumns;\n        const referencedColumns = joinColumns.map(joinColumn => joinColumn.referencedColumn!);\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata.getValueMap(entity, referencedColumns);\n    }\n\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureRelationIdMap(id: any): ObjectLiteral {\n        if (id instanceof Object)\n            return id;\n\n        const joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation!.joinColumns;\n        const referencedColumns = joinColumns.map(joinColumn => joinColumn.referencedColumn!);\n\n        if (referencedColumns.length > 1)\n            throw new Error(`Cannot create relation id map for a single value because relation contains multiple referenced columns.`);\n\n        return referencedColumns[0].createValueMap(id);\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity: ObjectLiteral, getLazyRelationsPromiseValue: boolean = false): any|undefined {\n        if (entity === null || entity === undefined) return undefined;\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue(propertyNames, value[propertyName]);\n                    }\n                    return undefined;\n                }\n                return value;\n            };\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n\n            if (this.isLazy) {\n                if (embeddedObject[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"];\n\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName];\n\n                return undefined;\n            }\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\n\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"];\n\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName];\n\n                return undefined;\n            }\n            return entity[this.propertyName];\n        }\n    }\n\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        const propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\n\n        if (this.embeddedMetadata) {\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n\n        } else {\n            entity[propertyName] = value;\n        }\n    }\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any) {\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: value };\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    build() {\n        this.propertyPath = this.buildPropertyPath();\n    }\n\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    registerForeignKeys(...foreignKeys: ForeignKeyMetadata[]) {\n        this.foreignKeys.push(...foreignKeys);\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n    }\n\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    registerJunctionEntityMetadata(junctionEntityMetadata: EntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    }\n\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    buildInverseSidePropertyPath(): string {\n\n        if (this.givenInverseSidePropertyFactory) {\n            const ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n\n        } else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n\n        } else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    buildPropertyPath(): string {\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\n    }\n\n}\n","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {UniqueMetadata} from \"./UniqueMetadata\";\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this embedded is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Parent embedded in the case if this embedded inside other embedded.\n     */\n    parentEmbeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Embedded target type.\n     */\n    type: Function;\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    propertyName: string;\n\n    /**\n     * Gets full path to this embedded property (including embedded property name).\n     * Full path is relevant when embedded is used inside other embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters\".\n     */\n    propertyPath: string;\n\n    /**\n     * Columns inside this embed.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Relations inside this embed.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * Entity listeners inside this embed.\n     */\n    listeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Indices applied to the embed columns.\n     */\n    indices: IndexMetadata[] = [];\n\n    /**\n     * Uniques applied to the embed columns.\n     */\n    uniques: UniqueMetadata[] = [];\n\n    /**\n     * Relation ids inside this embed.\n     */\n    relationIds: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts inside this embed.\n     */\n    relationCounts: RelationCountMetadata[] = [];\n\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Prefix of the embedded, used instead of propertyName.\n     * If set to empty string or false, then prefix is not set at all.\n     */\n    customPrefix: string|boolean|undefined;\n\n    /**\n     * Gets the prefix of the columns.\n     * By default its a property name of the class where this prefix is.\n     * But if custom prefix is set then it takes its value as a prefix.\n     * However if custom prefix is set to empty string or false, then prefix to column is not applied at all.\n     */\n    prefix: string;\n\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n    parentPropertyNames: string[] = [];\n\n    /**\n     * Returns array of prefixes of current embed and all its parent embeds.\n     */\n    parentPrefixes: string[] = [];\n\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    embeddedMetadataTree: EmbeddedMetadata[] = [];\n\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    columnsFromTree: ColumnMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    relationsFromTree: RelationMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    listenersFromTree: EntityListenerMetadata[] = [];\n\n    /**\n     * Indices of this embed and all indices from its child embeds.\n     */\n    indicesFromTree: IndexMetadata[] = [];\n\n    /**\n     * Uniques of this embed and all uniques from its child embeds.\n     */\n    uniquesFromTree: UniqueMetadata[] = [];\n\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n    relationIdsFromTree: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n    relationCountsFromTree: RelationCountMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: EmbeddedMetadataArgs,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create(): any {\n        return new (this.type as any);\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: Connection): this {\n        this.embeddeds.forEach(embedded => embedded.build(connection));\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.uniquesFromTree = this.buildUniquesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        return this;\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    protected buildPartialPrefix(): string[] {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName];\n        }\n\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return [];\n        }\n\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix];\n        }\n\n        throw new Error(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);\n    }\n\n    protected buildPrefix(connection: Connection): string {\n        if (connection.driver instanceof MongoDriver)\n            return this.propertyName;\n\n        let prefixes: string[] = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n\n        prefixes.push(...this.buildPartialPrefix());\n\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    }\n\n    protected buildParentPropertyNames(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    }\n\n    protected buildParentPrefixes(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();\n    }\n\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    }\n\n    protected buildColumnsFromTree(): ColumnMetadata[] {\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n    }\n\n    protected buildRelationsFromTree(): RelationMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n    }\n\n    protected buildListenersFromTree(): EntityListenerMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\n    }\n\n    protected buildIndicesFromTree(): IndexMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\n    }\n\n    protected buildUniquesFromTree(): UniqueMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);\n    }\n\n    protected buildRelationIdsFromTree(): RelationIdMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\n    }\n\n    protected buildRelationCountsFromTree(): RelationCountMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\n    }\n\n}\n","import {RelationIdMetadataArgs} from \"../metadata-args/RelationIdMetadataArgs\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Relation from which ids will be extracted.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: RelationIdMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    setValue(entity: ObjectLiteral) {\n        const inverseEntity = this.relation.getEntityValue(entity);\n\n        if (inverseEntity instanceof Array) {\n            entity[this.propertyName] = inverseEntity.map(item => {\n               return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n            }).filter(item => item !== null && item !== undefined);\n\n        } else {\n            const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n            if (value !== undefined)\n                entity[this.propertyName] = value;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n\n        this.relation = relation;\n    }\n\n\n}","import {RelationCountMetadataArgs} from \"../metadata-args/RelationCountMetadataArgs\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Relation which needs to be counted.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: RelationCountMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);\n\n        this.relation = relation;\n    }\n\n}","/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity: Function): Function[] {\n        const tree: Function[] = [entity];\n        const getPrototypeOf = (object: Function): void => {\n            const proto = Object.getPrototypeOf(object);\n            if (proto && proto.name) {\n                tree.push(proto);\n                getPrototypeOf(proto);\n            }\n        };\n        getPrototypeOf(entity);\n        return tree;\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1: Function, target2: Function) {\n        return target1.prototype instanceof target2;\n    }\n\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget<T extends { target?: any }>(array: T[], classes?: any[]): T[] {\n        if (!classes) return array;\n        return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\n    }\n\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {DeferrableType} from \"./types/DeferrableType\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\nimport {OnUpdateType} from \"./types/OnUpdateType\";\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata;\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = [];\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType;\n\n    /**\n     * When to check the constraints of a foreign key.\n     */\n    deferrable?: DeferrableType;\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTablePath: string;\n\n    /**\n     * Gets foreign key name.\n     */\n    name: string;\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        referencedEntityMetadata: EntityMetadata,\n        namingStrategy?: NamingStrategyInterface,\n        columns: ColumnMetadata[],\n        referencedColumns: ColumnMetadata[],\n        onDelete?: OnDeleteType,\n        onUpdate?: OnUpdateType,\n        deferrable?: DeferrableType,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete || \"NO ACTION\";\n        this.onUpdate = options.onUpdate || \"NO ACTION\";\n        this.deferrable = options.deferrable;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map(column => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n        this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames);\n    }\n\n}\n","import {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Creates EntityMetadata for junction tables.\n * Junction tables are tables generated by many-to-many relations.\n */\nexport class JunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\n     */\n    build(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): EntityMetadata {\n        const referencedColumns = this.collectReferencedColumns(relation, joinTable);\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\n\n        const joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(\n            relation.entityMetadata.tableNameWithoutPrefix,\n            relation.inverseEntityMetadata.tableNameWithoutPrefix,\n            relation.propertyPath,\n            relation.inverseRelation ? relation.inverseRelation.propertyName : \"\"\n        );\n\n        const entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: joinTableName,\n                type: \"junction\",\n                database: joinTable.database || relation.entityMetadata.database,\n                schema: joinTable.schema || relation.entityMetadata.schema,\n            }\n        });\n        entityMetadata.build();\n\n        // create original side junction columns\n        const junctionColumns = referencedColumns.map(referencedColumn => {\n            const joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumnArgs => {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name\n                : this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: referencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        name: columnName,\n                        length: !referencedColumn.length\n                        && (this.connection.driver instanceof MysqlDriver)\n                        && (referencedColumn.generationStrategy === \"uuid\" || referencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        width: referencedColumn.width,\n                        type: referencedColumn.type,\n                        precision: referencedColumn.precision,\n                        scale: referencedColumn.scale,\n                        charset: referencedColumn.charset,\n                        collation: referencedColumn.collation,\n                        zerofill: referencedColumn.zerofill,\n                        unsigned: referencedColumn.zerofill ? true : referencedColumn.unsigned,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n\n        // create inverse side junction columns\n        const inverseJunctionColumns = inverseReferencedColumns.map(inverseReferencedColumn => {\n            const joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumnArgs => {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name\n                : this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: inverseReferencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        length: !inverseReferencedColumn.length\n                        && (this.connection.driver instanceof MysqlDriver)\n                        && (inverseReferencedColumn.generationStrategy === \"uuid\" || inverseReferencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : inverseReferencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        type: inverseReferencedColumn.type,\n                        precision: inverseReferencedColumn.precision,\n                        scale: inverseReferencedColumn.scale,\n                        charset: inverseReferencedColumn.charset,\n                        collation: inverseReferencedColumn.collation,\n                        zerofill: inverseReferencedColumn.zerofill,\n                        unsigned: inverseReferencedColumn.zerofill ? true : inverseReferencedColumn.unsigned,\n                        name: columnName,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n\n        this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns);\n\n        // set junction table columns\n        entityMetadata.ownerColumns = junctionColumns;\n        entityMetadata.inverseColumns = inverseJunctionColumns;\n        entityMetadata.ownColumns = [...junctionColumns, ...inverseJunctionColumns];\n        entityMetadata.ownColumns.forEach(column => column.relationMetadata = relation);\n\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.entityMetadata,\n                columns: junctionColumns,\n                referencedColumns: referencedColumns,\n                onDelete: relation.onDelete ||  \"CASCADE\"\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.inverseEntityMetadata,\n                columns: inverseJunctionColumns,\n                referencedColumns: inverseReferencedColumns,\n                onDelete: relation.onDelete || \"CASCADE\"\n            }),\n        ];\n\n        // create junction table indices\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: junctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: inverseJunctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n\n        // finally return entity metadata\n        return entityMetadata;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;\n        if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\n            return relation.entityMetadata.columns.filter(column => column.isPrimary);\n        } else {\n            return joinTable.joinColumns.map(joinColumn => {\n                const referencedColumn = relation.entityMetadata.columns.find(column => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    /**\n     * Collects inverse referenced columns from the given join column args.\n     */\n    protected collectInverseReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): ColumnMetadata[] {\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns!.find(joinColumn => !!joinColumn.referencedColumnName) : false;\n        if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\n            return relation.inverseEntityMetadata.primaryColumns;\n        } else {\n            return joinTable.inverseJoinColumns!.map(joinColumn => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    protected changeDuplicatedColumnNames(junctionColumns: ColumnMetadata[], inverseJunctionColumns: ColumnMetadata[]) {\n        junctionColumns.forEach(junctionColumn => {\n            inverseJunctionColumns.forEach(inverseJunctionColumn => {\n                if (junctionColumn.givenDatabaseName === inverseJunctionColumn.givenDatabaseName) {\n                    const junctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);\n                    junctionColumn.propertyName = junctionColumnName;\n                    junctionColumn.givenDatabaseName = junctionColumnName;\n\n                    const inverseJunctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);\n                    inverseJunctionColumn.propertyName = inverseJunctionColumnName;\n                    inverseJunctionColumn.givenDatabaseName = inverseJunctionColumnName;\n                }\n            });\n        });\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\n\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    build(parentClosureEntityMetadata: EntityMetadata) {\n\n        // create entity metadata itself\n        const entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\"\n            }\n        });\n        entityMetadata.build();\n\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"ancestor\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: primaryColumn.propertyName + \"_ancestor\", // todo: naming strategy\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"descendant\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: primaryColumn.propertyName + \"_descendant\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    }\n                }\n            }));\n        });\n\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"level\",\n                    options: {\n                        type: this.connection.driver.mappedDataTypes.treeLevel,\n                    }\n                }\n            }));\n        }\n\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                // onDelete: \"CASCADE\" // todo: does not work in mssql for some reason\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                // onDelete: \"CASCADE\" // todo: does not work in mssql for some reason\n            }),\n        ];\n\n        return entityMetadata;\n    }\n\n}\n","import {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\n\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this unique constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata if this unique was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Unique columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final unique constraint name.\n     * If unique constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        columns?: ColumnMetadata[],\n        args?: UniqueMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n\n        const map: { [key: string]: number } = {};\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = [];\n            if (this.givenColumnNames instanceof Array) {\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\n                    if (this.embeddedMetadata)\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\n\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n            } else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (columnsFnResult instanceof Array) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyPaths.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            this.columns = columnPropertyPaths.map(propertyName => {\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyName);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyName);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new Error(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyName);\n            })\n            .reduce((a, b) => a.concat(b));\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n\n            return updatedMap;\n        }, {} as { [key: string]: number });\n\n        this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName));\n        return this;\n    }\n\n}\n","import {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {UniqueMetadata} from \"../metadata/UniqueMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {Connection} from \"../connection/Connection\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\n\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go thought each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nexport class RelationJoinColumnBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    build(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): {\n      foreignKey: ForeignKeyMetadata|undefined,\n      uniqueConstraint: UniqueMetadata|undefined,\n    } {\n        const referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        if (!referencedColumns.length)\n            return { foreignKey: undefined, uniqueConstraint: undefined }; // this case is possible only for one-to-one non owning side\n\n        const columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        const foreignKey = new ForeignKeyMetadata({\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns: columns,\n            referencedColumns: referencedColumns,\n            onDelete: relation.onDelete,\n            onUpdate: relation.onUpdate,\n            deferrable: relation.deferrable,\n        });\n\n        // Oracle does not allow both primary and unique constraints on the same column\n        if (this.connection.driver instanceof OracleDriver && columns.every(column => column.isPrimary))\n            return { foreignKey, uniqueConstraint: undefined };\n\n        // CockroachDB requires UNIQUE constraints on referenced columns\n        if (referencedColumns.length > 0 && relation.isOneToOne) {\n            const uniqueConstraint = new UniqueMetadata({\n                entityMetadata: relation.entityMetadata,\n                columns: foreignKey.columns,\n                args: {\n                    name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(c => c.databaseName)),\n                    target: relation.entityMetadata.target,\n                }\n            });\n            uniqueConstraint.build(this.connection.namingStrategy);\n            return {foreignKey, uniqueConstraint};\n        }\n\n        return { foreignKey, uniqueConstraint: undefined };\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinColumns.find(joinColumnArgs => !!joinColumnArgs.referencedColumnName);\n        const manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        const hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n\n        } else { // cases with referenced columns defined\n            return joinColumns.map(joinColumn => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n\n                return referencedColumn;\n            });\n        }\n    }\n\n    /**\n     * Collects columns from the given join column args.\n     */\n    private collectColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata, referencedColumns: ColumnMetadata[]): ColumnMetadata[] {\n        return referencedColumns.map(referencedColumn => {\n\n            // in the case if relation has join column with only name set we need this check\n            const joinColumnMetadataArg = joinColumns.find(joinColumn => {\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumn.name;\n            });\n            const joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n\n            let relationalColumn = relation.entityMetadata.ownColumns.find(column => column.databaseName === joinColumnName);\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length: !referencedColumn.length\n                                        && (this.connection.driver instanceof MysqlDriver)\n                                        && (referencedColumn.generationStrategy === \"uuid\" || referencedColumn.type === \"uuid\")\n                                    ? \"36\"\n                                    : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable\n                        }\n                    }\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(this.connection);\n            return relationalColumn;\n        });\n    }\n}\n","import {EventListenerType} from \"./types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n\n    // ---------------------------------------------------------------------\n    // Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the listener.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata of the listener, in the case if listener is in embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    type: EventListenerType;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: { entityMetadata: EntityMetadata, embeddedMetadata?: EmbeddedMetadata, args: EntityListenerMetadataArgs }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.type = options.args.type;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity: ObjectLiteral) { // todo: create in entity metadata method like isInherited?\n        return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target); // todo: also need to implement entity schema inheritance\n    }\n\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity: ObjectLiteral) {\n        if (!this.embeddedMetadata)\n            return entity[this.propertyName]();\n\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    protected callEntityEmbeddedMethod(entity: ObjectLiteral, propertyPaths: string[]): void {\n        const propertyPath = propertyPaths.shift();\n        if (!propertyPath || !entity[propertyPath])\n            return;\n\n        if (propertyPaths.length === 0) {\n            entity[propertyPath][this.propertyName]();\n        } else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n        }\n    }\n\n}\n","import {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\n\n/**\n * Check metadata contains all information about table's check constraints.\n */\nexport class CheckMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this check constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Check expression.\n     */\n    expression: string;\n\n    /**\n     * User specified check constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * Final check constraint name.\n     * If check constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If check constraint name was not given then its generated.\n     */\n    name: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args?: CheckMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend check constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.name = this.givenName ? this.givenName : namingStrategy.checkConstraintName(this.entityMetadata.tablePath, this.expression);\n        return this;\n    }\n\n}","import {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ExclusionMetadataArgs} from \"../metadata-args/ExclusionMetadataArgs\";\n\n/**\n * Exclusion metadata contains all information about table's exclusion constraints.\n */\nexport class ExclusionMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this exclusion constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Exclusion expression.\n     */\n    expression: string;\n\n    /**\n     * User specified exclusion constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * Final exclusion constraint name.\n     * If exclusion constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If exclusion constraint name was not given then its generated.\n     */\n    name: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args?: ExclusionMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend exclusion constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.name = this.givenName ? this.givenName : namingStrategy.exclusionConstraintName(this.entityMetadata.tablePath, this.expression);\n        return this;\n    }\n\n}\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"../metadata/RelationIdMetadata\";\nimport {RelationCountMetadata} from \"../metadata/RelationCountMetadata\";\nimport {MetadataUtils} from \"./MetadataUtils\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\nimport {RelationJoinColumnBuilder} from \"./RelationJoinColumnBuilder\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\nimport {UniqueMetadata} from \"../metadata/UniqueMetadata\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {CheckMetadata} from \"../metadata/CheckMetadata\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {ExclusionMetadata} from \"../metadata/ExclusionMetadata\";\n\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to build entity metadatas of the junction entities.\n     */\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder;\n\n    /**\n     * Used to build entity metadatas of the closure junction entities.\n     */\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder;\n\n    /**\n     * Used to build join columns of the relations.\n     */\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private metadataArgsStorage: MetadataArgsStorage) {\n\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    build(entityClasses?: Function[]): EntityMetadata[] {\n\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        const allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        const realTables = allTables.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"entity-child\" || table.type === \"view\");\n\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        const entityMetadatas = realTables.map(tableArgs => this.createEntityMetadata(tableArgs));\n\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach(entityMetadata => this.computeParentEntityMetadata(entityMetadatas, entityMetadata));\n\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach(metadata => {\n            metadata.childEntityMetadatas = entityMetadatas.filter(childMetadata => {\n                return metadata.target instanceof Function\n                    && childMetadata.target instanceof Function\n                    && MetadataUtils.isInherited(childMetadata.target, metadata.target);\n            });\n        });\n\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"entity-child\")\n            .forEach(entityMetadata => entityMetadata.build());\n\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType === \"entity-child\")\n            .forEach(entityMetadata => entityMetadata.build());\n\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"entity-child\")\n            .forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType === \"entity-child\")\n            .forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach(entityMetadata => this.computeEntityMetadataStep2(entityMetadata));\n\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach(entityMetadata => this.computeInverseProperties(entityMetadata, entityMetadatas));\n\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(entityMetadata => entityMetadata.tableType !== \"entity-child\")\n            .forEach(entityMetadata => {\n\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\n                entityMetadata.relations.filter(relation => relation.isOneToOne || relation.isManyToOne).forEach(relation => {\n                    const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                    const { foreignKey, uniqueConstraint } = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args\n                    if (foreignKey) {\n                        relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                        entityMetadata.foreignKeys.push(foreignKey);\n                    }\n                    if (uniqueConstraint) {\n                        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof SqlServerDriver) {\n                            const index = new IndexMetadata({\n                                entityMetadata: uniqueConstraint.entityMetadata,\n                                columns: uniqueConstraint.columns,\n                                args: {\n                                    target: uniqueConstraint.target!,\n                                    name: uniqueConstraint.name,\n                                    unique: true,\n                                    synchronize: true\n                                }\n                            });\n\n                            if (this.connection.driver instanceof SqlServerDriver) {\n                                index.where = index.columns.map(column => {\n                                    return `${this.connection.driver.escape(column.databaseName)} IS NOT NULL`;\n                                }).join(\" AND \");\n                            }\n\n                            if (relation.embeddedMetadata) {\n                                relation.embeddedMetadata.indices.push(index);\n                            } else {\n                                relation.entityMetadata.ownIndices.push(index);\n                            }\n                            this.computeEntityMetadataStep2(entityMetadata);\n\n                        } else {\n                            if (relation.embeddedMetadata) {\n                                relation.embeddedMetadata.uniques.push(uniqueConstraint);\n                            } else {\n                                relation.entityMetadata.ownUniques.push(uniqueConstraint);\n                            }\n                            this.computeEntityMetadataStep2(entityMetadata);\n                        }\n                    }\n\n                    if (foreignKey && this.connection.driver instanceof CockroachDriver) {\n                        const index = new IndexMetadata({\n                            entityMetadata: relation.entityMetadata,\n                            columns: foreignKey.columns,\n                            args: {\n                                target: relation.entityMetadata.target!,\n                                synchronize: true\n                            }\n                        });\n                        if (relation.embeddedMetadata) {\n                            relation.embeddedMetadata.indices.push(index);\n                        } else {\n                            relation.entityMetadata.ownIndices.push(index);\n                        }\n                        this.computeEntityMetadataStep2(entityMetadata);\n                    }\n                });\n\n                // create junction entity metadatas for entity many-to-many relations\n                entityMetadata.relations.filter(relation => relation.isManyToMany).forEach(relation => {\n                    const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName)!;\n                    if (!joinTable) return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n\n                    // here we create a junction entity metadata for a new junction table of many-to-many relation\n                    const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                    relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);\n                    relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n\n                    // compute new entity metadata properties and push it to entity metadatas pool\n                    this.computeEntityMetadataStep2(junctionEntityMetadata);\n                    this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                    entityMetadatas.push(junctionEntityMetadata);\n                });\n\n        });\n\n        // update entity metadata depend properties\n        entityMetadatas\n            .forEach(entityMetadata => {\n                entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(relation => relation.isWithJoinColumn);\n                entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\n            });\n\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter(metadata => metadata.treeType === \"closure-table\")\n            .forEach(entityMetadata => {\n                const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n                entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n                this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n                this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(closureJunctionEntityMetadata);\n            });\n\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(metadata => metadata.inheritancePattern === \"STI\" && metadata.discriminatorColumn)\n            .forEach(entityMetadata => this.createKeysForTableInheritance(entityMetadata));\n\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.indices.forEach(index => index.build(this.connection.namingStrategy));\n        });\n\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.uniques.forEach(unique => unique.build(this.connection.namingStrategy));\n        });\n\n        // build all check constraints\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.checks.forEach(check => check.build(this.connection.namingStrategy));\n        });\n\n        // build all exclusion constraints\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.exclusions.forEach(exclusion => exclusion.build(this.connection.namingStrategy));\n        });\n\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter(metadata => metadata.target instanceof Function)\n            .forEach(entityMetadata => {\n                entityMetadata.relations\n                    .filter(relation => relation.isLazy)\n                    .forEach(relation => {\n                        this.connection.relationLoader.enableLazyLoad(relation, (entityMetadata.target as Function).prototype);\n                    });\n            });\n\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.columns.forEach(column => {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                const generated = this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n                if (generated) {\n                    column.isGenerated = true;\n                    column.generationStrategy = generated.strategy;\n                    if (generated.strategy === \"uuid\") {\n                        column.type = \"uuid\";\n                    } else if (generated.strategy === \"rowid\") {\n                        column.type = \"int\";\n                    } else {\n                        column.type = column.type || Number;\n                    }\n                    column.build(this.connection);\n                    this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n\n        });\n\n        return entityMetadatas;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    protected createEntityMetadata(tableArgs: TableMetadataArgs): EntityMetadata {\n\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        const inheritanceTree: any[] = tableArgs.target instanceof Function\n            ? MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n\n        const tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        const tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        let singleTableChildrenTargets: any[];\n        if ((tableInheritance && tableInheritance.pattern === \"STI\") || tableArgs.type === \"entity-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map(args => args.target)\n                .filter(target => target instanceof Function);\n\n            inheritanceTree.push(...singleTableChildrenTargets);\n        }\n\n        return new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined\n        });\n    }\n\n    protected computeParentEntityMetadata(allEntityMetadatas: EntityMetadata[], entityMetadata: EntityMetadata) {\n\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(allEntityMetadata => {\n                return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target as Function) !== -1 && allEntityMetadata.inheritancePattern === \"STI\";\n            })!;\n        }\n    }\n\n    protected computeEntityMetadataStep1(allEntityMetadatas: EntityMetadata[], entityMetadata: EntityMetadata) {\n\n        const entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n\n        const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n        entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : (entityMetadata.target as any).name; // todo: pass this to naming strategy to generate a name\n\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree))\n            .map((embedded: EmbeddedMetadata): EmbeddedMetadata => {\n                 if (entityMetadata.inheritancePattern === \"STI\") {\n                     embedded.columns = embedded.columns.map((column: ColumnMetadata): ColumnMetadata => {\n                         column.isNullable = true;\n                         return column;\n                     });\n                 }\n                 return embedded;\n            });\n\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map(args => {\n\n                // for single table children we reuse columns created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.ownColumns.find(column => column.propertyName === args.propertyName)!;\n\n                const column = new ColumnMetadata({ connection: this.connection, entityMetadata, args });\n\n                // if single table inheritance used, we need to mark all inherit table columns as nullable\n                const columnInSingleTableInheritedChild = allEntityMetadatas.find(otherEntityMetadata => otherEntityMetadata.tableType === \"entity-child\" && otherEntityMetadata.target === args.target);\n                if (columnInSingleTableInheritedChild)\n                    column.isNullable = true;\n                return column;\n            });\n\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            const discriminatorColumnName = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : \"type\";\n            let discriminatorColumn = entityMetadata.ownColumns.find(column => column.propertyName === discriminatorColumnName);\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName,\n                            type: \"varchar\",\n                            nullable: false\n                        }\n                    }\n                });\n                discriminatorColumn.isVirtual = true;\n                discriminatorColumn.isDiscriminator = true;\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            } else {\n                discriminatorColumn.isDiscriminator = true;\n            }\n        }\n\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            const discriminatorColumn = entityMetadata.parentEntityMetadata.ownColumns.find(column => column.isDiscriminator);\n            if (discriminatorColumn && !entityMetadata.ownColumns.find(column => column === discriminatorColumn)) {\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n        }\n\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                materializedPath: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"mpath\",\n                    options: /*tree.column || */ {\n                        name: \"mpath\",\n                        type: \"varchar\",\n                        nullable: true,\n                        default: \"\"\n                    }\n                }\n            }));\n\n        } else if (entityMetadata.treeType === \"nested-set\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetLeft: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"nsleft\",\n                    options: /*tree.column || */ {\n                        name: \"nsleft\",\n                        type: \"integer\",\n                        nullable: false,\n                        default: 1\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetRight: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"nsright\",\n                    options: /*tree.column || */ {\n                        name: \"nsright\",\n                        type: \"integer\",\n                        nullable: false,\n                        default: 2\n                    }\n                }\n            }));\n        }\n\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(args => {\n\n            // for single table children we reuse relations created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownRelations.find(relation => relation.propertyName === args.propertyName)!;\n\n            return new RelationMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(args => {\n\n            // for single table children we reuse relation ids created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationIds.find(relationId => relationId.propertyName === args.propertyName)!;\n\n            return new RelationIdMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(args => {\n\n            // for single table children we reuse relation counts created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationCounts.find(relationCount => relationCount.propertyName === args.propertyName)!;\n\n            return new RelationCountMetadata({ entityMetadata, args });\n        });\n        entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(args => {\n            return new EntityListenerMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(args => {\n            return new CheckMetadata({ entityMetadata, args });\n        });\n\n        // Only PostgreSQL supports exclusion constraints.\n        if (this.connection.driver instanceof PostgresDriver) {\n            entityMetadata.exclusions = this.metadataArgsStorage.filterExclusions(entityMetadata.inheritanceTree).map(args => {\n                return new ExclusionMetadata({ entityMetadata, args });\n            });\n        }\n\n        if (this.connection.driver instanceof CockroachDriver) {\n            entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)\n                .filter(args => !args.unique)\n                .map(args => {\n                    return new IndexMetadata({entityMetadata, args});\n                });\n\n            const uniques = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)\n                .filter(args => args.unique)\n                .map(args => {\n                    return new UniqueMetadata({\n                        entityMetadata: entityMetadata,\n                        args: {\n                            target: args.target,\n                            name: args.name,\n                            columns: args.columns,\n                        }\n                    });\n                });\n            entityMetadata.ownUniques.push(...uniques);\n\n        } else {\n            entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(args => {\n                return new IndexMetadata({entityMetadata, args});\n            });\n        }\n\n        // Mysql stores unique constraints as unique indices.\n        if (this.connection.driver instanceof MysqlDriver) {\n            const indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {\n                return new IndexMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                        unique: true,\n                        synchronize: true\n                    }\n                });\n            });\n            entityMetadata.ownIndices.push(...indices);\n\n        } else {\n            const uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {\n                return new UniqueMetadata({ entityMetadata, args });\n            });\n            entityMetadata.ownUniques.push(...uniques);\n        }\n    }\n\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    protected createEmbeddedsRecursively(entityMetadata: EntityMetadata, embeddedArgs: EmbeddedMetadataArgs[]): EmbeddedMetadata[] {\n        return embeddedArgs.map(embeddedArgs => {\n            const embeddedMetadata = new EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\n            const targets = MetadataUtils.getInheritanceTree(embeddedMetadata.type);\n\n            embeddedMetadata.columns = this.metadataArgsStorage.filterColumns(targets).map(args => {\n                return new ColumnMetadata({ connection: this.connection, entityMetadata, embeddedMetadata, args});\n            });\n            embeddedMetadata.relations = this.metadataArgsStorage.filterRelations(targets).map(args => {\n                return new RelationMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.listeners = this.metadataArgsStorage.filterListeners(targets).map(args => {\n                return new EntityListenerMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.indices = this.metadataArgsStorage.filterIndices(targets).map(args => {\n                return new IndexMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.uniques = this.metadataArgsStorage.filterUniques(targets).map(args => {\n                return new UniqueMetadata({ entityMetadata, embeddedMetadata, args });\n            });\n            embeddedMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(targets).map(args => {\n                return new RelationIdMetadata({ entityMetadata, args });\n            });\n            embeddedMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(targets).map(args => {\n                return new RelationCountMetadata({ entityMetadata, args });\n            });\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(targets));\n            embeddedMetadata.embeddeds.forEach(subEmbedded => subEmbedded.parentEmbeddedMetadata = embeddedMetadata);\n            entityMetadata.allEmbeddeds.push(embeddedMetadata);\n            return embeddedMetadata;\n        });\n    }\n\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    protected computeEntityMetadataStep2(entityMetadata: EntityMetadata) {\n        entityMetadata.embeddeds.forEach(embedded => embedded.build(this.connection));\n        entityMetadata.embeddeds.forEach(embedded => {\n            embedded.columnsFromTree.forEach(column => column.build(this.connection));\n            embedded.relationsFromTree.forEach(relation => relation.build());\n        });\n        entityMetadata.ownColumns.forEach(column => column.build(this.connection));\n        entityMetadata.ownRelations.forEach(relation => relation.build());\n        entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(relation => relation.isEager);\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(relation => relation.isLazy);\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOne);\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(relation => relation.isOneToMany);\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(relation => relation.isManyToOne);\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToMany);\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOneOwner);\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToManyOwner);\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(relation => relation.isTreeParent);\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(relation => relation.isTreeChildren);\n        entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.listenersFromTree), entityMetadata.ownListeners);\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(listener => listener.type === \"after-load\");\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(listener => listener.type === \"after-insert\");\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === \"after-update\");\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === \"after-remove\");\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(listener => listener.type === \"before-insert\");\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === \"before-update\");\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === \"before-remove\");\n        entityMetadata.indices = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.indicesFromTree), entityMetadata.ownIndices);\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.uniquesFromTree), entityMetadata.ownUniques);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(column => column.isPrimary);\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(column => !column.isVirtual);\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(column => column.closureType === \"ancestor\");\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(column => column.closureType === \"descendant\");\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.isObjectId);\n        entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n        entityMetadata.createDateColumn = entityMetadata.columns.find(column => column.isCreateDate);\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(column => column.isUpdateDate);\n        entityMetadata.versionColumn = entityMetadata.columns.find(column => column.isVersion);\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(column => column.isDiscriminator);\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(column => column.isTreeLevel);\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(column => column.isNestedSetLeft);\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(column => column.isNestedSetRight);\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(column => column.isMaterializedPath);\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(column => column.isObjectId);\n        entityMetadata.foreignKeys.forEach(foreignKey => foreignKey.build(this.connection.namingStrategy));\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach(relationId => relationId.build());\n        entityMetadata.relationCounts.forEach(relationCount => relationCount.build());\n        entityMetadata.embeddeds.forEach(embedded => {\n            embedded.relationIdsFromTree.forEach(relationId => relationId.build());\n            embedded.relationCountsFromTree.forEach(relationCount => relationCount.build());\n        });\n    }\n\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    protected computeInverseProperties(entityMetadata: EntityMetadata, entityMetadatas: EntityMetadata[]) {\n        entityMetadata.relations.forEach(relation => {\n\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\n            if (!inverseEntityMetadata)\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(foundRelation => foundRelation.propertyPath === relation.inverseSidePropertyPath);\n        });\n    }\n\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\n        entityMetadata.indices.push(\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.discriminatorColumn!],\n                args: {\n                    target: entityMetadata.target,\n                    unique: false\n                }\n            }),\n        );\n    }\n\n}\n","import {RelationMetadataArgs} from \"./RelationMetadataArgs\";\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\nimport {TransactionRepositoryMetadataArgs} from \"./TransactionRepositoryMetadataArgs\";\nimport {MetadataUtils} from \"../metadata-builder/MetadataUtils\";\nimport {GeneratedMetadataArgs} from \"./GeneratedMetadataArgs\";\nimport {TreeMetadataArgs} from \"./TreeMetadataArgs\";\nimport {UniqueMetadataArgs} from \"./UniqueMetadataArgs\";\nimport {CheckMetadataArgs} from \"./CheckMetadataArgs\";\nimport {ExclusionMetadataArgs} from \"./ExclusionMetadataArgs\";\n\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables: TableMetadataArgs[] = [];\n    readonly trees: TreeMetadataArgs[] = [];\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = [];\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = [];\n    readonly transactionRepositories: TransactionRepositoryMetadataArgs[] = [];\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = [];\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = [];\n    readonly indices: IndexMetadataArgs[] = [];\n    readonly uniques: UniqueMetadataArgs[] = [];\n    readonly checks: CheckMetadataArgs[] = [];\n    readonly exclusions: ExclusionMetadataArgs[] = [];\n    readonly columns: ColumnMetadataArgs[] = [];\n    readonly generations: GeneratedMetadataArgs[] = [];\n    readonly relations: RelationMetadataArgs[] = [];\n    readonly joinColumns: JoinColumnMetadataArgs[] = [];\n    readonly joinTables: JoinTableMetadataArgs[] = [];\n    readonly entityListeners: EntityListenerMetadataArgs[] = [];\n    readonly relationCounts: RelationCountMetadataArgs[] = [];\n    readonly relationIds: RelationIdMetadataArgs[] = [];\n    readonly embeddeds: EmbeddedMetadataArgs[] = [];\n    readonly inheritances: InheritanceMetadataArgs[] = [];\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterTables(target: Function|string): TableMetadataArgs[];\n    filterTables(target: (Function|string)[]): TableMetadataArgs[];\n    filterTables(target: (Function|string)|(Function|string)[]): TableMetadataArgs[] {\n        return this.filterByTarget(this.tables, target);\n    }\n\n    filterColumns(target: Function|string): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)[]): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)|(Function|string)[]): ColumnMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n    }\n\n    findGenerated(target: Function|string, propertyName: string): GeneratedMetadataArgs|undefined;\n    findGenerated(target: (Function|string)[], propertyName: string): GeneratedMetadataArgs|undefined;\n    findGenerated(target: (Function|string)|(Function|string)[], propertyName: string): GeneratedMetadataArgs|undefined {\n        return this.generations.find(generated => {\n            return (target instanceof Array ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n        });\n    }\n\n    findTree(target: (Function|string)|(Function|string)[]): TreeMetadataArgs|undefined {\n        return this.trees.find(tree => {\n            return (target instanceof Array ? target.indexOf(tree.target) !== -1 : tree.target === target);\n        });\n    }\n\n    filterRelations(target: Function|string): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)[]): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)|(Function|string)[]): RelationMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relations, target);\n    }\n\n    filterRelationIds(target: Function|string): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)[]): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)|(Function|string)[]): RelationIdMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n    }\n\n    filterRelationCounts(target: Function|string): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)[]): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)|(Function|string)[]): RelationCountMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n    }\n\n    filterIndices(target: Function|string): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)[]): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)|(Function|string)[]): IndexMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter(index => {\n            return target instanceof Array ? target.indexOf(index.target) !== -1 : index.target === target;\n        });\n    }\n\n    filterUniques(target: Function|string): UniqueMetadataArgs[];\n    filterUniques(target: (Function|string)[]): UniqueMetadataArgs[];\n    filterUniques(target: (Function|string)|(Function|string)[]): UniqueMetadataArgs[] {\n        return this.uniques.filter(unique => {\n            return target instanceof Array ? target.indexOf(unique.target) !== -1 : unique.target === target;\n        });\n    }\n\n    filterChecks(target: Function|string): CheckMetadataArgs[];\n    filterChecks(target: (Function|string)[]): CheckMetadataArgs[];\n    filterChecks(target: (Function|string)|(Function|string)[]): CheckMetadataArgs[] {\n        return this.checks.filter(check => {\n            return target instanceof Array ? target.indexOf(check.target) !== -1 : check.target === target;\n        });\n    }\n\n    filterExclusions(target: Function|string): ExclusionMetadataArgs[];\n    filterExclusions(target: (Function|string)[]): ExclusionMetadataArgs[];\n    filterExclusions(target: (Function|string)|(Function|string)[]): ExclusionMetadataArgs[] {\n        return this.exclusions.filter(exclusion => {\n            return target instanceof Array ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n        });\n    }\n\n    filterListeners(target: Function|string): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)[]): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)|(Function|string)[]): EntityListenerMetadataArgs[] {\n        return this.filterByTarget(this.entityListeners, target);\n    }\n\n    filterEmbeddeds(target: Function|string): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)[]): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)|(Function|string)[]): EmbeddedMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n    }\n\n    findJoinTable(target: Function|string, propertyName: string): JoinTableMetadataArgs|undefined {\n        return this.joinTables.find(joinTable => {\n            return joinTable.target === target && joinTable.propertyName === propertyName;\n        });\n    }\n\n    filterJoinColumns(target: Function|string, propertyName: string): JoinColumnMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter(joinColumn => {\n            return joinColumn.target === target && joinColumn.propertyName === propertyName;\n        });\n    }\n\n    filterSubscribers(target: Function|string): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)[]): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)|(Function|string)[]): EntitySubscriberMetadataArgs[] {\n        return this.filterByTarget(this.entitySubscribers, target);\n    }\n\n    filterNamingStrategies(target: Function|string): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)[]): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)|(Function|string)[]): NamingStrategyMetadataArgs[] {\n        return this.filterByTarget(this.namingStrategies, target);\n    }\n\n    filterTransactionEntityManagers(target: Function|string, propertyName: string): TransactionEntityMetadataArgs[] {\n        return this.transactionEntityManagers.filter(transactionEm => {\n            return (target instanceof Array ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    }\n\n    filterTransactionRepository(target: Function|string, propertyName: string): TransactionRepositoryMetadataArgs[] {\n        return this.transactionRepositories.filter(transactionEm => {\n            return (target instanceof Array ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    }\n\n    filterSingleTableChildren(target: Function|string): TableMetadataArgs[] {\n        return this.tables.filter(table => {\n            return table.target instanceof Function\n                && target instanceof Function\n                && MetadataUtils.isInherited(table.target, target)\n                && table.type === \"entity-child\";\n        });\n    }\n\n    findInheritanceType(target: Function|string): InheritanceMetadataArgs|undefined {\n        return this.inheritances.find(inheritance => inheritance.target === target);\n    }\n\n    findDiscriminatorValue(target: Function|string): DiscriminatorValueMetadataArgs|undefined {\n        return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Filters given array by a given target or targets.\n     */\n    protected filterByTarget<T extends { target: Function|string }>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        return array.filter(table => {\n            return target instanceof Array ? target.indexOf(table.target) !== -1 : table.target === target;\n        });\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    protected filterByTargetAndWithoutDuplicateProperties<T extends { target: Function|string, propertyName: string }>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = target instanceof Array ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                if (!newArray.find(newItem => newItem.propertyName === item.propertyName))\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    protected filterByTargetAndWithoutDuplicateEmbeddedProperties<T extends EmbeddedMetadataArgs>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = target instanceof Array ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find((newItem: EmbeddedMetadataArgs): boolean =>\n                    newItem.prefix === item.prefix && newItem.propertyName === item.propertyName\n                );\n                if (!isDuplicateEmbeddedProperty)\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n}\n","import {EntitySchema} from \"./EntitySchema\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMultipleColumnsOptions\";\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\nimport {ExclusionMetadataArgs} from \"../metadata-args/ExclusionMetadataArgs\";\n\n/**\n * Transforms entity schema into metadata args storage.\n * The result will be just like entities read from decorators.\n */\nexport class EntitySchemaTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Transforms entity schema into new metadata args storage object.\n     */\n    transform(schemas: EntitySchema<any>[]): MetadataArgsStorage {\n        const metadataArgsStorage = new MetadataArgsStorage();\n\n        schemas.forEach(entitySchema => {\n            const options = entitySchema.options;\n\n            // add table metadata args from the schema\n            const tableMetadata: TableMetadataArgs = {\n                target: options.target || options.name,\n                name: options.tableName,\n                database: options.database,\n                schema: options.schema,\n                type: options.type || \"regular\",\n                orderBy: options.orderBy,\n                synchronize: options.synchronize,\n                expression: options.expression\n            };\n            metadataArgsStorage.tables.push(tableMetadata);\n\n            // add columns metadata args from the schema\n            Object.keys(options.columns).forEach(columnName => {\n                const column = options.columns[columnName]!;\n                let mode: ColumnMode = \"regular\";\n                if (column.createDate)\n                    mode = \"createDate\";\n                if (column.updateDate)\n                    mode = \"updateDate\";\n                if (column.version)\n                    mode = \"version\";\n                if (column.treeChildrenCount)\n                    mode = \"treeChildrenCount\";\n                if (column.treeLevel)\n                    mode = \"treeLevel\";\n                if (column.objectId)\n                    mode = \"objectId\";\n\n                const columnAgrs: ColumnMetadataArgs = {\n                    target: options.target || options.name,\n                    mode: mode,\n                    propertyName: columnName,\n                    options: {\n                        type: column.type,\n                        name: column.objectId ? \"_id\" : column.name,\n                        length: column.length,\n                        width: column.width,\n                        nullable: column.nullable,\n                        readonly: column.readonly,\n                        update: column.update,\n                        select: column.select,\n                        insert: column.insert,\n                        primary: column.primary,\n                        unique: column.unique,\n                        comment: column.comment,\n                        default: column.default,\n                        onUpdate: column.onUpdate,\n                        precision: column.precision,\n                        scale: column.scale,\n                        zerofill: column.zerofill,\n                        unsigned: column.unsigned,\n                        charset: column.charset,\n                        collation: column.collation,\n                        enum: column.enum,\n                        asExpression: column.asExpression,\n                        generatedType: column.generatedType,\n                        hstoreType: column.hstoreType,\n                        array: column.array,\n                        transformer: column.transformer,\n                        spatialFeatureType: column.spatialFeatureType,\n                        srid: column.srid\n                    }\n                };\n                metadataArgsStorage.columns.push(columnAgrs);\n\n                if (column.generated) {\n                    const generationArgs: GeneratedMetadataArgs = {\n                        target: options.target || options.name,\n                        propertyName: columnName,\n                        strategy: typeof column.generated === \"string\" ? column.generated : \"increment\"\n                    };\n                    metadataArgsStorage.generations.push(generationArgs);\n                }\n\n                if (column.unique)\n                    metadataArgsStorage.uniques.push({ target: options.target || options.name, columns: [columnName] });\n            });\n\n            // add relation metadata args from the schema\n            if (options.relations) {\n                Object.keys(options.relations).forEach(relationName => {\n                    const relationSchema = options.relations![relationName]!;\n                    const relation: RelationMetadataArgs = {\n                        target: options.target || options.name,\n                        propertyName: relationName,\n                        relationType: relationSchema.type,\n                        isLazy: relationSchema.lazy || false,\n                        type: relationSchema.target,\n                        inverseSideProperty: relationSchema.inverseSide,\n                        isTreeParent: relationSchema.treeParent,\n                        isTreeChildren: relationSchema.treeChildren,\n                        options: {\n                            eager: relationSchema.eager || false,\n                            cascade: relationSchema.cascade,\n                            nullable: relationSchema.nullable,\n                            onDelete: relationSchema.onDelete,\n                            onUpdate: relationSchema.onUpdate,\n                            deferrable: relationSchema.deferrable,\n                            primary: relationSchema.primary,\n                            persistence: relationSchema.persistence\n                        }\n                    };\n\n                    metadataArgsStorage.relations.push(relation);\n\n                    // add join column\n                    if (relationSchema.joinColumn) {\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        } else {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinColumn.name,\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        }\n                    }\n\n                    // add join table\n                    if (relationSchema.joinTable) {\n                        if (typeof relationSchema.joinTable === \"boolean\") {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        } else {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinTable.name,\n                                database: relationSchema.joinTable.database,\n                                schema: relationSchema.joinTable.schema,\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        }\n                    }\n                });\n            }\n\n            // add index metadata args from the schema\n            if (options.indices) {\n                options.indices.forEach(index => {\n                    const indexAgrs: IndexMetadataArgs = {\n                        target: options.target || options.name,\n                        name: index.name,\n                        unique: index.unique === true ? true : false,\n                        spatial: index.spatial === true ? true : false,\n                        fulltext: index.fulltext === true ? true : false,\n                        synchronize: index.synchronize === false ? false : true,\n                        where: index.where,\n                        sparse: index.sparse,\n                        columns: index.columns\n                    };\n                    metadataArgsStorage.indices.push(indexAgrs);\n                });\n            }\n\n            // add unique metadata args from the schema\n            if (options.uniques) {\n                options.uniques.forEach(unique => {\n                    const uniqueAgrs: UniqueMetadataArgs = {\n                        target: options.target || options.name,\n                        name: unique.name,\n                        columns: unique.columns\n                    };\n                    metadataArgsStorage.uniques.push(uniqueAgrs);\n                });\n            }\n\n            // add check metadata args from the schema\n            if (options.checks) {\n                options.checks.forEach(check => {\n                    const checkAgrs: CheckMetadataArgs = {\n                        target: options.target || options.name,\n                        name: check.name,\n                        expression: check.expression\n                    };\n                    metadataArgsStorage.checks.push(checkAgrs);\n                });\n            }\n\n            // add exclusion metadata args from the schema\n            if (options.exclusions) {\n                options.exclusions.forEach(exclusion => {\n                    const exclusionArgs: ExclusionMetadataArgs = {\n                        target: options.target || options.name,\n                        name: exclusion.name,\n                        expression: exclusion.expression\n                    };\n                    metadataArgsStorage.exclusions.push(exclusionArgs);\n                });\n            }\n\n        });\n\n        return metadataArgsStorage;\n    }\n}\n","import {EntitySchemaOptions} from \"./EntitySchemaOptions\";\n\n/**\n * Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.\n */\nexport class EntitySchema<T = any> {\n\n    constructor(public options: EntitySchemaOptions<T>) {\n    }\n\n}","import {importClassesFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {getFromContainer} from \"../container\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\nimport {Connection} from \"./Connection\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    buildMigrations(migrations: (Function|string)[]): MigrationInterface[] {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(migrationDirectories)];\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    buildSubscribers(subscribers: (Function|string)[]): EntitySubscriberInterface<any>[] {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(subscriberDirectories)];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    buildEntityMetadatas(entities: (Function|EntitySchema<any>|string)[]): EntityMetadata[] {\n        // todo: instead we need to merge multiple metadata args storages\n\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(entityClass => (entityClass instanceof EntitySchema) === false) as any;\n        const entitySchemas: EntitySchema<any>[] = entityClassesOrSchemas.filter(entityClass => entityClass instanceof EntitySchema) as any;\n\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(entityDirectories)];\n        allEntityClasses.forEach(entityClass => { // if we have entity schemas loaded from directories\n            if (entityClass instanceof EntitySchema) {\n                entitySchemas.push(entityClass);\n                allEntityClasses.slice(allEntityClasses.indexOf(entityClass), 1);\n            }\n        });\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n\n}","import {Driver} from \"../../driver/Driver\";\nimport {RelationIdLoadResult} from \"../relation-id/RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Alias} from \"../Alias\";\nimport {RelationCountLoadResult} from \"../relation-count/RelationCountLoadResult\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryRunner} from \"../..\";\nimport {DriverUtils} from \"../../driver/DriverUtils\";\n\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nexport class RawSqlResultsToEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap,\n                protected driver: Driver,\n                protected rawRelationIdResults: RelationIdLoadResult[],\n                protected rawRelationCountResults: RelationCountLoadResult[],\n                protected queryRunner?: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    transform(rawResults: any[], alias: Alias): any[] {\n        const group = this.group(rawResults, alias);\n        const entities: any[] = [];\n        group.forEach(results => {\n            const entity = this.transformRawResultsGroup(results, alias);\n            if (entity !== undefined)\n                entities.push(entity);\n        });\n        return entities;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    protected group(rawResults: any[], alias: Alias): Map<string, any[]> {\n        const map = new Map();\n        const keys: string[] = [];\n        if (alias.metadata.tableType === \"view\") {\n            keys.push(...alias.metadata.columns.map(column => DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)));\n        } else {\n            keys.push(...alias.metadata.primaryColumns.map(column => DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)));\n        }\n        rawResults.forEach(rawResult => {\n            const id = keys.map(key => {\n                const keyValue = rawResult[key];\n\n                if (Buffer.isBuffer(keyValue)) {\n                    return keyValue.toString(\"hex\");\n                }\n\n                return keyValue;\n            }).join(\"_\"); // todo: check partial\n            if (!id) return;\n\n            const items = map.get(id);\n            if (!items) {\n                map.set(id, [rawResult]);\n            } else {\n                items.push(rawResult);\n            }\n        });\n        return map;\n    }\n\n    /**\n     * Transforms set of data results into single entity.\n     */\n    protected transformRawResultsGroup(rawResults: any[], alias: Alias): ObjectLiteral|undefined {\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\n        let metadata = alias.metadata;\n\n        if (metadata.discriminatorColumn) {\n            const discriminatorValues = rawResults.map(result => result[DriverUtils.buildColumnAlias(this.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)]);\n            const discriminatorMetadata = metadata.childEntityMetadatas.find(childEntityMetadata => {\n                return !!discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue);\n            });\n            if (discriminatorMetadata)\n                metadata = discriminatorMetadata;\n        }\n        let entity: any = this.expressionMap.options.indexOf(\"create-pojo\") !== -1 ? {} : metadata.create(this.queryRunner);\n\n        // get value from columns selections and put them into newly created entity\n        const hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\n        const hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\n        const hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\n        const hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n\n        // if we have at least one selected column then return this entity\n        // since entity must have at least primary columns to be really selected and transformed into entity\n        if (hasColumns)\n            return entity;\n\n        // if we don't have any selected column we should not return entity,\n        // except for the case when entity only contain a primary column as a relation to another entity\n        // in this case its absolutely possible our entity to not have any columns except a single relation\n        const hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(column => column.isVirtual === false).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\n        if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))\n            return entity;\n\n        return undefined;\n    }\n\n    // get value from columns selections and put them into object\n    protected transformColumns(rawResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\n        let hasData = false;\n        metadata.columns.forEach(column => {\n\n            // if table inheritance is used make sure this column is not child's column\n            if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)\n                return;\n\n            const value = rawResults[0][DriverUtils.buildColumnAlias(this.driver, alias.name, column.databaseName)];\n            if (value === undefined || column.isVirtual)\n                return;\n\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\n            // then we don't add this column and its value into the entity\n            if (!this.expressionMap.selects.find(select => select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyPath))\n                return;\n\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\n                hasData = true;\n        });\n        return hasData;\n    }\n\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    protected transformJoins(rawResults: any[], entity: ObjectLiteral, alias: Alias, metadata: EntityMetadata) {\n        let hasData = false;\n\n        // let discriminatorValue: string = \"\";\n        // if (metadata.discriminatorColumn)\n        //     discriminatorValue = rawResults[0][DriverUtils.buildColumnAlias(this.connection.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)];\n\n        this.expressionMap.joinAttributes.forEach(join => { // todo: we have problem here - when inner joins are used without selects it still create empty array\n\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n\n            // if simple left or inner join was performed without selection then we don't need to do anything\n            if (!join.isSelected)\n                return;\n\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (join.relation && !metadata.relations.find(relation => relation === join.relation))\n                return;\n\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            } else {\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation!.propertyPath)\n                    return;\n            }\n\n            // transform joined data into entities\n            let result: any = this.transform(rawResults, join.alias);\n            result = !join.isMany ? result[0] : result;\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\n            if (result === undefined) // if nothing was joined then simply return\n                return;\n\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n\n            } else { // otherwise set to relation\n                join.relation!.setEntityValue(entity, result);\n            }\n\n            hasData = true;\n        });\n        return hasData;\n    }\n\n    protected transformRelationIds(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\n        let hasData = false;\n        this.rawRelationIdResults.forEach(rawRelationIdResult => {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\n                return;\n\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null)\n                return;\n\n            const idMaps = rawRelationIdResult.results.map(result => {\n                const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);\n                if (EntityMetadata.compareIds(entityPrimaryIds, valueMap) === false)\n                    return;\n\n                let columns: ColumnMetadata[];\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    columns = relation.joinColumns.map(joinColumn => joinColumn);\n                } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                    // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                } else { // ManyToMany\n                    if (relation.isOwning) {\n                        columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);\n                    } else {\n                        columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n                    }\n                }\n\n                const idMap = columns.reduce((idMap, column) => {\n                    let value = result[column.databaseName];\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        if (column.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.createValueMap(value);\n\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(value));\n                    } else {\n                        if (column.referencedColumn!.referencedColumn) // if column is a relation\n                            value = column.referencedColumn!.referencedColumn!.createValueMap(value);\n\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn!.createValueMap(value));\n                    }\n                }, {} as ObjectLiteral);\n\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return columns[0].getEntityValue(idMap);\n                    } else {\n                        return columns[0].referencedColumn!.getEntityValue(idMap);\n                    }\n                }\n                return idMap;\n            }).filter(result => result);\n\n\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            const mapToProperty = (properties: string[], map: ObjectLiteral, value: any): any => {\n\n                const property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                } else if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                } else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                if (idMaps[0] !== undefined) {\n                    mapToProperty(properties, entity, idMaps[0]);\n                    hasData = true;\n                }\n            } else {\n                mapToProperty(properties, entity, idMaps);\n                if (idMaps.length > 0) {\n                    hasData = true;\n                }\n            }\n        });\n\n        return hasData;\n    }\n\n    protected transformRelationCounts(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\n        let hasData = false;\n        this.rawRelationCountResults\n            .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)\n            .forEach(rawRelationCountResult => {\n                const relation = rawRelationCountResult.relationCountAttribute.relation;\n                let referenceColumnName: string;\n\n                if (relation.isOneToMany) {\n                    referenceColumnName = relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;  // todo: fix joinColumns[0]\n\n                } else {\n                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn!.databaseName : relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\n                }\n\n                const referenceColumnValue = rawSqlResults[0][DriverUtils.buildColumnAlias(this.driver, alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                    rawRelationCountResult.results\n                        .filter(result => result[\"parentId\"] === referenceColumnValue)\n                        .forEach(result => {\n                            entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                            hasData = true;\n                        });\n                }\n            });\n\n        return hasData;\n    }\n\n    private createValueMapFromJoinColumns(relation: RelationMetadata, parentAlias: string, rawSqlResults: any[]): ObjectLiteral {\n        let columns: ColumnMetadata[];\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n        } else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\n            } else {\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\n            }\n        }\n        return columns.reduce((valueMap, column) => {\n            rawSqlResults.forEach(rawSqlResult => {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] = this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildColumnAlias(this.driver, parentAlias, column.databaseName)], column);\n                } else {\n                    valueMap[column.databaseName] =  this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildColumnAlias(this.driver, parentAlias, column.referencedColumn!.databaseName)], column);\n                }\n            });\n            return valueMap;\n        }, {} as ObjectLiteral);\n\n    }\n\n    private extractEntityPrimaryIds(relation: RelationMetadata, relationIdRawResult: any) {\n        let columns: ColumnMetadata[];\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\n        } else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\n            } else {\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\n            }\n        }\n        return columns.reduce((data, column) => {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {} as ObjectLiteral);\n    }\n\n    /*private removeVirtualColumns(entity: ObjectLiteral, alias: Alias) {\n        const virtualColumns = this.expressionMap.selects\n            .filter(select => select.virtual)\n            .map(select => select.selection.replace(alias.name + \".\", \"\"));\n\n        virtualColumns.forEach(virtualColumn => delete entity[virtualColumn]);\n    }*/\n\n}\n","/**\n * Thrown when a transaction is required for the current operation, but there is none open.\n */\nexport class PessimisticLockTransactionRequiredError extends Error {\n    name = \"PessimisticLockTransactionRequiredError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, PessimisticLockTransactionRequiredError.prototype);\n        this.message = `An open transaction is required for pessimistic lock.`;\n    }\n\n}","/**\n * Thrown when an entity does not have no version and no update date column.\n */\nexport class NoVersionOrUpdateDateColumnError extends Error {\n    name = \"NoVersionOrUpdateDateColumnError\";\n\n    constructor(entity: string) {\n        super();\n        Object.setPrototypeOf(this, NoVersionOrUpdateDateColumnError.prototype);\n        this.message = `Entity ${entity} does not have version or update date columns.`;\n    }\n\n}","/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nexport class OptimisticLockVersionMismatchError extends Error {\n    name = \"OptimisticLockVersionMismatchError\";\n\n    constructor(entity: string, expectedVersion: number|Date, actualVersion: number|Date) {\n        super();\n        Object.setPrototypeOf(this, OptimisticLockVersionMismatchError.prototype);\n        this.message = `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`;\n    }\n\n}\n","/**\n * Thrown when an optimistic lock cannot be used in query builder.\n */\nexport class OptimisticLockCanNotBeUsedError extends Error {\n    name = \"OptimisticLockCanNotBeUsedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, OptimisticLockCanNotBeUsedError.prototype);\n        this.message = `The optimistic lock can be used only with getOne() method.`;\n    }\n\n}\n","/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str: any): str is string {\n\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n\n        // extra alias and its property relation\n        const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n        if (!aliasName || !propertyName)\n            return false;\n\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1)\n            return false;\n\n        return true;\n    }\n\n}\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"./QueryBuilderUtils\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {Alias} from \"./Alias\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\n\n/**\n * Stores all join attributes which will be used to build a JOIN query.\n */\nexport class JoinAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Join direction.\n     */\n    direction: \"LEFT\"|\"INNER\";\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias: Alias;\n\n    /**\n     * Joined table, entity target, or relation in \"post.category\" format.\n     */\n    entityOrProperty: Function|string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    condition?: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty?: string;\n\n    /**\n     * Indicates if user maps one or many objects from the join.\n     */\n    isMappingMany?: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private queryExpressionMap: QueryExpressionMap,\n                joinAttribute?: JoinAttribute) {\n        ObjectUtils.assign(this, joinAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get isMany(): boolean {\n        if (this.isMappingMany !== undefined)\n            return this.isMappingMany;\n\n        if (this.relation)\n            return this.relation.isManyToMany || this.relation.isOneToMany;\n\n        return false;\n    }\n\n    \n    isSelectedCache: boolean;\n    isSelectedEvalueated: boolean = false;\n    /**\n     * Indicates if this join is selected.\n     */\n    get isSelected(): boolean {\n        if (!this.isSelectedEvalueated) {\n            let getValue = () => {\n                for (const select of this.queryExpressionMap.selects) {\n                    if (select.selection === this.alias.name)\n                        return true;\n\n                    if (this.metadata && !!this.metadata.columns.find(column => select.selection === this.alias.name + \".\" + column.propertyPath))\n                        return true;\n                }\n\n                return false;\n            };\n            this.isSelectedCache = getValue();\n            this.isSelectedEvalueated = true;\n        }\n        return this.isSelectedCache;\n\n    }\n\n    /**\n     * Name of the table which we should join.\n     */\n    get tablePath(): string {\n        return this.metadata ? this.metadata.tablePath : this.entityOrProperty as string;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\n    }\n\n    relationCache: RelationMetadata|undefined;\n    relationEvalueated: boolean = false;\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\n     */\n    get relation(): RelationMetadata | undefined {\n        if (!this.relationEvalueated) {\n            let getValue = () => {\n                if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n                    return undefined;\n\n                const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n                let relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n\n                if (relation) {\n                    return relation;\n                }\n\n                if (relationOwnerSelection.metadata.parentEntityMetadata) {\n                    relation = relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n                    if (relation) {\n                        return relation;\n                    }\n                }\n\n                throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n            };\n            this.relationCache = getValue.bind(this)();\n            this.relationEvalueated = true;\n        }\n        return this.relationCache;\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata|undefined {\n\n        // entityOrProperty is relation, e.g. \"post.category\"\n        if (this.relation)\n            return this.relation.inverseEntityMetadata;\n\n        // entityOrProperty is Entity class\n        if (this.connection.hasMetadata(this.entityOrProperty))\n            return this.connection.getMetadata(this.entityOrProperty);\n\n        return undefined;\n\n        /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\n\n            // first try to find entity with such name, this is needed when entity does not have a target class,\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\n            if (metadata)\n                return metadata;\n\n            // check if we have entity with such table name, and use its metadata if found\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\n        }*/\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        if (!this.relation)\n            throw new Error(`Cannot get junction table for join without relation.`);\n\n        return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\n    }\n\n    get mapToPropertyParentAlias(): string|undefined {\n        if (!this.mapToProperty)\n            return undefined;\n\n        return this.mapToProperty!.split(\".\")[0];\n    }\n\n    get mapToPropertyPropertyName(): string|undefined {\n        if (!this.mapToProperty)\n            return undefined;\n\n        return this.mapToProperty!.split(\".\")[1];\n    }\n\n}","import {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\nimport {ObjectUtils} from \"../../util/ObjectUtils\";\n\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    /**\n     * Indicates if relation id should NOT be loaded as id map.\n     */\n    disableMixedMap = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryExpressionMap: QueryExpressionMap,\n                        relationIdAttribute?: Partial<RelationIdAttribute>) {\n        ObjectUtils.assign(this, relationIdAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n        if (!relation)\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rid\";\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get junctionMetadata(): EntityMetadata {\n        return this.relation.junctionEntityMetadata!;\n    }\n\n    get mapToPropertyParentAlias(): string {\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    }\n\n    get mapToPropertyPropertyPath(): string {\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\nimport {ObjectUtils} from \"../../util/ObjectUtils\";\n\nexport class RelationCountAttribute {\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private expressionMap: QueryExpressionMap,\n                relationCountAttribute?: Partial<RelationCountAttribute>) {\n        ObjectUtils.assign(this, relationCountAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.split(\".\")[0];\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationProperty(): string|undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        return this.relationName.split(\".\")[1];\n    }\n\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rc\";\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        const [parentAlias, propertyPath] = this.relationName.split(\".\");\n        const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value is a string representation of alias property`);\n\n        const parentAlias = this.relationName.split(\".\")[0];\n        const selection = this.expressionMap.findAliasByName(parentAlias);\n        return selection.metadata;\n    }\n\n    get mapToPropertyPropertyName(): string {\n        return this.mapToProperty!.split(\".\")[1];\n    }\n\n}\n","import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationIdLoadResult} from \"./RelationIdLoadResult\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverUtils} from \"../../driver/DriverUtils\";\n\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationIdAttributes: RelationIdAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationIdLoadResult[]> {\n\n        const promises = this.relationIdAttributes.map(async relationIdAttr => {\n\n            if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {\n                // example: Post and Tag\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\n                // we expect it to load id of tag\n\n                if (relationIdAttr.queryBuilderFactory)\n                    throw new Error(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\n\n                const results = rawEntities.map(rawEntity => {\n                    const result: ObjectLiteral = {};\n                    relationIdAttr.relation.joinColumns.forEach(joinColumn => {\n                        result[joinColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn!);\n                    });\n\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                        result[primaryColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);\n                    });\n                    return result;\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: results\n                };\n\n            } else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {\n                // example: Post and Category\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // we expect it to load array of category ids\n\n                const relation = relationIdAttr.relation; // \"post.categories\"\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n                const table = relation.inverseEntityMetadata.target; // category\n                const tableName = relation.inverseEntityMetadata.tableName; // category\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n\n                const parameters: ObjectLiteral = {};\n                const condition = rawEntities.map((rawEntity, index) => {\n                    return joinColumns.map(joinColumn => {\n                        const parameterName = joinColumn.databaseName + index;\n                        parameters[parameterName] = rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\n                        return tableAlias + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\")\n                    .join(\" OR \");\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (!condition)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                // generate query:\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\n                });\n\n                relation.inverseRelation!.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                    qb.addSelect(tableAlias + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\n                });\n\n                qb.from(table, tableAlias)\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                const results = await qb.getRawMany();\n                results.forEach(result => {\n                    joinColumns.forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\n                    });\n                    relation.inverseRelation!.entityMetadata.primaryColumns.forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column);\n                    });\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results\n                };\n\n            } else {\n                // many-to-many\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                const relation = relationIdAttr.relation;\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\n                const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\n                const junctionAlias = relationIdAttr.junctionAlias;\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\n                const junctionTableName = relation.isOwning ? relation.junctionEntityMetadata!.tableName : relation.inverseRelation!.junctionEntityMetadata!.tableName;\n\n\n                const mappedColumns = rawEntities.map(rawEntity => {\n                    return joinColumns.reduce((map, joinColumn) => {\n                        map[joinColumn.propertyPath] = rawEntity[DriverUtils.buildColumnAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\n                        return map;\n                    }, {} as ObjectLiteral);\n                });\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (mappedColumns.length === 0)\n                    return { relationIdAttribute: relationIdAttr, results: [] };\n\n                const parameters: ObjectLiteral = {};\n                const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {\n                    return Object.keys(mappedColumn).map(key => {\n                        const parameterName = key + index;\n                        parameters[parameterName] = mappedColumn[key];\n                        return junctionAlias + \".\" + key + \" = :\" + parameterName;\n                    }).join(\" AND \");\n                });\n\n                const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {\n                    return junctionAlias + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                const condition = joinColumnConditions.map(condition => {\n                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition + \")\";\n                }).join(\" OR \");\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n\n                inverseJoinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                joinColumns.forEach(joinColumn => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n\n                qb.from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .setParameters(parameters);\n\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n\n                const results = await qb.getRawMany();\n                results.forEach(result => {\n                    [...joinColumns, ...inverseJoinColumns].forEach(column => {\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\n                    });\n                });\n\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n}\n","import {RelationIdAttribute} from \"./RelationIdAttribute\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {RelationIdMetadata} from \"../../metadata/RelationIdMetadata\";\n\nexport class RelationIdMetadataToAttributeTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        }\n\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(join => {\n\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n\n            join.metadata.relationIds.forEach(relationId => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(parentAliasName: string, relationId: RelationIdMetadata): RelationIdAttribute {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName, // category.imageIds\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory\n        });\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\nimport {RelationCountLoadResult} from \"./RelationCountLoadResult\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\n\nexport class RelationCountLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner: QueryRunner|undefined,\n                protected relationCountAttributes: RelationCountAttribute[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async load(rawEntities: any[]): Promise<RelationCountLoadResult[]> {\n\n        const onlyUnique = (value: any, index: number, self: any) => {\n            return self.indexOf(value) === index;\n        };\n\n        const promises = this.relationCountAttributes.map(async relationCountAttr => {\n\n            if (relationCountAttr.relation.isOneToMany) {\n                // example: Post and Category\n                // loadRelationCountAndMap(\"post.categoryCount\", \"post.categories\")\n                // we expect it to load array of post ids\n\n                // todo(dima): fix issues wit multiple primary keys and remove joinColumns[0]\n                const relation = relationCountAttr.relation; // \"category.posts\"\n                const inverseRelation = relation.inverseRelation!; // \"post.category\"\n                const referenceColumnName = inverseRelation.joinColumns[0].referencedColumn!.propertyName; // post id\n                const inverseSideTable = relation.inverseEntityMetadata.target; // Post\n                const inverseSideTableName = relation.inverseEntityMetadata.tableName; // post\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n                const inverseSidePropertyName = inverseRelation.propertyName; // \"category\" from \"post.category\"\n\n                let referenceColumnValues = rawEntities\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName])\n                    .filter(value => !!value);\n                referenceColumnValues = referenceColumnValues.filter(onlyUnique);\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return { relationCountAttribute: relationCountAttr, results: [] };\n\n                // generate query:\n                // SELECT category.post as parentId, COUNT(*) AS cnt FROM category category WHERE category.post IN (1, 2) GROUP BY category.post\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                    .addSelect(\"COUNT(*)\", \"cnt\")\n                    .from(inverseSideTable, inverseSideTableAlias)\n                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:...ids)\")\n                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\n                    .setParameter(\"ids\", referenceColumnValues);\n\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany()\n                };\n\n            } else {\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n\n                let joinTableColumnName: string;\n                let inverseJoinColumnName: string;\n                let firstJunctionColumn: ColumnMetadata;\n                let secondJunctionColumn: ColumnMetadata;\n\n                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\n                    joinTableColumnName = relationCountAttr.relation.joinColumns[0].referencedColumn!.databaseName;\n                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn!.databaseName;\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\n\n                } else {\n                    joinTableColumnName = relationCountAttr.relation.inverseRelation!.inverseJoinColumns[0].referencedColumn!.databaseName;\n                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\n                }\n\n                let referenceColumnValues = rawEntities\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName])\n                    .filter(value => !!value);\n                referenceColumnValues = referenceColumnValues.filter(onlyUnique);\n\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return { relationCountAttribute: relationCountAttr, results: [] };\n\n                const junctionAlias = relationCountAttr.junctionAlias;\n                const inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                const junctionTableName = relationCountAttr.relation.junctionEntityMetadata!.tableName;\n                \n                const condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues.map(vals => isNaN(vals) ? \"'\" + vals + \"'\" : vals) + \")\" +\n                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\n\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(inverseJoinColumnName) + \")\", \"cnt\")\n                    .from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\n\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany()\n                };\n            }\n        });\n\n        return Promise.all(promises);\n    }\n\n}\n","import {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {RelationCountMetadata} from \"../../metadata/RelationCountMetadata\";\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\n\nexport class RelationCountMetadataToAttributeTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(relationCount => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(join => {\n\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n\n            join.metadata.relationCounts.forEach(relationCount => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(parentAliasName: string, relationCount: RelationCountMetadata): RelationCountAttribute {\n        return new RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName, // category.imageIds\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory\n        });\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n\n/**\n */\nexport class Alias {\n\n    type: \"from\"|\"select\"|\"join\"|\"other\"; // todo: make something with \"other\"\n\n    name: string;\n\n    /**\n     * Table on which this alias is applied.\n     * Used only for aliases which select custom tables.\n     */\n    tablePath?: string;\n\n    /**\n     * If this alias is for sub query.\n     */\n    subQuery?: string;\n\n    constructor(alias?: Alias) {\n        ObjectUtils.assign(this, alias || {});\n    }\n\n    private _metadata?: EntityMetadata;\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get hasMetadata(): boolean {\n        return !!this._metadata;\n    }\n\n    set metadata(metadata: EntityMetadata) {\n        this._metadata = metadata;\n    }\n\n    get metadata(): EntityMetadata {\n        if (!this._metadata)\n            throw new Error(`Cannot get entity metadata for the given alias \"${this.name}\"`);\n\n        return this._metadata;\n    }\n\n}","import {Alias} from \"./Alias\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {JoinAttribute} from \"./JoinAttribute\";\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SelectQuery} from \"./SelectQuery\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {SelectQueryBuilderOption} from \"./SelectQueryBuilderOption\";\n\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nexport class QueryExpressionMap {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if QueryBuilder used to select entities and not a raw results.\n     */\n    queryEntity: boolean = false;\n\n    /**\n     * Main alias is a main selection object selected by QueryBuilder.\n     */\n    mainAlias?: Alias;\n\n    /**\n     * All aliases (including main alias) used in the query.\n     */\n    aliases: Alias[] = [];\n\n    /**\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n     */\n    queryType: \"select\"|\"update\"|\"delete\"|\"insert\"|\"relation\" = \"select\";\n\n    /**\n     * Data needs to be SELECT-ed.\n     */\n    selects: SelectQuery[] = [];\n\n    /**\n     * FROM-s to be selected.\n     */\n    // froms: { target: string, alias: string }[] = [];\n\n    /**\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\n     * If insert query was used, it needs \"insert set\" - values that needs to be inserted.\n     */\n    valuesSet?: ObjectLiteral|ObjectLiteral[];\n\n    /**\n     * Optional returning (or output) clause for insert, update or delete queries.\n     */\n    returning: string|string[];\n\n    /**\n     * Extra returning columns to be added to the returning statement if driver supports it.\n     */\n    extraReturningColumns: ColumnMetadata[] = [];\n\n    /**\n     * Optional on conflict statement used in insertion query in postgres.\n     */\n    onConflict: string = \"\";\n\n    /**\n     * Optional on ignore statement used in insertion query in databases.\n     */\n    onIgnore: string | boolean = false;\n\n    /**\n     * Optional on update statement used in insertion query in databases.\n     */\n    onUpdate: { columns?: string, conflict?: string, overwrite?: string };\n\n    /**\n     * JOIN queries.\n     */\n    joinAttributes: JoinAttribute[] = [];\n\n    /**\n     * RelationId queries.\n     */\n    relationIdAttributes: RelationIdAttribute[] = [];\n\n    /**\n     * Relation count queries.\n     */\n    relationCountAttributes: RelationCountAttribute[] = [];\n\n    /**\n     * WHERE queries.\n     */\n    wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n\n    /**\n     * HAVING queries.\n     */\n    havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n\n    /**\n     * ORDER BY queries.\n     */\n    orderBys: OrderByCondition = {};\n\n    /**\n     * GROUP BY queries.\n     */\n    groupBys: string[] = [];\n\n    /**\n     * LIMIT query.\n     */\n    limit?: number;\n\n    /**\n     * OFFSET query.\n     */\n    offset?: number;\n\n    /**\n     * Number of rows to skip of result using pagination.\n     */\n    skip?: number;\n\n    /**\n     * Number of rows to take using pagination.\n     */\n    take?: number;\n\n    /**\n     * Locking mode.\n     */\n    lockMode?: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\"|\"dirty_read\";\n\n    /**\n     * Current version of the entity, used for locking.\n     */\n    lockVersion?: number|Date;\n\n    /**\n     * Parameters used to be escaped in final query.\n     */\n    parameters: ObjectLiteral = {};\n\n    /**\n     * Indicates if alias, table names and column names will be ecaped by driver, or not.\n     *\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n     */\n    disableEscaping: boolean = true;\n\n    /**\n     * Indicates if virtual columns should be included in entity result.\n     *\n     * todo: what to do with it? is it properly used? what about persistence?\n     */\n    enableRelationIdValues: boolean = false;\n\n    /**\n     * Extra where condition appended to the end of original where conditions with AND keyword.\n     * Original condition will be wrapped into brackets.\n     */\n    extraAppendedAndWhereCondition: string = \"\";\n\n    /**\n     * Indicates if query builder creates a subquery.\n     */\n    subQuery: boolean = false;\n\n    /**\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\n     */\n    parentQueryBuilder: QueryBuilder<any>;\n\n    /**\n     * Indicates if property names are prefixed with alias names during property replacement.\n     * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n     * but user can use them in WHERE expressions.\n     */\n    aliasNamePrefixingEnabled: boolean = true;\n\n    /**\n     * Indicates if query result cache is enabled or not.\n     */\n    cache: boolean = false;\n\n    /**\n     * Time in milliseconds in which cache will expire.\n     * If not set then global caching time will be used.\n     */\n    cacheDuration: number;\n\n    /**\n     * Cache id.\n     * Used to identifier your cache queries.\n     */\n    cacheId: string;\n\n    /**\n     * Options that define QueryBuilder behaviour.\n     */\n    options: SelectQueryBuilderOption[] = [];\n\n    /**\n     * Property path of relation to work with.\n     * Used in relational query builder.\n     */\n    relationPropertyPath: string;\n\n    /**\n     * Entity (target) which relations will be updated.\n     */\n    of: any|any[];\n\n    /**\n     * List of columns where data should be inserted.\n     * Used in INSERT query.\n     */\n    insertColumns: string[] = [];\n\n    /**\n     * Used if user wants to update or delete a specific entities.\n     */\n    whereEntities: ObjectLiteral[] = [];\n\n    /**\n     * Indicates if entity must be updated after insertion / updation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     */\n    updateEntity: boolean = true;\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     */\n    callListeners: boolean = true;\n\n    /**\n     * Indicates if query must be wrapped into transaction.\n     */\n    useTransaction: boolean = false;\n\n    /**\n     * Extra parameters.\n     * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.\n     */\n    nativeParameters: ObjectLiteral = {};\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Get all ORDER BY queries - if order by is specified by user then it uses them,\n     * otherwise it uses default entity order by if it was set.\n     */\n    get allOrderBys() {\n        if (!Object.keys(this.orderBys).length && this.mainAlias!.hasMetadata && this.options.indexOf(\"disable-global-order\") === -1) {\n            const entityOrderBy = this.mainAlias!.metadata.orderBy || {};\n            return Object.keys(entityOrderBy).reduce((orderBy, key) => {\n                orderBy[this.mainAlias!.name + \".\" + key] = entityOrderBy[key];\n                return orderBy;\n            }, {} as OrderByCondition);\n        }\n\n        return this.orderBys;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    setMainAlias(alias: Alias): Alias {\n\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n\n        // set new main alias\n        this.mainAlias = alias;\n\n        return alias;\n    }\n\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    createAlias(options: { type: \"from\"|\"select\"|\"join\"|\"other\", name?: string, target?: Function|string, tablePath?: string, subQuery?: string, metadata?: EntityMetadata }): Alias {\n\n        let aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && options.target instanceof Function)\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n\n        const alias = new Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n\n        this.aliases.push(alias);\n        return alias;\n    }\n\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    findAliasByName(aliasName: string): Alias {\n        const alias = this.aliases.find(alias => alias.name === aliasName);\n        if (!alias)\n            throw new Error(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\n\n        return alias;\n    }\n\n    findColumnByAliasExpression(aliasExpression: string): ColumnMetadata|undefined {\n        const [aliasName, propertyPath] = aliasExpression.split(\".\");\n        const alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    }\n\n    /**\n     * Gets relation metadata of the relation this query builder works with.\n     *\n     * todo: add proper exceptions\n     */\n    get relationMetadata(): RelationMetadata {\n        if (!this.mainAlias)\n            throw new Error(`Entity to work with is not specified!`); // todo: better message\n\n        const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message\n\n        return relationMetadata;\n    }\n\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    clone(): QueryExpressionMap {\n        const map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map(select => select);\n        this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.onIgnore = this.onIgnore;\n        map.onUpdate = this.onUpdate;\n        map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\n        map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\n        map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\n        map.wheres = this.wheres.map(where => ({ ...where }));\n        map.havings = this.havings.map(having => ({ ...having }));\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map(groupBy => groupBy);\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.lockVersion = this.lockVersion;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.nativeParameters = Object.assign({}, this.nativeParameters);\n        return map;\n    }\n\n}\n","import {WhereExpression} from \"./WhereExpression\";\n\n/**\n * Syntax sugar.\n * Allows to use brackets in WHERE expressions for better syntax.\n */\nexport class Brackets {\n\n    /**\n     * WHERE expression that will be taken into brackets.\n     */\n    whereFactory: (qb: WhereExpression) => any;\n\n    /**\n     * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.\n     */\n    constructor(whereFactory: (qb: WhereExpression) => any) {\n        this.whereFactory = whereFactory;\n    }\n\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: In([...]) }\n */\nexport function In<T>(value: T[]|FindOperator<T>) {\n    return new FindOperator(\"in\", value as any, true, true);\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Result object returned by InsertQueryBuilder execution.\n */\nexport class InsertResult {\n\n    /**\n     * Contains inserted entity id.\n     * Has entity-like structure (not just column database name and values).\n     */\n    identifiers: ObjectLiteral[] = [];\n\n    /**\n     * Generated values returned by a database.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMaps: ObjectLiteral[] = [];\n\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any;\n\n}","/**\n * Thrown when user tries to build a query with RETURNING / OUTPUT statement,\n * but used database does not support it.\n */\nexport class ReturningStatementNotSupportedError extends Error {\n    name = \"ReturningStatementNotSupportedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, ReturningStatementNotSupportedError.prototype);\n        this.message = `OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL databases.`;\n    }\n\n}","/**\n * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.\n */\nexport class InsertValuesMissingError extends Error {\n    name = \"InsertValuesMissingError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, InsertValuesMissingError.prototype);\n        this.message = `Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.`;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {UpdateResult} from \"./result/UpdateResult\";\nimport {InsertResult} from \"./result/InsertResult\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\n\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nexport class ReturningResultsEntityUpdator {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner,\n                protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    async update(updateResult: UpdateResult, entities: ObjectLiteral[]): Promise<void> {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n\n        await Promise.all(entities.map(async (entity, entityIndex) => {\n\n            // if database supports returning/output statement then we already should have updating values in the raw data returned by insert query\n            if (this.queryRunner.connection.driver.isReturningSqlSupported()) {\n                if (this.queryRunner.connection.driver instanceof OracleDriver && updateResult.raw instanceof Array && this.expressionMap.extraReturningColumns.length > 0) {\n                    updateResult.raw = updateResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n                        newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                        return newRaw;\n                    }, {} as ObjectLiteral);\n                }\n                const result = updateResult.raw instanceof Array ? updateResult.raw[entityIndex] : updateResult.raw;\n                const returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n                if (returningColumns) {\n                    this.queryRunner.manager.merge(metadata.target as any, entity, returningColumns);\n                    updateResult.generatedMaps.push(returningColumns);\n                }\n\n            } else {\n\n                // for driver which do not support returning/output statement we need to perform separate query and load what we need\n                const updationColumns = this.getUpdationReturningColumns();\n                if (updationColumns.length > 0) {\n\n                    // get entity id by which we will get needed data\n                    const entityId = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\n                    if (!entityId)\n                        throw new Error(`Cannot update entity because entity id is not set in the entity.`);\n\n                    // execute query to get needed data\n                    const loadedReturningColumns = await this.queryRunner.manager\n                        .createQueryBuilder()\n                        .select(metadata.primaryColumns.map(column => metadata.targetName + \".\" + column.propertyPath))\n                        .addSelect(this.getUpdationReturningColumns().map(column => metadata.targetName + \".\" + column.propertyPath))\n                        .from(metadata.target, metadata.targetName)\n                        .where(entityId)\n                        .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                        .getOne();\n\n                    if (loadedReturningColumns) {\n                        this.queryRunner.manager.merge(metadata.target as any, entity, loadedReturningColumns);\n                        updateResult.generatedMaps.push(loadedReturningColumns);\n                    }\n                }\n            }\n        }));\n    }\n\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    async insert(insertResult: InsertResult, entities: ObjectLiteral[]): Promise<void> {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n        const insertionColumns = this.getInsertionReturningColumns();\n\n        const generatedMaps = entities.map((entity, entityIndex) => {\n            if (this.queryRunner.connection.driver instanceof OracleDriver && insertResult.raw instanceof Array && this.expressionMap.extraReturningColumns.length > 0) {\n                insertResult.raw = insertResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n                    newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                    return newRaw;\n                }, {} as ObjectLiteral);\n            }\n            // get all values generated by a database for us\n            const result = insertResult.raw instanceof Array ? insertResult.raw[entityIndex] : insertResult.raw;\n            const generatedMap = this.queryRunner.connection.driver.createGeneratedMap(metadata, result) || {};\n\n            // if database does not support uuid generation we need to get uuid values\n            // generated by orm and set them to the generatedMap\n            if (this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {\n                metadata.generatedColumns.forEach(generatedColumn => {\n                    if (generatedColumn.generationStrategy === \"uuid\") {\n                        // uuid can be defined by user in a model, that's why first we get it\n                        let uuid = generatedColumn.getEntityValue(entity);\n                        if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value\n                            uuid = this.expressionMap.nativeParameters[\"uuid_\" + generatedColumn.databaseName + entityIndex];\n\n                        OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));\n                    }\n                });\n            }\n\n            this.queryRunner.manager.merge(metadata.target as any, entity, generatedMap); // todo: this should not be here, but problem with below line\n            return generatedMap;\n        });\n\n        // for postgres and mssql we use returning/output statement to get values of inserted default and generated values\n        // for other drivers we have to re-select this data from the database\n        if (this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0) {\n            await Promise.all(entities.map(async (entity, entityIndex) => {\n                const entityId = metadata.getEntityIdMap(entity)!;\n\n                // to select just inserted entity we need a criteria to select by.\n                // for newly inserted entities in drivers which do not support returning statement\n                // row identifier can only be an increment column\n                // (since its the only thing that can be generated by those databases)\n                // or (and) other primary key which is defined by a user and inserted value has it\n\n                const returningResult: any = await this.queryRunner.manager\n                    .createQueryBuilder()\n                    .select(metadata.primaryColumns.map(column => metadata.targetName + \".\" + column.propertyPath))\n                    .addSelect(insertionColumns.map(column => metadata.targetName + \".\" + column.propertyPath))\n                    .from(metadata.target, metadata.targetName)\n                    .where(entityId)\n                    .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                    .getOne();\n\n                this.queryRunner.manager.merge(metadata.target as any, generatedMaps[entityIndex], returningResult);\n            }));\n        }\n\n        entities.forEach((entity, entityIndex) => {\n            const entityId = metadata.getEntityIdMap(entity)!;\n            insertResult.identifiers.push(entityId);\n            insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n            this.queryRunner.manager.merge(this.expressionMap.mainAlias!.metadata.target as any, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!\n        });\n    }\n\n    /**\n     * Columns we need to be returned from the database when we insert entity.\n     */\n    getInsertionReturningColumns(): ColumnMetadata[] {\n\n        // for databases which support returning statement we need to return extra columns like id\n        // for other databases we don't need to return id column since its returned by a driver already\n        const needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported();\n\n        // filter out the columns of which we need database inserted values to update our entity\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\n            return  column.default !== undefined ||\n                    (needToCheckGenerated && column.isGenerated)  ||\n                    column.isCreateDate ||\n                    column.isUpdateDate ||\n                    column.isVersion;\n        });\n    }\n\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    getUpdationReturningColumns(): ColumnMetadata[] {\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\n            return column.isUpdateDate || column.isVersion;\n        });\n    }\n\n}\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {InsertResult} from \"./result/InsertResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {InsertValuesMissingError} from \"../error/InsertValuesMissingError\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {EntitySchema} from \"../\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createInsertExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<InsertResult> {\n        // console.time(\"QueryBuilder.execute\");\n        // console.time(\".database stuff\");\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // console.timeEnd(\".database stuff\");\n            // console.time(\".value sets\");\n            const valueSets: ObjectLiteral[] = this.getValueSets();\n            // console.timeEnd(\".value sets\");\n\n            // call before insertion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                valueSets.forEach(valueSet => {\n                    queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, valueSet);\n                });\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            // console.time(\".prepare returning statement\");\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias!.hasMetadata) {\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();\n            }\n            // console.timeEnd(\".prepare returning statement\");\n\n            // execute query\n            // console.time(\".getting query and parameters\");\n            const [sql, parameters] = this.getQueryAndParameters();\n            // console.timeEnd(\".getting query and parameters\");\n            const insertResult = new InsertResult();\n            // console.time(\".query execution by database\");\n            insertResult.raw = await queryRunner.query(sql, parameters);\n            // console.timeEnd(\".query execution by database\");\n\n            // load returning results and set them to the entity if entity updation is enabled\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias!.hasMetadata) {\n                // console.time(\".updating entity\");\n                await returningResultsEntityUpdator.insert(insertResult, valueSets);\n                // console.timeEnd(\".updating entity\");\n            }\n\n            // call after insertion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                valueSets.forEach(valueSet => {\n                    queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, valueSet);\n                });\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            // console.time(\".commit\");\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            // console.timeEnd(\".commit\");\n\n            return insertResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n\n            // console.time(\".releasing connection\");\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n            // console.timeEnd(\".releasing connection\");\n            // console.timeEnd(\"QueryBuilder.execute\");\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    into<T>(entityTarget: ObjectType<T>|EntitySchema<T>|string, columns?: string[]): InsertQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget);\n        this.expressionMap.setMainAlias(mainAlias);\n        this.expressionMap.insertColumns = columns || [];\n        return (this as any) as InsertQueryBuilder<T>;\n    }\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values: QueryDeepPartialEntity<Entity>|QueryDeepPartialEntity<Entity>[]): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres.\n     */\n    onConflict(statement: string): this {\n        this.expressionMap.onConflict = statement;\n        return this;\n    }\n\n    /**\n     * Adds additional ignore statement supported in databases.\n     */\n    orIgnore(statement: string | boolean = true): this {\n        this.expressionMap.onIgnore = statement;\n        return this;\n    }\n\n    /**\n     * Adds additional update statement supported in databases.\n     */\n    orUpdate(statement?: { columns?: string[], overwrite?: string[], conflict_target?: string | string[] }): this {\n      this.expressionMap.onUpdate = {};\n      if (statement && statement.conflict_target instanceof Array)\n          this.expressionMap.onUpdate.conflict = ` ( ${statement.conflict_target.join(\", \")} ) `;\n      if (statement && typeof statement.conflict_target === \"string\")\n          this.expressionMap.onUpdate.conflict = ` ON CONSTRAINT ${statement.conflict_target} `;\n      if (statement && statement.columns instanceof Array)\n          this.expressionMap.onUpdate.columns = statement.columns.map(column => `${column} = :${column}`).join(\", \");\n      if (statement && statement.overwrite instanceof Array) {\n        if (this.connection.driver instanceof MysqlDriver) {\n          this.expressionMap.onUpdate.overwrite = statement.overwrite.map(column => `${column} = VALUES(${column})`).join(\", \");\n        } else if (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver) {\n          this.expressionMap.onUpdate.overwrite = statement.overwrite.map(column => `${column} = EXCLUDED.${column}`).join(\", \");\n        }\n      }\n      return this;\n  }\n\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    protected createInsertExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        const returningExpression = this.createReturningExpression();\n        const columnsExpression = this.createColumnNamesExpression();\n        let query = \"INSERT \";\n\n        if (this.connection.driver instanceof MysqlDriver) {\n          query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`;\n        }\n\n        query += `INTO ${tableName}`;\n\n        // add columns expression\n        if (columnsExpression) {\n            query += `(${columnsExpression})`;\n        } else {\n            if (!valuesExpression && this.connection.driver instanceof MysqlDriver) // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\";\n        }\n\n        // add OUTPUT expression\n        if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            query += ` OUTPUT ${returningExpression}`;\n        }\n\n        // add VALUES expression\n        if (valuesExpression) {\n            query += ` VALUES ${valuesExpression}`;\n        } else {\n            if (this.connection.driver instanceof MysqlDriver) { // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\";\n            } else {\n                query += ` DEFAULT VALUES`;\n            }\n        }\n        if (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver) {\n          query += `${this.expressionMap.onIgnore ? \" ON CONFLICT DO NOTHING \" : \"\"}`;\n          query += `${this.expressionMap.onConflict ? \" ON CONFLICT \" + this.expressionMap.onConflict : \"\"}`;\n          if (this.expressionMap.onUpdate) {\n            const { overwrite, columns, conflict } = this.expressionMap.onUpdate;\n            query += `${columns ? \" ON CONFLICT \" + conflict + \" DO UPDATE SET \" + columns : \"\"}`;\n            query += `${overwrite ? \" ON CONFLICT \" + conflict + \" DO UPDATE SET \" + overwrite : \"\"}`;\n          }\n        } else if (this.connection.driver instanceof MysqlDriver) {\n            if (this.expressionMap.onUpdate) {\n              const { overwrite, columns } = this.expressionMap.onUpdate;\n              query += `${columns ? \" ON DUPLICATE KEY UPDATE \" + columns : \"\"}`;\n              query += `${overwrite ? \" ON DUPLICATE KEY UPDATE \" + overwrite : \"\"}`;\n            }\n        }\n\n        // add RETURNING expression\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            query += ` RETURNING ${returningExpression}`;\n        }\n\n        return query;\n    }\n\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    protected getInsertedColumns(): ColumnMetadata[] {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            return [];\n\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\n\n            // if user specified list of columns he wants to insert to, then we filter only them\n            if (this.expressionMap.insertColumns.length)\n                return this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\n\n            // skip columns the user doesn't want included by default\n            if (!column.isInsert) { return false; }\n\n            // if user did not specified such list then return all columns except auto-increment one\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n            if (column.isGenerated && column.generationStrategy === \"increment\"\n                && !(this.connection.driver instanceof OracleDriver)\n                && !(this.connection.driver instanceof AbstractSqliteDriver)\n                && !(this.connection.driver instanceof MysqlDriver))\n                return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    protected createColumnNamesExpression(): string {\n        const columns = this.getInsertedColumns();\n        if (columns.length > 0)\n            return columns.map(column => this.escape(column.databaseName)).join(\", \");\n\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (!this.expressionMap.mainAlias!.hasMetadata && !this.expressionMap.insertColumns.length) {\n            const valueSets = this.getValueSets();\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0]).map(columnName => this.escape(columnName)).join(\", \");\n        }\n\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns.map(columnName => this.escape(columnName)).join(\", \");\n    }\n\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    protected createValuesExpression(): string {\n        const valueSets = this.getValueSets();\n        const columns = this.getInsertedColumns();\n\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            let expression = \"\";\n            let parametersCount = Object.keys(this.expressionMap.nativeParameters).length;\n            valueSets.forEach((valueSet, valueSetIndex) => {\n                columns.forEach((column, columnIndex) => {\n                    if (columnIndex === 0) {\n                        expression += \"(\";\n                    }\n                    const paramName = \"i\" + valueSetIndex + \"_\" + column.databaseName;\n\n                    // extract real value from the entity\n                    let value = column.getEntityValue(valueSet);\n\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n\n                    // make sure our value is normalized by a driver\n                    value = this.connection.driver.preparePersistentValue(value, column);\n\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    if (column.isVersion) {\n                        expression += \"1\";\n\n                    // } else if (column.isNestedSetLeft) {\n                    //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                    //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                    //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                    //     expression += subQuery;\n                    //\n                    // } else if (column.isNestedSetRight) {\n                    //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                    //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                    //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                    //     expression += subQuery;\n\n                    } else if (column.isDiscriminator) {\n                        this.expressionMap.nativeParameters[\"discriminator_value_\" + parametersCount] = this.expressionMap.mainAlias!.metadata.discriminatorValue;\n                        expression += this.connection.driver.createParameter(\"discriminator_value_\" + parametersCount, parametersCount);\n                        parametersCount++;\n                        // return \"1\";\n\n                    // for create and update dates we insert current date\n                    // no, we don't do it because this constant is already in \"default\" value of the column\n                    // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                    // } else if (column.isCreateDate || column.isUpdateDate) {\n                    //     return \"CURRENT_TIMESTAMP\";\n\n                    // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    } else if (column.isGenerated && column.generationStrategy === \"uuid\" && !this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\n\n                        const paramName = \"uuid_\" + column.databaseName + valueSetIndex;\n                        value = RandomGenerator.uuid4();\n                        this.expressionMap.nativeParameters[paramName] = value;\n                        expression += this.connection.driver.createParameter(paramName, parametersCount);\n                        parametersCount++;\n\n                    // if value for this column was not provided then insert default value\n                    } else if (value === undefined) {\n                        if (this.connection.driver instanceof AbstractSqliteDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (column.default !== undefined) { // try to use default defined in the column\n                                expression += this.connection.driver.normalizeDefault(column);\n                            } else {\n                                expression += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n                            }\n\n                        } else {\n                            expression += \"DEFAULT\";\n                        }\n\n                    // support for SQL expressions in queries\n                    } else if (value instanceof Function) {\n                        expression += value();\n\n                    // just any other regular value\n                    } else {\n                        if (this.connection.driver instanceof SqlServerDriver)\n                            value = this.connection.driver.parametrizeValue(column, value);\n\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n\n                        this.expressionMap.nativeParameters[paramName] = value;\n                        if (this.connection.driver instanceof MysqlDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression += `GeomFromText(${this.connection.driver.createParameter(paramName, parametersCount)})`;\n                        } else if (this.connection.driver instanceof PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                              expression += `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)}), ${column.srid})::${column.type}`;\n                            } else {\n                              expression += `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)})::${column.type}`;\n                            }\n                        } else {\n                            expression += this.connection.driver.createParameter(paramName, parametersCount);\n                        }\n                        parametersCount++;\n                    }\n\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            expression += \")\";\n                        } else {\n                            expression += \"), \";\n                        }\n                    } else {\n                        expression += \", \";\n                    }\n                });\n            });\n            if (expression === \"()\")\n                return \"\";\n\n            return expression;\n        } else { // for tables without metadata\n            // get values needs to be inserted\n            let expression = \"\";\n            let parametersCount = Object.keys(this.expressionMap.nativeParameters).length;\n\n            valueSets.forEach((valueSet, insertionIndex) => {\n                const columns = Object.keys(valueSet);\n                columns.forEach((columnName, columnIndex) => {\n                    if (columnIndex === 0) {\n                        expression += \"(\";\n                    }\n                    const paramName = \"i\" + insertionIndex + \"_\" + columnName;\n                    const value = valueSet[columnName];\n\n                    // support for SQL expressions in queries\n                    if (value instanceof Function) {\n                        expression += value();\n\n                    // if value for this column was not provided then insert default value\n                    } else if (value === undefined) {\n                        if (this.connection.driver instanceof AbstractSqliteDriver) {\n                            expression += \"NULL\";\n\n                        } else {\n                            expression += \"DEFAULT\";\n                        }\n\n                    // just any other regular value\n                    } else {\n                        this.expressionMap.nativeParameters[paramName] = value;\n                        expression += this.connection.driver.createParameter(paramName, parametersCount);\n                        parametersCount++;\n                    }\n\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\n                        if (insertionIndex === valueSets.length - 1) {\n                            expression += \")\";\n                        } else {\n                            expression += \"), \";\n                        }\n                    }\n                    else {\n                        expression += \", \";\n                    }\n                });\n            });\n            if (expression === \"()\")\n                return \"\";\n            return expression;\n        }\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral[] {\n        if (this.expressionMap.valuesSet instanceof Array && this.expressionMap.valuesSet.length > 0)\n            return this.expressionMap.valuesSet;\n\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n\n        throw new InsertValuesMissingError();\n    }\n\n}\n","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Result object returned by UpdateQueryBuilder execution.\n */\nexport class UpdateResult {\n\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any;\n\n    /**\n     * Contains inserted entity id.\n     * Has entity-like structure (not just column database name and values).\n     */\n    // identifier: ObjectLiteral[] = [];\n\n    /**\n     * Generated values returned by a database.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMaps: ObjectLiteral[] = [];\n\n}","/**\n * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.\n*/\nexport class LimitOnUpdateNotSupportedError extends Error {\n    name = \"LimitOnUpdateNotSupportedError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, LimitOnUpdateNotSupportedError.prototype);\n        this.message = `Your database does not support LIMIT on UPDATE statements.`;\n    }\n\n}","/**\n * Thrown when user tries to update using QueryBuilder but do not specify what to update.\n */\nexport class UpdateValuesMissingError extends Error {\n    name = \"UpdateValuesMissingError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, UpdateValuesMissingError.prototype);\n        this.message = `Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.`;\n    }\n\n}\n","/**\n *\n */\nexport class EntityColumnNotFound extends Error {\n    name = \"EntityColumnNotFound\";\n\n    constructor(propertyPath: string) {\n        super();\n        Object.setPrototypeOf(this, EntityColumnNotFound.prototype);\n        this.message = `No entity column \"${propertyPath}\" was found.`;\n    }\n\n}\n","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {UpdateResult} from \"./result/UpdateResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {LimitOnUpdateNotSupportedError} from \"../error/LimitOnUpdateNotSupportedError\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {UpdateValuesMissingError} from \"../error/UpdateValuesMissingError\";\nimport {EntityColumnNotFound} from \"../error/EntityColumnNotFound\";\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<UpdateResult> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n            }\n\n            // execute update query\n            const [sql, parameters] = this.getQueryAndParameters();\n            const updateResult = new UpdateResult();\n            updateResult.raw = await queryRunner.query(sql, parameters);\n\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n\n            // call after updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return updateResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Values needs to be updated.\n     */\n    set(values: QueryDeepPartialEntity<Entity>): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity: Entity|Entity[]): this {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);\n\n        this.expressionMap.wheres = [];\n        const entities: Entity[] = entity instanceof Array ? entity : [entity];\n        entities.forEach(entity => {\n\n            const entityIdMap = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new Error(`Provided entity does not have ids set, cannot perform operation.`);\n\n            this.orWhereInIds(entityIdMap);\n        });\n\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const valuesSet = this.getValueSet();\n        const metadata = this.expressionMap.mainAlias!.hasMetadata ? this.expressionMap.mainAlias!.metadata : undefined;\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        const newParameters: ObjectLiteral = {};\n        let parametersCount =   this.connection.driver instanceof MysqlDriver ||\n                                this.connection.driver instanceof OracleDriver ||\n                                this.connection.driver instanceof AbstractSqliteDriver\n            ? 0 : Object.keys(this.expressionMap.nativeParameters).length;\n        if (metadata) {\n            EntityMetadata.createPropertyPath(metadata, valuesSet).forEach(propertyPath => {\n                // todo: make this and other query builder to work with properly with tables without metadata\n                const columns = metadata.findColumnsWithPropertyPath(propertyPath);\n\n                if (columns.length <= 0) {\n                    throw new EntityColumnNotFound(propertyPath);\n                }\n\n                columns.forEach(column => {\n                    if (!column.isUpdate) { return; }\n\n                    const paramName = \"upd_\" + column.databaseName;\n\n                    //\n                    let value = column.getEntityValue(valuesSet);\n                    if (column.referencedColumn && value instanceof Object) {\n                        value = column.referencedColumn.getEntityValue(value);\n                    }\n                    else if (!(value instanceof Function)) {\n                        value = this.connection.driver.preparePersistentValue(value, column);\n                    }\n\n                    // todo: duplication zone\n                    if (value instanceof Function) { // support for SQL expressions in update query\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + value());\n                    } else {\n                        if (this.connection.driver instanceof SqlServerDriver) {\n                            value = this.connection.driver.parametrizeValue(column, value);\n\n                        // } else if (value instanceof Array) {\n                        //     value = new ArrayParameter(value);\n                        }\n\n                        if (this.connection.driver instanceof MysqlDriver ||\n                            this.connection.driver instanceof OracleDriver ||\n                            this.connection.driver instanceof AbstractSqliteDriver) {\n                            newParameters[paramName] = value;\n                        } else {\n                            this.expressionMap.nativeParameters[paramName] = value;\n                        }\n\n                        let expression = null;\n                        if (this.connection.driver instanceof MysqlDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression = `GeomFromText(${this.connection.driver.createParameter(paramName, parametersCount)})`;\n                        } else if (this.connection.driver instanceof PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                              expression = `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)}), ${column.srid})::${column.type}`;\n                            } else {\n                              expression = `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(paramName, parametersCount)})::${column.type}`;\n                            }\n                        } else {\n                            expression = this.connection.driver.createParameter(paramName, parametersCount);\n                        }\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + expression);\n                        parametersCount++;\n                    }\n                });\n            });\n\n            if (metadata.versionColumn)\n                updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n            if (metadata.updateDateColumn)\n                updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n\n        } else {\n            Object.keys(valuesSet).map(key => {\n                let value = valuesSet[key];\n\n                // todo: duplication zone\n                if (value instanceof Function) { // support for SQL expressions in update query\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + value());\n                } else {\n\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\n                    // if (value instanceof Array)\n                    //     value = new ArrayParameter(value);\n\n                    if (this.connection.driver instanceof MysqlDriver ||\n                        this.connection.driver instanceof OracleDriver ||\n                        this.connection.driver instanceof AbstractSqliteDriver) {\n                        newParameters[key] = value;\n                    } else {\n                        this.expressionMap.nativeParameters[key] = value;\n                    }\n\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + this.connection.driver.createParameter(key, parametersCount));\n                    parametersCount++;\n                }\n            });\n        }\n\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver) {\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n        }\n\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        // generate and return sql update query\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                        } else {\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\n                        }\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    protected createLimitExpression(): string {\n        let limit: number|undefined = this.expressionMap.limit;\n\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver) {\n                return \" LIMIT \" + limit;\n            } else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSet(): ObjectLiteral {\n        if (this.expressionMap.valuesSet instanceof Object)\n            return this.expressionMap.valuesSet;\n\n        throw new UpdateValuesMissingError();\n    }\n\n}\n","/**\n * Result object returned by DeleteQueryBuilder execution.\n */\nexport class DeleteResult {\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any;\n\n    /**\n     * Number of affected rows/documents\n     * Not all drivers support this\n     */\n    affected?: number;\n}","import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {DeleteResult} from \"./result/DeleteResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createDeleteExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<DeleteResult> {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // execute query\n            const deleteResult = new DeleteResult();\n            const result = await queryRunner.query(sql, parameters);\n\n            const driver = queryRunner.connection.driver;\n            if (driver instanceof MysqlDriver) {\n                deleteResult.raw = result;\n                deleteResult.affected = result.affectedRows;\n\n            } else if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof CockroachDriver) {\n                deleteResult.raw = result[0] ? result[0] : null;\n                // don't return 0 because it could confuse. null means that we did not receive this value\n                deleteResult.affected = typeof result[1] === \"number\" ? result[1] : null;\n\n            } else if (driver instanceof OracleDriver) {\n                deleteResult.affected = result;\n\n            } else {\n                deleteResult.raw = result;\n            }\n\n            // call after deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return deleteResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: ObjectType<T>|EntitySchema<T>|string, aliasName?: string): DeleteQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as DeleteQueryBuilder<T>;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: Brackets|string|((qb: this) => string)|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    protected createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression !== \"\" && this.connection.driver instanceof SqlServerDriver) {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `DELETE FROM ${tableName}${whereExpression}`;\n        }\n    }\n\n}\n","import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationUpdater {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryBuilder: QueryBuilder<any>,\n                protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs set or add operation on a relation.\n     */\n    async update(value: any|any[]): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n\n            const updateSet = relation.joinColumns.reduce((updateSet, joinColumn) => {\n                const relationValue = value instanceof Object ? joinColumn.referencedColumn!.getEntityValue(value) : value;\n                joinColumn.setEntityValue(updateSet, relationValue);\n                return updateSet;\n            }, {} as any);\n\n            if (!this.expressionMap.of || (this.expressionMap.of instanceof Array && !this.expressionMap.of.length)) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.entityMetadata.target)\n                .set(updateSet)\n                .whereInIds(this.expressionMap.of)\n                .execute();\n\n        } else if ((relation.isOneToOneNotOwner || relation.isOneToMany) && value === null) { // we handle null a bit different way\n\n            const updateSet: ObjectLiteral = {};\n            relation.inverseRelation!.joinColumns.forEach(column => {\n                updateSet[column.propertyName] = null;\n            });\n\n            const ofs = this.expressionMap.of instanceof Array ? this.expressionMap.of : [this.expressionMap.of];\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            ofs.forEach((of, ofIndex) => {\n                relation.inverseRelation!.joinColumns.map((column, columnIndex) => {\n                    const parameterName = \"joinColumn_\" + ofIndex + \"_\" + columnIndex;\n                    parameters[parameterName] = of instanceof Object ? column.referencedColumn!.getEntityValue(of) : of;\n                    conditions.push(`${column.propertyPath} = :${parameterName}`);\n                });\n            });\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\n            if (!condition) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n\n        } else if (relation.isOneToOneNotOwner || relation.isOneToMany) {\n\n            if (this.expressionMap.of instanceof Array)\n                throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\n\n            const of = this.expressionMap.of;\n            const updateSet = relation.inverseRelation!.joinColumns.reduce((updateSet, joinColumn) => {\n                const relationValue = of instanceof Object ? joinColumn.referencedColumn!.getEntityValue(of) : of;\n                joinColumn.setEntityValue(updateSet, relationValue);\n                return updateSet;\n            }, {} as any);\n\n            if (!value || (value instanceof Array && !value.length)) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .whereInIds(value)\n                .execute();\n\n        } else { // many to many\n            const junctionMetadata = relation.junctionEntityMetadata!;\n            const ofs = this.expressionMap.of instanceof Array ? this.expressionMap.of : [this.expressionMap.of];\n            const values = value instanceof Array ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\n\n            const bulkInserted: ObjectLiteral[] = [];\n            firstColumnValues.forEach(firstColumnVal => {\n                secondColumnValues.forEach(secondColumnVal => {\n                    const inserted: ObjectLiteral = {};\n                    junctionMetadata.ownerColumns.forEach(column => {\n                        inserted[column.databaseName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(firstColumnVal) : firstColumnVal;\n                    });\n                    junctionMetadata.inverseColumns.forEach(column => {\n                        inserted[column.databaseName] = secondColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(secondColumnVal) : secondColumnVal;\n                    });\n                    bulkInserted.push(inserted);\n                });\n            });\n\n            if (!bulkInserted.length) return;\n\n            if (this.queryBuilder.connection.driver instanceof  OracleDriver) {\n                await Promise.all(bulkInserted.map(value => {\n                    return this.queryBuilder\n                        .createQueryBuilder()\n                        .insert()\n                        .into(junctionMetadata.tableName)\n                        .values(value)\n                        .execute();\n                }));\n            } else {\n                await this.queryBuilder\n                    .createQueryBuilder()\n                    .insert()\n                    .into(junctionMetadata.tableName)\n                    .values(bulkInserted)\n                    .execute();\n            }\n        }\n    }\n\n}","import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationRemover {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryBuilder: QueryBuilder<any>,\n                protected expressionMap: QueryExpressionMap) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs remove operation on a relation.\n     */\n    async remove(value: any|any[]): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (relation.isOneToMany) {\n\n            // if (this.expressionMap.of instanceof Array)\n            //     throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\n\n            // DELETE FROM post WHERE post.categoryId = of AND post.id = id\n            const ofs = this.expressionMap.of instanceof Array ? this.expressionMap.of : [this.expressionMap.of];\n            const values = value instanceof Array ? value : [value];\n\n            const updateSet: ObjectLiteral = {};\n            relation.inverseRelation!.joinColumns.forEach(column => {\n                updateSet[column.propertyName] = null;\n            });\n\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            ofs.forEach((of, ofIndex) => {\n                conditions.push(...values.map((value, valueIndex) => {\n                    return [\n                        ...relation.inverseRelation!.joinColumns.map((column, columnIndex) => {\n                            const parameterName = \"joinColumn_\" + ofIndex + \"_\" + valueIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = of instanceof Object ? column.referencedColumn!.getEntityValue(of) : of;\n                            return `${column.propertyPath} = :${parameterName}`;\n                        }),\n                        ...relation.inverseRelation!.entityMetadata.primaryColumns.map((column, columnIndex) => {\n                            const parameterName = \"primaryColumn_\" + valueIndex + \"_\" + valueIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = value instanceof Object ? column.getEntityValue(value) : value;\n                            return `${column.propertyPath} = :${parameterName}`;\n                        })\n                    ].join(\" AND \");\n                }));\n            });\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\n            if (!condition) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n\n        } else { // many to many\n\n            const junctionMetadata = relation.junctionEntityMetadata!;\n            const ofs = this.expressionMap.of instanceof Array ? this.expressionMap.of : [this.expressionMap.of];\n            const values = value instanceof Array ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\n\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            firstColumnValues.forEach((firstColumnVal, firstColumnValIndex) => {\n                conditions.push(...secondColumnValues.map((secondColumnVal, secondColumnValIndex) => {\n                    return [\n                        ...junctionMetadata.ownerColumns.map((column, columnIndex) => {\n                            const parameterName = \"firstValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(firstColumnVal) : firstColumnVal;\n                            return `${column.databaseName} = :${parameterName}`;\n                        }),\n                        ...junctionMetadata.inverseColumns.map((column, columnIndex) => {\n                            const parameterName = \"secondValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\n                            parameters[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(secondColumnVal) : secondColumnVal;\n                            return `${column.databaseName} = :${parameterName}`;\n                        })\n                    ].join(\" AND \");\n                }));\n            });\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .delete()\n                .from(junctionMetadata.tableName)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n        }\n    }\n\n}","import {QueryBuilder} from \"./QueryBuilder\";\nimport {RelationUpdater} from \"./RelationUpdater\";\nimport {RelationRemover} from \"./RelationRemover\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationQueryBuilder<Entity> extends QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        return \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets entity (target) which relations will be updated.\n     */\n    of(entity: any|any[]): this {\n        this.expressionMap.of = entity;\n        return this;\n    }\n\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    async set(value: any): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToMany || relation.isOneToMany)\n            throw new Error(`Set operation is only supported for many-to-one and one-to-one relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .add() method instead.`);\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async add(value: any|any[]): Promise<void> {\n        if (value instanceof Array && value.length === 0)\n            return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set() method instead.`);\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async remove(value: any|any[]): Promise<void> {\n        if (value instanceof Array && value.length === 0)\n            return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set(null) method instead.`);\n\n        const remover = new RelationRemover(this, this.expressionMap);\n        return remover.remove(value);\n    }\n\n    /**\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async addAndRemove(added: any|any[], removed: any|any[]): Promise<void> {\n        await this.remove(removed);\n        await this.add(added);\n    }\n\n    /**\n     * Gets entity's relation id.\n    async getId(): Promise<any> {\n\n    }*/\n\n    /**\n     * Gets entity's relation ids.\n    async getIds(): Promise<any[]> {\n        return [];\n    }*/\n\n    /**\n     * Loads a single entity (relational) from the relation.\n     * You can also provide id of relational entity to filter by.\n     */\n    async loadOne<T = any>(): Promise<T|undefined> {\n        return this.loadMany<T>().then(results => results[0]);\n    }\n\n    /**\n     * Loads many entities (relational) from the relation.\n     * You can also provide ids of relational entities to filter by.\n     */\n    async loadMany<T = any>(): Promise<T[]> {\n        let of = this.expressionMap.of;\n        if (!(of instanceof Object)) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.hasMultiplePrimaryKeys)\n                throw new Error(`Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`);\n\n            of = metadata.primaryColumns[0].createValueMap(of);\n        }\n\n        return this.connection.relationLoader.load(this.expressionMap.relationMetadata, of);\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"./SelectQueryBuilder\";\nimport {UpdateQueryBuilder} from \"./UpdateQueryBuilder\";\nimport {DeleteQueryBuilder} from \"./DeleteQueryBuilder\";\nimport {InsertQueryBuilder} from \"./InsertQueryBuilder\";\nimport {RelationQueryBuilder} from \"./RelationQueryBuilder\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {Alias} from \"./Alias\";\nimport {Brackets} from \"./Brackets\";\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {EntitySchema} from \"../\";\nimport {FindOperator} from \"../find-options/FindOperator\";\nimport {In} from \"../find-options/operator/In\";\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    readonly expressionMap: QueryExpressionMap;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>);\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: Connection, queryRunner?: QueryRunner);\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n\n        } else {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner;\n            this.expressionMap = new QueryExpressionMap(this.connection);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    abstract getQuery(): string;\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Main alias is not set`); // todo: better exception\n\n        return this.expressionMap.mainAlias.name;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string, selectionAliasName?: string): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection?: string|string[], selectionAliasName?: string): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\";\n        if (selection instanceof Array) {\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\n        } else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n\n        // loading it dynamically because of circular issue\n        const SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\n        if (this instanceof SelectQueryBuilderCls)\n            return this as any;\n\n        return new SelectQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\";\n\n        // loading it dynamically because of circular issue\n        const InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\n        if (this instanceof InsertQueryBuilderCls)\n            return this as any;\n\n        return new InsertQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(updateSet: QueryDeepPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<T>(entity: ObjectType<T>, updateSet?: QueryDeepPartialEntity<T>): UpdateQueryBuilder<T>;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<T>(entity: EntitySchema<T>, updateSet?: QueryDeepPartialEntity<T>): UpdateQueryBuilder<T>;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update(entity: Function|EntitySchema<Entity>|string, updateSet?: QueryDeepPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(tableName: string, updateSet?: QueryDeepPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(entityOrTableNameUpdateSet?: string|Function|EntitySchema<any>|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet as ObjectLiteral|undefined;\n        entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof EntitySchema ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;\n\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\") {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n\n        // loading it dynamically because of circular issue\n        const UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\n        if (this instanceof UpdateQueryBuilderCls)\n            return this as any;\n\n        return new UpdateQueryBuilderCls(this);\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\";\n\n        // loading it dynamically because of circular issue\n        const DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\n        if (this instanceof DeleteQueryBuilderCls)\n            return this as any;\n\n        return new DeleteQueryBuilderCls(this);\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(propertyPath: string): RelationQueryBuilder<Entity>;\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation<T>(entityTarget: ObjectType<T>|string, propertyPath: string): RelationQueryBuilder<T>;\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(entityTargetOrPropertyPath: Function|string, maybePropertyPath?: string): RelationQueryBuilder<Entity> {\n        const entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\n        const propertyPath = arguments.length === 2 ? maybePropertyPath as string : entityTargetOrPropertyPath as string;\n\n        this.expressionMap.queryType = \"relation\";\n        this.expressionMap.relationPropertyPath = propertyPath;\n\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n\n        // loading it dynamically because of circular issue\n        const RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\n        if (this instanceof RelationQueryBuilderCls)\n            return this as any;\n\n        return new RelationQueryBuilderCls(this);\n    }\n\n\n    /**\n     * Checks if given relation exists in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: ObjectType<T>|string, relation: string): boolean;\n\n    /**\n     * Checks if given relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: ObjectType<T>|string, relation: string[]): boolean;\n\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: ObjectType<T>|string, relation: string|string[]): boolean {\n        const entityMetadata = this.connection.getMetadata(target);\n        const relations = relation instanceof Array ? relation : [relation];\n        return relations.every(relation => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\n        });\n    }\n\n    /**\n     * Sets parameter name and its value.\n     */\n    setParameter(key: string, value: any): this {\n        this.expressionMap.parameters[key] = value;\n        return this;\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n\n        // remove function parameters\n        Object.keys(parameters).forEach(key => {\n            if (parameters[key] instanceof Function) {\n                throw new Error(`Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`);\n            }\n        });\n\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setParameters(parameters);\n\n        Object.keys(parameters).forEach(key => this.setParameter(key, parameters[key]));\n        return this;\n    }\n\n    /**\n     * Adds native parameters from the given object.\n     */\n    setNativeParameters(parameters: ObjectLiteral): this {\n\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);\n\n        Object.keys(parameters).forEach(key => {\n            this.expressionMap.nativeParameters[key] = parameters[key];\n        });\n        return this;\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign({}, this.expressionMap.parameters);\n\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(childMetadata => childMetadata.discriminatorColumn)\n                    .map(childMetadata => childMetadata.discriminatorValue);\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n\n        return parameters;\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this { // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters();\n        this.connection.logger.logQuery(query, parameters);\n        return this;\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.getQueryAndParameters()[0];\n    }\n\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters(): [string, any[]] {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery();\n        const parameters = this.getParameters();\n        return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        try {\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection, this.queryRunner);\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        return new (this.constructor as any)(this);\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    }\n\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner: QueryRunner): this {\n        this.queryRunner = queryRunner;\n        return this;\n    }\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled: boolean): this {\n        this.expressionMap.callListeners = enabled;\n        return this;\n    }\n\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled: boolean): this {\n        this.expressionMap.useTransaction = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath.split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\")\n                    return i;\n                return this.escape(i);\n            }).join(\".\");\n    }\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getMainTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`);\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath;\n\n        return this.expressionMap.mainAlias.tablePath!;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected createFromAlias(entityTarget: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName?: string): Alias {\n\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget);\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath\n            });\n\n        } else {\n            let subQuery: string = \"\";\n            if (entityTarget instanceof Function) {\n                const subQueryBuilder: SelectQueryBuilder<any> = (entityTarget as any)(((this as any) as SelectQueryBuilder<any>).subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n\n            } else {\n                subQuery = entityTarget;\n            }\n            const isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityTarget as string : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    protected replacePropertyNames(statement: string) {\n        this.expressionMap.aliases.forEach(alias => {\n            if (!alias.hasMetadata) return;\n            const replaceAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? alias.name + \"\\\\.\" : \"\";\n            const replacementAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(alias.name) + \".\" : \"\";\n            alias.metadata.columns.forEach(column => {\n                const expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(column.databaseName) + \"$2\");\n                const expression2 = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(column.databaseName) + \"$2\");\n            });\n            alias.metadata.relations.forEach(relation => {\n                [...relation.joinColumns, ...relation.inverseJoinColumns].forEach(joinColumn => {\n                    const expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn!.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                });\n                if (relation.joinColumns.length > 0) {\n                    const expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                }\n            });\n        });\n        return statement;\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n        const conditions = this.createWhereExpressionString();\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name + \".\" + metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName;\n\n                const condition = `${this.replacePropertyNames(column)} IN (:...discriminatorColumnValues)`;\n                return ` WHERE ${ conditions.length ? \"(\" + conditions + \") AND\" : \"\" } ${condition}`;\n            }\n        }\n\n        if (!conditions.length) // TODO copy in to discriminator condition\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\n\n        if (this.expressionMap.extraAppendedAndWhereCondition)\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n\n        return \" WHERE \" + conditions;\n    }\n\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    protected createReturningExpression(): string {\n        const columns = this.getReturningColumns();\n        const driver = this.connection.driver;\n\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported()) {\n            columns.push(...this.expressionMap.extraReturningColumns.filter(column => {\n                return columns.indexOf(column) === -1;\n            }));\n        }\n\n        if (columns.length) {\n            let columnsExpression = columns.map(column => {\n                const name = this.escape(column.databaseName);\n                if (driver instanceof SqlServerDriver) {\n                    if (this.expressionMap.queryType === \"insert\" || this.expressionMap.queryType === \"update\") {\n                        return \"INSERTED.\" + name;\n                    } else {\n                        return this.escape(this.getMainTableName()) + \".\" + name;\n                    }\n                } else {\n                    return name;\n                }\n            }).join(\", \");\n\n            if (driver instanceof OracleDriver) {\n                columnsExpression += \" INTO \" + columns.map(column => {\n                    const parameterName = \"output_\" + column.databaseName;\n                    this.expressionMap.nativeParameters[parameterName] = { type: driver.columnTypeToNativeParameter(column.type), dir: driver.oracle.BIND_OUT };\n                    return this.connection.driver.createParameter(parameterName, Object.keys(this.expressionMap.nativeParameters).length);\n                }).join(\", \");\n            }\n            return columnsExpression;\n\n        } else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    protected getReturningColumns(): ColumnMetadata[] {\n        const columns: ColumnMetadata[] = [];\n        if (this.expressionMap.returning instanceof Array) {\n            (this.expressionMap.returning as string[]).forEach(columnName => {\n                if (this.expressionMap.mainAlias!.hasMetadata) {\n                    columns.push(...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(columnName));\n                }\n            });\n        }\n        return columns;\n    }\n\n    /**\n     * Concatenates all added where expressions into one string.\n     */\n    protected createWhereExpressionString(): string {\n        return this.expressionMap.wheres.map((where, index) => {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\n                default:\n                    return this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n    }\n\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    protected createWhereIdsExpression(ids: any|any[]): string {\n        const metadata = this.expressionMap.mainAlias!.metadata;\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map(id => metadata.ensureEntityIdMap(id));\n\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys\n            && metadata.embeddeds.length === 0\n        ) {\n            const primaryColumn = metadata.primaryColumns[0];\n\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            if (!primaryColumn.transformer) {\n                return this.computeWhereParameter({\n                    [primaryColumn.propertyName]: In(\n                        normalized.map(id => primaryColumn.getEntityValue(id, false))\n                    )\n                });\n            }\n        }\n\n        // create shortcuts for better readability\n        const alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias!.name) + \".\" : \"\";\n        let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n        const whereStrings = normalized.map((id, index) => {\n            const whereSubStrings: string[] = [];\n            metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\n                const parameterName = \"id_\" + index + \"_\" + secondIndex;\n                // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\n                whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \" = \" + this.connection.driver.createParameter(parameterName, parameterIndex));\n                this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);\n                parameterIndex++;\n            });\n            return whereSubStrings.join(\" AND \");\n        });\n\n        return whereStrings.length > 1\n            ? \"(\" + whereStrings.map(whereString => \"(\" + whereString + \")\").join(\" OR \") + \")\"\n            : whereStrings[0];\n    }\n\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    protected computeWhereParameter(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[]) {\n        if (typeof where === \"string\")\n            return where;\n\n        if (where instanceof Brackets) {\n            const whereQueryBuilder = this.createQueryBuilder();\n            where.whereFactory(whereQueryBuilder as any);\n            const whereString = whereQueryBuilder.createWhereExpressionString();\n            this.setParameters(whereQueryBuilder.getParameters());\n            return whereString ? \"(\" + whereString + \")\" : \"\";\n\n        } else if (where instanceof Function) {\n            return where(this);\n\n        } else if (where instanceof Object) {\n            const wheres: ObjectLiteral[] = where instanceof Array ? where : [where];\n            let andConditions: string[];\n            let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n\n            if (this.expressionMap.mainAlias!.hasMetadata) {\n                andConditions = wheres.map((where, whereIndex) => {\n                    const propertyPaths = EntityMetadata.createPropertyPath(this.expressionMap.mainAlias!.metadata, where);\n\n                    return propertyPaths.map((propertyPath, propertyIndex) => {\n                        const columns = this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(propertyPath);\n                        return columns.map((column, columnIndex) => {\n\n                            const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${propertyPath}` : column.propertyPath;\n                            let parameterValue = column.getEntityValue(where, true);\n                            const parameterName = \"where_\" + whereIndex + \"_\" + propertyIndex + \"_\" + columnIndex;\n                            const parameterBaseCount = Object.keys(this.expressionMap.nativeParameters).filter(x => x.startsWith(parameterName)).length;\n\n                            if (parameterValue === null) {\n                                return `${aliasPath} IS NULL`;\n\n                            } else if (parameterValue instanceof FindOperator) {\n                                let parameters: any[] = [];\n                                if (parameterValue.useParameter) {\n                                    const realParameterValues: any[] = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];\n                                    realParameterValues.forEach((realParameterValue, realParameterValueIndex) => {\n                                        this.expressionMap.nativeParameters[parameterName + (parameterBaseCount + realParameterValueIndex)] = realParameterValue;\n                                        parameterIndex++;\n                                        parameters.push(this.connection.driver.createParameter(parameterName + (parameterBaseCount + realParameterValueIndex), parameterIndex - 1));\n                                    });\n                                }\n                                return parameterValue.toSql(this.connection, aliasPath, parameters);\n\n                            } else {\n                                this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                                parameterIndex++;\n                                const parameter = this.connection.driver.createParameter(parameterName, parameterIndex - 1);\n                                return `${aliasPath} = ${parameter}`;\n                            }\n\n                        }).filter(expression => !!expression).join(\" AND \");\n                    }).filter(expression => !!expression).join(\" AND \");\n                });\n\n            } else {\n                andConditions = wheres.map((where, whereIndex) => {\n                    return Object.keys(where).map((key, parameterIndex) => {\n                        const parameterValue = where[key];\n                        const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${key}` : key;\n                        if (parameterValue === null) {\n                            return `${aliasPath} IS NULL`;\n\n                        } else {\n                            const parameterName = \"where_\" + whereIndex + \"_\" + parameterIndex;\n                            this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                            parameterIndex++;\n                            return `${aliasPath} = ${this.connection.driver.createParameter(parameterName, parameterIndex - 1)}`;\n                        }\n                    }).join(\" AND \");\n                });\n            }\n\n            if (andConditions.length > 1)\n                return andConditions.map(where => \"(\" + where + \")\").join(\" OR \");\n\n            return andConditions.join(\"\");\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner(\"master\");\n    }\n\n}\n","/**\n * Thrown when selected sql driver does not supports locking.\n */\nexport class LockNotSupportedOnGivenDriverError extends Error {\n    name = \"LockNotSupportedOnGivenDriverError\";\n\n    constructor() {\n        super();\n        Object.setPrototypeOf(this, LockNotSupportedOnGivenDriverError.prototype);\n        this.message = `Locking not supported on given driver.`;\n    }\n\n}","/**\n * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.\n*/\nexport class OffsetWithoutLimitNotSupportedError extends Error {\n    name = \"OffsetWithoutLimitNotSupportedError\";\n\n    constructor(driverName: string) {\n        super();\n        Object.setPrototypeOf(this, OffsetWithoutLimitNotSupportedError.prototype);\n        this.message = `${driverName} does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).`;\n    }\n\n}","import {RawSqlResultsToEntityTransformer} from \"./transformer/RawSqlResultsToEntityTransformer\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PessimisticLockTransactionRequiredError} from \"../error/PessimisticLockTransactionRequiredError\";\nimport {NoVersionOrUpdateDateColumnError} from \"../error/NoVersionOrUpdateDateColumnError\";\nimport {OptimisticLockVersionMismatchError} from \"../error/OptimisticLockVersionMismatchError\";\nimport {OptimisticLockCanNotBeUsedError} from \"../error/OptimisticLockCanNotBeUsedError\";\nimport {JoinAttribute} from \"./JoinAttribute\";\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\nimport {RelationIdLoader} from \"./relation-id/RelationIdLoader\";\nimport {RelationIdMetadataToAttributeTransformer} from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\nimport {RelationCountLoader} from \"./relation-count/RelationCountLoader\";\nimport {RelationCountMetadataToAttributeTransformer} from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ReadStream} from \"../platform/PlatformTools\";\nimport {LockNotSupportedOnGivenDriverError} from \"../error/LockNotSupportedOnGivenDriverError\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {SelectQuery} from \"./SelectQuery\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {QueryResultCacheOptions} from \"../cache/QueryResultCacheOptions\";\nimport {OffsetWithoutLimitNotSupportedError} from \"../error/OffsetWithoutLimitNotSupportedError\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {SelectQueryBuilderOption} from \"./SelectQueryBuilderOption\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {DriverUtils} from \"../driver/DriverUtils\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SelectQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitOffsetExpression();\n        sql += this.createLockExpression();\n        sql = sql.trim();\n        if (this.expressionMap.subQuery)\n            sql = \"(\" + sql + \")\";\n        return sql;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a subquery - query that can be used inside other queries.\n     */\n    subQuery(): SelectQueryBuilder<any> {\n        const qb = this.createQueryBuilder();\n        qb.expressionMap.subQuery = true;\n        qb.expressionMap.parentQueryBuilder = this;\n        return qb;\n    }\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): this;\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, selectionAliasName?: string): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string, selectionAliasName?: string): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection?: string|string[]|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), selectionAliasName?: string): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\";\n        if (selection instanceof Array) {\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\n\n        } else if (selection instanceof Function) {\n            const subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });\n\n        } else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, selectionAliasName?: string): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string, selectionAliasName?: string): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string[]): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string|string[]|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), selectionAliasName?: string): this {\n        if (!selection)\n            return this;\n\n        if (selection instanceof Array) {\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(selection => ({ selection: selection })));\n\n        } else if (selection instanceof Function) {\n            const subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });\n\n        } else if (selection) {\n            this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });\n        }\n\n        return this;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from<T>(entityTarget: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from<T>(entityTarget: ObjectType<T>|string, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from<T>(entityTarget: ObjectType<T>|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName: string): SelectQueryBuilder<T> {\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as SelectQueryBuilder<T>;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom<T>(entityTarget: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom<T>(entityTarget: ObjectType<T>|string, aliasName: string): SelectQueryBuilder<T>;\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom<T>(entityTarget: ObjectType<T>|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName: string): SelectQueryBuilder<T> {\n        const alias = this.createFromAlias(entityTarget, aliasName);\n        if (!this.expressionMap.mainAlias)\n            this.expressionMap.setMainAlias(alias);\n\n        return (this as any) as SelectQueryBuilder<T>;\n    }\n\n    /**\n     * INNER JOINs (without selection) given subquery.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection) given entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entity: Function|string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs (without selection) given subquery.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection) entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entity: Function|string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * INNER JOINs given subquery and adds all selection properties to SELECT..\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entity: Function|string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.innerJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs given subquery and adds all selection properties to SELECT..\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(tableName: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.leftJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n\n    /**\n     * INNER JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    }\n\n    /**\n     * INNER JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, false);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    }\n\n    /**\n     * LEFT JOINs given subquery, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, subQueryFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition: string, parameters?: ObjectLiteral): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), alias: string, condition: string = \"\", parameters?: ObjectLiteral): this {\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, false);\n        return this;\n    }\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, property: string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this;\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, entity: Function|string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this;\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, tableName: string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this;\n\n    /**\n     */\n    // selectAndMap(mapToProperty: string, entityOrProperty: Function|string, aliasName: string, qbFactory: ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>)): this {\n    //     const select = new SelectAttribute(this.expressionMap);\n    //     select.mapToProperty = mapToProperty;\n    //     select.entityOrProperty = entityOrProperty;\n    //     select.aliasName = aliasName;\n    //     select.qbFactory = qbFactory;\n    //     return this;\n    // }\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, options?: { disableMixedMap?: boolean }): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, alias: string, queryBuilderFactory: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this;\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty: string,\n                         relationName: string,\n                         aliasNameOrOptions?: string|{ disableMixedMap?: boolean },\n                         queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this {\n\n        const relationIdAttribute = new RelationIdAttribute(this.expressionMap);\n        relationIdAttribute.mapToProperty = mapToProperty;\n        relationIdAttribute.relationName = relationName;\n        if (typeof aliasNameOrOptions === \"string\")\n            relationIdAttribute.alias = aliasNameOrOptions;\n        if (aliasNameOrOptions instanceof Object && (aliasNameOrOptions as any).disableMixedMap)\n            relationIdAttribute.disableMixedMap = true;\n\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\n\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationIdAttribute.junctionAlias,\n                metadata: relationIdAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationCountAndMap(mapToProperty: string, relationName: string, aliasName?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): this {\n        const relationCountAttribute = new RelationCountAttribute(this.expressionMap);\n        relationCountAttribute.mapToProperty = mapToProperty;\n        relationCountAttribute.relationName = relationName;\n        relationCountAttribute.alias = aliasName;\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\n\n        this.expressionMap.createAlias({\n            type: \"other\",\n            name: relationCountAttribute.junctionAlias\n        });\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationCountAttribute.junctionAlias,\n                metadata: relationCountAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Loads all relation ids for all relations of the selected entity.\n     * All relation ids will be mapped to relation property themself.\n     * If array of strings is given then loads only relation ids of the given properties.\n     */\n    loadAllRelationIds(options?: { relations?: string[], disableMixedMap?: boolean }): this { // todo: add skip relations\n        this.expressionMap.mainAlias!.metadata.relations.forEach(relation => {\n            if (options !== undefined && options.relations !== undefined && options.relations.indexOf(relation.propertyPath) === -1)\n                return;\n\n            this.loadRelationIdAndMap(\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\n                options\n            );\n        });\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: Brackets|string|((qb: this) => string)|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|Brackets|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Sets HAVING condition in the query builder.\n     * If you had previously HAVING expression defined,\n     * calling this function will override previously set HAVING conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    having(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andHaving(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orHaving(having: string, parameters?: ObjectLiteral): this {\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(): this;\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy: string): this;\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy?: string): this {\n        if (groupBy) {\n            this.expressionMap.groupBys = [groupBy];\n        } else {\n            this.expressionMap.groupBys = [];\n        }\n        return this;\n    }\n\n    /**\n     * Adds GROUP BY condition in the query builder.\n     */\n    addGroupBy(groupBy: string): this {\n        this.expressionMap.groupBys.push(groupBy);\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.`);\n        if (nulls !== undefined && nulls !== \"NULLS FIRST\" && nulls !== \"NULLS LAST\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.`);\n\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.`);\n        if (nulls !== undefined && nulls !== \"NULLS FIRST\" && nulls !== \"NULLS LAST\")\n            throw new Error(`SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.`);\n\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Set's LIMIT - maximum number of rows to be selected.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead take method instead.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = this.normalizeNumber(limit);\n        if (this.expressionMap.limit !== undefined && isNaN(this.expressionMap.limit))\n            throw new Error(`Provided \"limit\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Set's OFFSET - selection offset.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead skip method instead.\n     */\n    offset(offset?: number): this {\n        this.expressionMap.offset = this.normalizeNumber(offset);\n        if (this.expressionMap.offset !== undefined && isNaN(this.expressionMap.offset))\n            throw new Error(`Provided \"offset\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Sets maximal number of entities to take.\n     */\n    take(take?: number): this {\n        this.expressionMap.take = this.normalizeNumber(take);\n        if (this.expressionMap.take !== undefined && isNaN(this.expressionMap.take))\n            throw new Error(`Provided \"take\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Sets number of entities to skip.\n     */\n    skip(skip?: number): this {\n        this.expressionMap.skip = this.normalizeNumber(skip);\n        if (this.expressionMap.skip !== undefined && isNaN(this.expressionMap.skip))\n            throw new Error(`Provided \"skip\" value is not a number. Please provide a numeric value.`);\n\n        return this;\n    }\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"pessimistic_read\"|\"pessimistic_write\"|\"dirty_read\"): this;\n\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\"|\"dirty_read\", lockVersion?: number|Date): this {\n        this.expressionMap.lockMode = lockMode;\n        this.expressionMap.lockVersion = lockVersion;\n        return this;\n\n    }\n\n    /**\n     * Gets first raw result returned by execution of generated query builder sql.\n     */\n    async getRawOne(): Promise<any> {\n        return (await this.getRawMany())[0];\n    }\n\n    /**\n     * Gets all raw results returned by execution of generated query builder sql.\n     */\n    async getRawMany(): Promise<any[]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        this.expressionMap.queryEntity = false;\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            const results = await this.loadRawResults(queryRunner);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    async getRawAndEntities(): Promise<{ entities: Entity[], raw: any[] }> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            this.expressionMap.queryEntity = true;\n            const results = await this.executeEntitiesAndRawResults(queryRunner);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Gets single entity returned by execution of generated query builder sql.\n     */\n    async getOne(): Promise<Entity|undefined> {\n        const results = await this.getRawAndEntities();\n        const result = results.entities[0] as any;\n\n        if (result && this.expressionMap.lockMode === \"optimistic\" && this.expressionMap.lockVersion) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n\n            if (this.expressionMap.lockVersion instanceof Date) {\n                const actualVersion = metadata.updateDateColumn!.getEntityValue(result); // what if columns arent set?\n                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n\n            } else {\n                const actualVersion = metadata.versionColumn!.getEntityValue(result); // what if columns arent set?\n                if (actualVersion !== this.expressionMap.lockVersion)\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets entities returned by execution of generated query builder sql.\n     */\n    async getMany(): Promise<Entity[]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const results = await this.getRawAndEntities();\n        return results.entities;\n    }\n\n    /**\n     * Gets count - number of entities selected by sql generated by this query builder.\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\n     */\n    async getCount(): Promise<number> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            this.expressionMap.queryEntity = false;\n            const results = await this.executeCountQuery(queryRunner);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes built SQL query and returns entities and overall entities count (without limitation).\n     * This method is useful to build pagination.\n     */\n    async getManyAndCount(): Promise<[Entity[], number]> {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            this.expressionMap.queryEntity = true;\n            const entitiesAndRaw = await this.executeEntitiesAndRawResults(queryRunner);\n            this.expressionMap.queryEntity = false;\n            const count = await this.executeCountQuery(queryRunner);\n            const results: [Entity[], number] = [entitiesAndRaw.entities, count];\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes built SQL query and returns raw data stream.\n     */\n    async stream(): Promise<ReadStream> {\n        this.expressionMap.queryEntity = false;\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            const releaseFn = () => {\n                if (queryRunner !== this.queryRunner) // means we created our own query runner\n                    return queryRunner.release();\n                return;\n            };\n            const results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);\n\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n\n            return results;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Enables or disables query result caching.\n     */\n    cache(enabled: boolean): this;\n\n    /**\n     * Enables query result caching and sets in milliseconds in which cache will expire.\n     * If not set then global caching time will be used.\n     */\n    cache(milliseconds: number): this;\n\n    /**\n     * Enables query result caching and sets cache id and milliseconds in which cache will expire.\n     */\n    cache(id: any, milliseconds?: number): this;\n\n    /**\n     * Enables or disables query result caching.\n     */\n    cache(enabledOrMillisecondsOrId: boolean|number|string, maybeMilliseconds?: number): this {\n\n        if (typeof enabledOrMillisecondsOrId === \"boolean\") {\n            this.expressionMap.cache = enabledOrMillisecondsOrId;\n\n        } else if (typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheDuration = enabledOrMillisecondsOrId;\n\n        } else if (typeof enabledOrMillisecondsOrId === \"string\" || typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheId = enabledOrMillisecondsOrId;\n        }\n\n        if (maybeMilliseconds) {\n            this.expressionMap.cacheDuration = maybeMilliseconds;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets extra options that can be used to configure how query builder works.\n     */\n    setOption(option: SelectQueryBuilderOption): this {\n        this.expressionMap.options.push(option);\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected join(direction: \"INNER\"|\"LEFT\",\n                   entityOrProperty: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>),\n                   aliasName: string,\n                   condition?: string,\n                   parameters?: ObjectLiteral,\n                   mapToProperty?: string,\n                   isMappingMany?: boolean): void {\n\n        this.setParameters(parameters || {});\n\n        const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\n        joinAttribute.direction = direction;\n        joinAttribute.mapToProperty = mapToProperty;\n        joinAttribute.isMappingMany = isMappingMany;\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\n        joinAttribute.condition = condition; // joinInverseSideCondition\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\n        this.expressionMap.joinAttributes.push(joinAttribute);\n\n        if (joinAttribute.metadata) {\n\n            // todo: find and set metadata right there?\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                metadata: joinAttribute.metadata\n            });\n            if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {\n                this.expressionMap.createAlias({\n                    type: \"join\",\n                    name: joinAttribute.junctionAlias,\n                    metadata: joinAttribute.relation.junctionEntityMetadata\n                });\n            }\n\n        } else {\n            let subQuery: string = \"\";\n            if (entityOrProperty instanceof Function) {\n                const subQueryBuilder: SelectQueryBuilder<any> = (entityOrProperty as any)(((this as any) as SelectQueryBuilder<any>).subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n\n            } else {\n                subQuery = entityOrProperty;\n            }\n            const isSubQuery = entityOrProperty instanceof Function || entityOrProperty.substr(0, 1) === \"(\" && entityOrProperty.substr(-1) === \")\";\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityOrProperty as string : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    }\n\n    /**\n     * Creates \"SELECT FROM\" part of SQL query.\n     */\n    protected createSelectExpression() {\n\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Cannot build query because main alias is not set (call qb#from method)\");\n\n        // todo throw exception if selects or from is missing\n\n        const allSelects: SelectQuery[] = [];\n        const excludedSelects: SelectQuery[] = [];\n\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            allSelects.push(...this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));\n            excludedSelects.push(...this.findEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));\n        }\n\n        // add selects from joins\n        this.expressionMap.joinAttributes\n            .forEach(join => {\n                if (join.metadata) {\n                    allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name!, join.metadata));\n                    excludedSelects.push(...this.findEntityColumnSelects(join.alias.name!, join.metadata));\n                } else {\n                    const hasMainAlias = this.expressionMap.selects.some(select => select.selection === join.alias.name);\n                    if (hasMainAlias) {\n                        allSelects.push({ selection: this.escape(join.alias.name!) + \".*\" });\n                        const excludedSelect = this.expressionMap.selects.find(select => select.selection === join.alias.name);\n                        excludedSelects.push(excludedSelect!);\n                    }\n                }\n            });\n\n        // add all other selects\n        this.expressionMap.selects\n            .filter(select => excludedSelects.indexOf(select) === -1)\n            .forEach(select => allSelects.push({ selection: this.replacePropertyNames(select.selection), aliasName: select.aliasName }));\n\n        // if still selection is empty, then simply set it to all (*)\n        if (allSelects.length === 0)\n            allSelects.push({ selection: \"*\" });\n\n        let lock: string = \"\";\n        if (this.connection.driver instanceof SqlServerDriver) {\n            switch (this.expressionMap.lockMode) {\n                case \"pessimistic_read\":\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\n                    break;\n                case \"pessimistic_write\":\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\n                    break;\n                case \"dirty_read\":\n                    lock = \" WITH (NOLOCK)\";\n                    break;\n            }\n        }\n\n        // create a selection query\n        const froms = this.expressionMap.aliases\n            .filter(alias => alias.type === \"from\" && (alias.tablePath || alias.subQuery))\n            .map(alias => {\n                if (alias.subQuery)\n                    return alias.subQuery + \" \" + this.escape(alias.name);\n\n                return this.getTableName(alias.tablePath!) + \" \" + this.escape(alias.name);\n            });\n        const selection = allSelects.map(select => select.selection + (select.aliasName ? \" AS \" + this.escape(select.aliasName) : \"\")).join(\", \");\n        return \"SELECT \" + selection + \" FROM \" + froms.join(\", \") + lock;\n    }\n\n    /**\n     * Creates \"JOIN\" part of SQL query.\n     */\n    protected createJoinExpression(): string {\n\n        // examples:\n        // select from owning side\n        // qb.select(\"post\")\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\n        // select from non-owning side\n        // qb.select(\"category\")\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\n\n        const joins = this.expressionMap.joinAttributes.map(joinAttr => {\n\n            const relation = joinAttr.relation;\n            const destinationTableName = joinAttr.tablePath;\n            const destinationTableAlias = joinAttr.alias.name;\n            const appendedCondition = joinAttr.condition ? \" AND (\" + joinAttr.condition + \")\" : \"\";\n            const parentAlias = joinAttr.parentAlias;\n\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\n            // table to join, without junction table involved. This means we simply join direct table.\n            if (!parentAlias || !relation) {\n                const destinationJoin = joinAttr.alias.subQuery ? joinAttr.alias.subQuery : this.getTableName(destinationTableName);\n                return \" \" + joinAttr.direction + \" JOIN \" + destinationJoin + \" \" + this.escape(destinationTableAlias) +\n                    (joinAttr.condition ? \" ON \" + this.replacePropertyNames(joinAttr.condition) : \"\");\n            }\n\n            // if real entity relation is involved\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\n\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\n                const condition = relation.joinColumns.map(joinColumn => {\n                    return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\n                        parentAlias + \".\" + relation.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\n\n            } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\n                const condition = relation.inverseRelation!.joinColumns.map(joinColumn => {\n                    return destinationTableAlias + \".\" + relation.inverseRelation!.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\n                        parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                }).join(\" AND \");\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\n\n            } else { // means many-to-many\n                const junctionTableName = relation.junctionEntityMetadata!.tablePath;\n\n                const junctionAlias = joinAttr.junctionAlias;\n                let junctionCondition = \"\", destinationCondition = \"\";\n\n                if (relation.isOwning) {\n\n                    junctionCondition = relation.joinColumns.map(joinColumn => {\n                        // `post_category`.`postId` = `post`.`id`\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                    }).join(\" AND \");\n\n                    destinationCondition = relation.inverseJoinColumns.map(joinColumn => {\n                        // `category`.`id` = `post_category`.`categoryId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n\n                } else {\n                    junctionCondition = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => {\n                        // `post_category`.`categoryId` = `category`.`id`\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\n                    }).join(\" AND \");\n\n                    destinationCondition = relation.inverseRelation!.joinColumns.map(joinColumn => {\n                        // `post`.`id` = `post_category`.`postId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n                }\n\n                return \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(junctionTableName) + \" \" + this.escape(junctionAlias) + \" ON \" + this.replacePropertyNames(junctionCondition) +\n                    \" \" + joinAttr.direction + \" JOIN \" + this.getTableName(destinationTableName) + \" \" + this.escape(destinationTableAlias) + \" ON \" + this.replacePropertyNames(destinationCondition + appendedCondition);\n\n            }\n        });\n\n        return joins.join(\" \");\n    }\n\n    /**\n     * Creates \"GROUP BY\" part of SQL query.\n     */\n    protected createGroupByExpression() {\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length) return \"\";\n        return \" GROUP BY \" + this.replacePropertyNames(this.expressionMap.groupBys.join(\", \"));\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.allOrderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                        } else {\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\n                        }\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" and \"OFFSET\" parts of SQL query.\n     */\n    protected createLimitOffsetExpression(): string {\n        // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results\n        // we can use regular limit / offset, that's why we add offset and limit construction here based on skip and take values\n        let offset: number|undefined = this.expressionMap.offset,\n            limit: number|undefined = this.expressionMap.limit;\n        if (!offset && !limit && this.expressionMap.joinAttributes.length === 0) {\n            offset = this.expressionMap.skip;\n            limit = this.expressionMap.take;\n        }\n\n        if (this.connection.driver instanceof SqlServerDriver) {\n            // Due to a limitation in SQL Server's parser implementation it does not support using\n            // OFFSET or FETCH NEXT without an ORDER BY clause being provided. In cases where the\n            // user does not request one we insert a dummy ORDER BY that does nothing and should\n            // have no effect on the query planner or on the order of the results returned.\n            // https://dba.stackexchange.com/a/193799\n            let prefix = \"\";\n            if ((limit || offset) && Object.keys(this.expressionMap.allOrderBys).length <= 0) {\n                prefix = \" ORDER BY (SELECT NULL)\";\n            }\n\n            if (limit && offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (limit)\n                return prefix + \" OFFSET 0 ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS\";\n\n        } else if (this.connection.driver instanceof MysqlDriver) {\n\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                throw new OffsetWithoutLimitNotSupportedError(\"MySQL\");\n\n        } else if (this.connection.driver instanceof AbstractSqliteDriver) {\n\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" LIMIT -1 OFFSET \" + offset;\n\n        } else if (this.connection.driver instanceof OracleDriver) {\n\n            if (limit && offset)\n                return \" OFFSET \" + offset + \" ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (limit)\n                return \" FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return \" OFFSET \" + offset + \" ROWS\";\n\n        } else {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" OFFSET \" + offset;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LOCK\" part of SQL query.\n     */\n    protected createLockExpression(): string {\n        const driver = this.connection.driver;\n        switch (this.expressionMap.lockMode) {\n            case \"pessimistic_read\":\n                if (driver instanceof MysqlDriver) {\n                    return \" LOCK IN SHARE MODE\";\n\n                } else if (driver instanceof PostgresDriver) {\n                    return \" FOR SHARE\";\n\n                } else if (driver instanceof OracleDriver) {\n                    return \" FOR UPDATE\";\n\n                } else if (driver instanceof SqlServerDriver) {\n                    return \"\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write\":\n                if (driver instanceof MysqlDriver || driver instanceof PostgresDriver || driver instanceof OracleDriver) {\n                    return \" FOR UPDATE\";\n\n                } else if (driver instanceof SqlServerDriver) {\n                    return \"\";\n\n                } else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Creates \"HAVING\" part of SQL query.\n     */\n    protected createHavingExpression() {\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length) return \"\";\n        const conditions = this.expressionMap.havings.map((having, index) => {\n            switch (having.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\n                default:\n                    return this.replacePropertyNames(having.condition);\n            }\n        }).join(\" \");\n\n        if (!conditions.length) return \"\";\n        return \" HAVING \" + conditions;\n    }\n\n    protected buildEscapedEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\n        const hasMainAlias = this.expressionMap.selects.some(select => select.selection === aliasName);\n\n        const columns: ColumnMetadata[] = [];\n        if (hasMainAlias) {\n            columns.push(...metadata.columns.filter(column => column.isSelect === true));\n        }\n        columns.push(...metadata.columns.filter(column => {\n            return this.expressionMap.selects.some(select => select.selection === aliasName + \".\" + column.propertyPath);\n        }));\n\n        // if user used partial selection and did not select some primary columns which are required to be selected\n        // we select those primary columns and mark them as \"virtual\". Later virtual column values will be removed from final entity\n        // to make entity contain exactly what user selected\n        if (columns.length === 0) // however not in the case when nothing (even partial) was selected from this target (for example joins without selection)\n            return [];\n\n        const nonSelectedPrimaryColumns = this.expressionMap.queryEntity ? metadata.primaryColumns.filter(primaryColumn => columns.indexOf(primaryColumn) === -1) : [];\n        const allColumns = [...columns, ...nonSelectedPrimaryColumns];\n\n        return allColumns.map(column => {\n            const selection = this.expressionMap.selects.find(select => select.selection === aliasName + \".\" + column.propertyPath);\n            let selectionPath = this.escape(aliasName) + \".\" + this.escape(column.databaseName);\n            if (this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                if (this.connection.driver instanceof MysqlDriver)\n                    selectionPath = `AsText(${selectionPath})`;\n\n                if (this.connection.driver instanceof PostgresDriver)\n                    // cast to JSON to trigger parsing in the driver\n                    selectionPath = `ST_AsGeoJSON(${selectionPath})::json`;\n\n                if (this.connection.driver instanceof SqlServerDriver)\n                    selectionPath = `${selectionPath}.ToString()`;\n            }\n            return {\n                selection: selectionPath,\n                aliasName: selection && selection.aliasName ? selection.aliasName : DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column.databaseName),\n                // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\n                virtual: selection ? selection.virtual === true : (hasMainAlias ? false : true),\n            };\n        });\n    }\n\n    protected findEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\n        const mainSelect = this.expressionMap.selects.find(select => select.selection === aliasName);\n        if (mainSelect)\n            return [mainSelect];\n\n        return this.expressionMap.selects.filter(select => {\n            return metadata.columns.some(column => select.selection === aliasName + \".\" + column.propertyPath);\n        });\n    }\n\n    protected async executeCountQuery(queryRunner: QueryRunner): Promise<number> {\n\n        const mainAlias = this.expressionMap.mainAlias!.name; // todo: will this work with \"fromTableName\"?\n        const metadata = this.expressionMap.mainAlias!.metadata;\n\n        const distinctAlias = this.escape(mainAlias);\n        let countSql: string = \"\";\n        if (metadata.hasMultiplePrimaryKeys) {\n            if (this.connection.driver instanceof AbstractSqliteDriver) {\n                countSql = `COUNT(DISTINCT(` + metadata.primaryColumns.map((primaryColumn, index) => {\n                    const propertyName = this.escape(primaryColumn.databaseName);\n                    return `${distinctAlias}.${propertyName}`;\n                }).join(\" || \") + \")) as \\\"cnt\\\"\";\n\n            } else {\n                countSql = `COUNT(DISTINCT(CONCAT(` + metadata.primaryColumns.map((primaryColumn, index) => {\n                    const propertyName = this.escape(primaryColumn.databaseName);\n                    return `${distinctAlias}.${propertyName}`;\n                }).join(\", \") + \"))) as \\\"cnt\\\"\";\n            }\n\n        } else {\n            countSql = `COUNT(DISTINCT(` + metadata.primaryColumns.map((primaryColumn, index) => {\n                const propertyName = this.escape(primaryColumn.databaseName);\n                return `${distinctAlias}.${propertyName}`;\n            }).join(\", \") + \")) as \\\"cnt\\\"\";\n        }\n\n        const results = await this.clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(countSql)\n            .setOption(\"disable-global-order\")\n            .loadRawResults(queryRunner);\n\n        if (!results || !results[0] || !results[0][\"cnt\"])\n            return 0;\n\n        return parseInt(results[0][\"cnt\"]);\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    protected async executeEntitiesAndRawResults(queryRunner: QueryRunner): Promise<{ entities: Entity[], raw: any[] }> {\n\n        if (!this.expressionMap.mainAlias)\n            throw new Error(`Alias is not set. Use \"from\" method to set an alias.`);\n\n        if ((this.expressionMap.lockMode === \"pessimistic_read\" || this.expressionMap.lockMode === \"pessimistic_write\") && !queryRunner.isTransactionActive)\n            throw new PessimisticLockTransactionRequiredError();\n\n        if (this.expressionMap.lockMode === \"optimistic\") {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (!metadata.versionColumn && !metadata.updateDateColumn)\n                throw new NoVersionOrUpdateDateColumnError(metadata.name);\n        }\n\n        const relationIdLoader = new RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);\n        const relationCountLoader = new RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);\n        const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\n        relationIdMetadataTransformer.transform();\n        const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\n        relationCountMetadataTransformer.transform();\n\n        let rawResults: any[] = [], entities: any[] = [];\n\n        // for pagination enabled (e.g. skip and take) its much more complicated - its a special process\n        // where we make two queries to find the data we need\n        // first query find ids in skip and take range\n        // and second query loads the actual data in given ids range\n        if ((this.expressionMap.skip || this.expressionMap.take) && this.expressionMap.joinAttributes.length > 0) {\n\n            // we are skipping order by here because its not working in subqueries anyway\n            // to make order by working we need to apply it on a distinct query\n            const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\n            const metadata = this.expressionMap.mainAlias.metadata;\n            const mainAliasName = this.expressionMap.mainAlias.name;\n\n            const querySelects = metadata.primaryColumns.map(primaryColumn => {\n                const distinctAlias = this.escape(\"distinctAlias\");\n                const columnAlias = this.escape(DriverUtils.buildColumnAlias(this.connection.driver, mainAliasName, primaryColumn.databaseName));\n                if (!orderBys[columnAlias]) // make sure we aren't overriding user-defined order in inverse direction\n                    orderBys[columnAlias] = \"ASC\";\n                return `${distinctAlias}.${columnAlias} as \"ids_${DriverUtils.buildColumnAlias(this.connection.driver, mainAliasName, primaryColumn.databaseName)}\"`;\n            });\n\n            rawResults = await new SelectQueryBuilder(this.connection, queryRunner)\n                .select(`DISTINCT ${querySelects.join(\", \")}`)\n                .addSelect(selects)\n                .from(`(${this.clone().orderBy().getQuery()})`, \"distinctAlias\")\n                .offset(this.expressionMap.skip)\n                .limit(this.expressionMap.take)\n                .orderBy(orderBys)\n                .cache(this.expressionMap.cache ? this.expressionMap.cache : this.expressionMap.cacheId, this.expressionMap.cacheDuration)\n                .setParameters(this.getParameters())\n                .setNativeParameters(this.expressionMap.nativeParameters)\n                .getRawMany();\n\n            if (rawResults.length > 0) {\n                let condition = \"\";\n                const parameters: ObjectLiteral = {};\n                if (metadata.hasMultiplePrimaryKeys) {\n                    condition = rawResults.map((result, index) => {\n                        return metadata.primaryColumns.map(primaryColumn => {\n                            parameters[`ids_${index}_${primaryColumn.databaseName}`] = result[`ids_${mainAliasName}_${primaryColumn.databaseName}`];\n                            return `${mainAliasName}.${primaryColumn.propertyPath}=:ids_${index}_${primaryColumn.databaseName}`;\n                        }).join(\" AND \");\n                    }).join(\" OR \");\n                } else {\n                    const ids = rawResults.map(result => result[\"ids_\" + DriverUtils.buildColumnAlias(this.connection.driver, mainAliasName, metadata.primaryColumns[0].databaseName)]);\n                    const areAllNumbers = ids.every((id: any) => typeof id === \"number\");\n                    if (areAllNumbers) {\n                        // fixes #190. if all numbers then its safe to perform query without parameter\n                        condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyPath} IN (${ids.join(\", \")})`;\n                    } else {\n                        parameters[\"ids\"] = ids;\n                        condition = mainAliasName + \".\" + metadata.primaryColumns[0].propertyPath + \" IN (:...ids)\";\n                    }\n                }\n                rawResults = await this.clone()\n                    .mergeExpressionMap({ extraAppendedAndWhereCondition: condition })\n                    .setParameters(parameters)\n                    .loadRawResults(queryRunner);\n            }\n\n        } else {\n            rawResults = await this.loadRawResults(queryRunner);\n        }\n\n        if (rawResults.length > 0) {\n\n            // transform raw results into entities\n            const rawRelationIdResults = await relationIdLoader.load(rawResults);\n            const rawRelationCountResults = await relationCountLoader.load(rawResults);\n            const transformer = new RawSqlResultsToEntityTransformer(this.expressionMap, this.connection.driver, rawRelationIdResults, rawRelationCountResults, this.queryRunner);\n            entities = transformer.transform(rawResults, this.expressionMap.mainAlias!);\n\n            // broadcast all \"after load\" events\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n        }\n\n        return {\n            raw: rawResults,\n            entities: entities,\n        };\n    }\n\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string): [ string, OrderByCondition] {\n\n        // if table has a default order then apply it\n        const orderBys = this.expressionMap.allOrderBys;\n        const selectString = Object.keys(orderBys)\n            .map(orderCriteria => {\n                if (orderCriteria.indexOf(\".\") !== -1) {\n                    const [aliasName, propertyPath] = orderCriteria.split(\".\");\n                    const alias = this.expressionMap.findAliasByName(aliasName);\n                    const column = alias.metadata.findColumnWithPropertyName(propertyPath);\n                    return this.escape(parentAlias) + \".\" + this.escape(DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column!.databaseName));\n                } else {\n                    if (this.expressionMap.selects.find(select => select.selection === orderCriteria || select.aliasName === orderCriteria))\n                        return this.escape(parentAlias) + \".\" + orderCriteria;\n\n                    return \"\";\n                }\n            })\n            .join(\", \");\n\n        const orderByObject: OrderByCondition = {};\n        Object.keys(orderBys).forEach(orderCriteria => {\n            if (orderCriteria.indexOf(\".\") !== -1) {\n                const [aliasName, propertyPath] = orderCriteria.split(\".\");\n                const alias = this.expressionMap.findAliasByName(aliasName);\n                const column = alias.metadata.findColumnWithPropertyName(propertyPath);\n                orderByObject[this.escape(parentAlias) + \".\" + this.escape(DriverUtils.buildColumnAlias(this.connection.driver, aliasName, column!.databaseName))] = orderBys[orderCriteria];\n            } else {\n                if (this.expressionMap.selects.find(select => select.selection === orderCriteria || select.aliasName === orderCriteria)) {\n                    orderByObject[this.escape(parentAlias) + \".\" + orderCriteria] = orderBys[orderCriteria];\n                } else {\n                    orderByObject[orderCriteria] = orderBys[orderCriteria];\n                }\n            }\n        });\n\n        return [selectString, orderByObject];\n    }\n\n    /**\n     * Loads raw results from the database.\n     */\n    protected async loadRawResults(queryRunner: QueryRunner) {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryId = sql + \" -- PARAMETERS: \" + JSON.stringify(parameters);\n        const cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};\n        let savedQueryResultCacheOptions: QueryResultCacheOptions|undefined = undefined;\n        if (this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled)) {\n            savedQueryResultCacheOptions = await this.connection.queryResultCache.getFromCache({\n                identifier: this.expressionMap.cacheId,\n                query: queryId,\n                duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000\n            }, queryRunner);\n            if (savedQueryResultCacheOptions && !this.connection.queryResultCache.isExpired(savedQueryResultCacheOptions))\n                return JSON.parse(savedQueryResultCacheOptions.result);\n        }\n\n        const results = await queryRunner.query(sql, parameters);\n\n        if (this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled)) {\n            await this.connection.queryResultCache.storeInCache({\n                identifier: this.expressionMap.cacheId,\n                query: queryId,\n                time: new Date().getTime(),\n                duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000,\n                result: JSON.stringify(results)\n            }, savedQueryResultCacheOptions, queryRunner);\n        }\n\n        return results;\n    }\n\n    /**\n     * Merges into expression map given expression map properties.\n     */\n    protected mergeExpressionMap(expressionMap: Partial<QueryExpressionMap>): this {\n        ObjectUtils.assign(this.expressionMap, expressionMap);\n        return this;\n    }\n\n    /**\n     * Normalizes a give number - converts to int if possible.\n     */\n    protected normalizeNumber(num: any) {\n        if (typeof num === \"number\" || num === undefined || num === null)\n            return num;\n\n        return Number(num);\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner(\"slave\");\n    }\n\n}\n","import {LoggerOptions} from \"./LoggerOptions\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"./Logger\";\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger implements Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (this.options instanceof Array && this.options.indexOf(\"query\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            console.log(\"query\" + \": \" + sql);\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (this.options instanceof Array && this.options.indexOf(\"error\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            console.log(`query failed: ` + sql);\n            console.log(`error:`, error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        console.log(`query is slow: ` + sql);\n        console.log(`execution time: ` + time);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"schema\") !== -1)) {\n            console.log(message);\n        }\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        console.log(message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"log\") !== -1))\n                    console.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"info\") !== -1))\n                    console.info(message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(message);\n                break;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}","import {LoggerOptions} from \"./LoggerOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"./Logger\";\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger implements Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (this.options instanceof Array && this.options.indexOf(\"query\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql));\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (this.options instanceof Array && this.options.indexOf(\"error\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logError(`query failed:`, PlatformTools.highlightSql(sql));\n            PlatformTools.logError(`error:`, error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        PlatformTools.logWarn(`query is slow:`, PlatformTools.highlightSql(sql));\n        PlatformTools.logWarn(`execution time:`, time);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"schema\") !== -1)) {\n            PlatformTools.log(message);\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        PlatformTools.log(message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"log\") !== -1))\n                    console.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"info\") !== -1))\n                    console.info(message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(PlatformTools.warn(message));\n                break;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}","import {LoggerOptions} from \"./LoggerOptions\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"./Logger\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\nexport class FileLogger implements Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (this.options instanceof Array && this.options.indexOf(\"query\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            this.write(\"[QUERY]: \" + sql);\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (this.options instanceof Array && this.options.indexOf(\"error\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            this.write([\n                `[FAILED QUERY]: ${sql}`,\n                `[QUERY ERROR]: ${error}`\n            ]);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        this.write(`[SLOW QUERY: ${time} ms]: ` + sql);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"schema\") !== -1)) {\n            this.write(message);\n        }\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        this.write(message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"log\") !== -1))\n                    this.write(\"[LOG]: \" + message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"info\") !== -1))\n                    this.write(\"[INFO]: \" + message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (this.options instanceof Array && this.options.indexOf(\"warn\") !== -1))\n                    this.write(\"[WARN]: \" + message);\n                break;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Writes given strings into the log file.\n     */\n    protected write(strings: string|string[]) {\n        strings = strings instanceof Array ? strings : [strings];\n        const basePath = PlatformTools.load(\"app-root-path\").path;\n        strings = (strings as string[]).map(str => \"[\" + new Date().toISOString() + \"]\" + str);\n        PlatformTools.appendFileSync(basePath + \"/ormlogs.log\", strings.join(\"\\r\\n\") + \"\\r\\n\"); // todo: use async or implement promises?\n    }\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}","import {Logger} from \"./Logger\";\nimport {QueryRunner} from \"../\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nexport class DebugLogger implements Logger {\n    private debug = PlatformTools.load(\"debug\");\n\n    private debugQueryLog = this.debug(\"typeorm:query:log\");\n    private debugQueryError = this.debug(\"typeorm:query:error\");\n    private debugQuerySlow = this.debug(\"typeorm:query:slow\");\n    private debugSchemaBuild = this.debug(\"typeorm:schema\");\n    private debugMigration = this.debug(\"typeorm:migration\");\n    \n    private debugLog = this.debug(\"typeorm:log\");\n    private debugInfo = this.debug(\"typeorm:info\");\n    private debugWarn = this.debug(\"typeorm:warn\");\n    \n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryLog.enabled) {\n            this.debugQueryLog(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryLog(\"parameters:\", parameters);\n            }\n        }\n    }\n    \n    /**\n     * Logs query that failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryError.enabled) {\n            this.debugQueryError(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryError(\"parameters:\", parameters);\n            }\n            this.debugQueryError(\"error: \", error);\n        }\n    }\n    \n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQuerySlow.enabled) {\n            this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQuerySlow(\"parameters:\", parameters);\n            }\n            this.debugQuerySlow(\"execution time:\", time);\n        }\n    }\n    \n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.debugSchemaBuild.enabled) {\n            this.debugSchemaBuild(message);\n        }\n    }\n    \n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        if (this.debugMigration.enabled) {\n            this.debugMigration(message);\n        }\n    }\n    \n    /**\n     * Perform logging using given logger.\n     * Log has its own level and message.\n     */\n    log(level: \"log\" | \"info\" | \"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.debugLog.enabled) {\n                    this.debugLog(message);\n                }\n                break;\n            case \"info\":\n                if (this.debugInfo.enabled) {\n                    this.debugInfo(message);\n                }\n                break;\n            case \"warn\":\n                if (this.debugWarn.enabled) {\n                    this.debugWarn(message);\n                }\n                break;\n        }\n    }\n}\n","import {Logger} from \"./Logger\";\nimport {LoggerOptions} from \"./LoggerOptions\";\nimport {SimpleConsoleLogger} from \"./SimpleConsoleLogger\";\nimport {AdvancedConsoleLogger} from \"./AdvancedConsoleLogger\";\nimport {FileLogger} from \"./FileLogger\";\nimport {DebugLogger} from \"./DebugLogger\";\n\n/**\n * Helps to create logger instances.\n */\nexport class LoggerFactory {\n\n    /**\n     * Creates a new logger depend on a given connection's driver.\n     */\n    create(logger?: \"advanced-console\"|\"simple-console\"|\"file\"|\"debug\"|Logger, options?: LoggerOptions): Logger {\n        if (logger instanceof Object)\n            return logger as Logger;\n\n        if (logger) {\n            switch (logger) {\n                case \"simple-console\":\n                    return new SimpleConsoleLogger(options);\n\n                case \"file\":\n                    return new FileLogger(options);\n\n                case \"advanced-console\":\n                    return new AdvancedConsoleLogger(options);\n\n                case \"debug\":\n                    return new DebugLogger();\n            }\n        }\n\n        return new AdvancedConsoleLogger(options);\n    }\n\n}\n","import {QueryResultCache} from \"./QueryResultCache\";\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Caches query result into Redis database.\n */\nexport class RedisQueryResultCache implements QueryResultCache {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Redis module instance loaded dynamically.\n     */\n    protected redis: any;\n\n    /**\n     * Connected redis client.\n     */\n    protected client: any;\n\n    /**\n     * Type of the Redis Client (redis or ioredis).\n     */\n    protected clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\";\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection, clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\") {\n        this.clientType = clientType;\n        this.redis = this.loadRedis();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n\n\n    async connect(): Promise<void> {\n        const cacheOptions: any = this.connection.options.cache;\n        if (this.clientType === \"redis\") {\n            if (cacheOptions && cacheOptions.options) {\n                this.client = this.redis.createClient(cacheOptions.options);\n            } else {\n                this.client = this.redis.createClient();\n            }\n        } else if (this.clientType === \"ioredis\") {\n            if (cacheOptions && cacheOptions.options) {\n                this.client = new this.redis(cacheOptions.options);\n            } else {\n                this.client = new this.redis();\n            }\n        } else if (this.clientType === \"ioredis/cluster\") {\n            if (cacheOptions && cacheOptions.options && cacheOptions.options instanceof Array) {\n                this.client = new this.redis.Cluster(cacheOptions.options);\n            } else if (cacheOptions && cacheOptions.options && cacheOptions.options.startupNodes) {\n                this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);\n            } else {\n                throw new Error(`options.startupNodes required for ${this.clientType}.`);\n            }\n        }\n    }\n\n    /**\n     * Disconnects the connection\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.quit((err: any, result: any) => {\n                if (err) return fail(err);\n                ok();\n                this.client = undefined;\n            });\n        });\n    }\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner: QueryRunner): Promise<void> {\n    }\n\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\n        return new Promise<QueryResultCacheOptions|undefined>((ok, fail) => {\n\n            if (options.identifier) {\n                this.client.get(options.identifier, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok(JSON.parse(result));\n                });\n\n            } else if (options.query) {\n                this.client.get(options.query, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok(JSON.parse(result));\n                });\n\n            } else {\n                ok(undefined);\n            }\n        });\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        return (savedCache.time! + savedCache.duration) < new Date().getTime();\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            if (options.identifier) {\n                this.client.set(options.identifier, JSON.stringify(options), \"PX\", options.duration, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok();\n                });\n\n            } else if (options.query) {\n                this.client.set(options.query, JSON.stringify(options), \"PX\", options.duration, (err: any, result: any) => {\n                    if (err) return fail(err);\n                    ok();\n                });\n            }\n        });\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner?: QueryRunner): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.flushdb((err: any, result: any) => {\n                if (err) return fail(err);\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\n        await Promise.all(identifiers.map(identifier => {\n            return this.deleteKey(identifier);\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes a single key from redis database.\n     */\n    protected deleteKey(key: string): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.del(key, (err: any, result: any) => {\n                if (err) return fail(err);\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Loads redis dependency.\n     */\n    protected loadRedis(): any {\n        try {\n            return PlatformTools.load(this.clientType);\n\n        } catch (e) {\n            throw new Error(`Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`);\n        }\n    }\n\n\n}\n","import {QueryResultCache} from \"./QueryResultCache\";\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Connection} from \"../connection/Connection\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\n\n/**\n * Caches query result into current database, into separate table called \"query-result-cache\".\n */\nexport class DbQueryResultCache implements QueryResultCache {\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private queryResultCacheTable: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};    \n        const cacheTableName = cacheOptions.tableName || \"query-result-cache\";\n\n        this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, options.schema, options.database);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect(): Promise<void> {\n    }\n\n    /**\n     * Disconnects with given cache provider.\n     */\n    async disconnect(): Promise<void> {\n    }\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const driver = this.connection.driver;\n        const tableExist = await queryRunner.hasTable(this.queryResultCacheTable); // todo: table name should be configurable\n        if (tableExist)\n            return;\n\n        await queryRunner.createTable(new Table(\n            {\n                name: this.queryResultCacheTable,\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        isNullable: false,\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheId}),\n                        generationStrategy: \"increment\",\n                        isGenerated: true\n                    },\n                    {\n                        name: \"identifier\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheIdentifier}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"time\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheTime}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"duration\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheDuration}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"query\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheQuery}),\n                        isPrimary: false,\n                        isNullable: false\n                    },\n                    {\n                        name: \"result\",\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheResult}),\n                        isNullable: false\n                    },\n                ]\n            },\n        ));\n    }\n\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.queryResultCacheTable, \"cache\");\n\n        if (options.identifier) {\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"identifier\")} = :identifier`)\n                .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.identifier, \"nvarchar\") : options.identifier })\n                .getRawOne();\n\n        } else if (options.query) {\n            if (this.connection.driver instanceof OracleDriver) {\n                return qb\n                    .where(`dbms_lob.compare(${qb.escape(\"cache\")}.${qb.escape(\"query\")}, :query) = 0`, { query: options.query })\n                    .getRawOne();\n            }\n\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\n                .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, \"nvarchar\") : options.query })\n                .getRawOne();\n        }\n\n        return Promise.resolve(undefined);\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        const duration = typeof savedCache.duration === \"string\" ? parseInt(savedCache.duration) : savedCache.duration;\n        return ((typeof savedCache.time === \"string\" ? parseInt(savedCache.time as any) : savedCache.time)! + duration) < new Date().getTime();\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions|undefined, queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner);\n\n        let insertedValues: ObjectLiteral = options;\n        if (this.connection.driver instanceof SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\n            insertedValues = {\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\n                time: new MssqlParameter(options.time, \"bigint\"),\n                duration: new MssqlParameter(options.duration, \"int\"),\n                query: new MssqlParameter(options.query, \"nvarchar\"),\n                result: new MssqlParameter(options.result, \"nvarchar\"),\n            };\n        }\n\n        if (savedCache && savedCache.identifier) { // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n\n            qb.where(`${qb.escape(\"identifier\")} = :condition`, { condition: insertedValues.identifier });\n            await qb.execute();\n\n        } else if (savedCache && savedCache.query) { // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n\n            if (this.connection.driver instanceof OracleDriver) {\n                qb.where(`dbms_lob.compare(\"query\", :condition) = 0`, { condition: insertedValues.query });\n\n            } else {\n                qb.where(`${qb.escape(\"query\")} = :condition`, { condition: insertedValues.query });\n            }\n\n            await qb.execute();\n\n        } else { // otherwise insert\n            await queryRunner.manager\n                .createQueryBuilder()\n                .insert()\n                .into(this.queryResultCacheTable)\n                .values(insertedValues)\n                .execute();\n        }\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner: QueryRunner): Promise<void> {\n        return this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable);\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\n        await Promise.all(identifiers.map(identifier => {\n            const qb = this.getQueryRunner(queryRunner).manager.createQueryBuilder();\n            return qb.delete()\n                .from(this.queryResultCacheTable)\n                .where(`${qb.escape(\"identifier\")} = :identifier`, {identifier})\n                .execute();\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets a query runner to work with.\n     */\n    protected getQueryRunner(queryRunner: QueryRunner|undefined): QueryRunner {\n        if (queryRunner)\n            return queryRunner;\n\n        return this.connection.createQueryRunner(\"master\");\n    }\n\n}\n","import {RedisQueryResultCache} from \"./RedisQueryResultCache\";\nimport {DbQueryResultCache} from \"./DbQueryResultCache\";\nimport {QueryResultCache} from \"./QueryResultCache\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n\n        if ((this.connection.options.cache as any).type === \"redis\")\n            return new RedisQueryResultCache(this.connection, \"redis\");\n\n        if ((this.connection.options.cache as any).type === \"ioredis\")\n            return new RedisQueryResultCache(this.connection, \"ioredis\");\n\n        if ((this.connection.options.cache as any).type === \"ioredis/cluster\")\n            return new RedisQueryResultCache(this.connection, \"ioredis/cluster\");\n\n        return new DbQueryResultCache(this.connection);\n    }\n\n}\n","import {Connection, ObjectLiteral, QueryRunner} from \"../\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nexport class RelationLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation data for the given entity and its relation.\n     */\n    load(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any[]> { // todo: check all places where it uses non array\n        if (queryRunner && queryRunner.isReleased) queryRunner = undefined; // get new one if already closed\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);\n\n        } else if (relation.isManyToManyOwner) {\n            return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);\n\n        } else { // many-to-many non owner\n            return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);\n        }\n    }\n\n    /**\n     * Loads data for many-to-one and one-to-one owner relations.\n     *\n     * (ow) post.category<=>category.post\n     * loaded: category from post\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n     */\n    loadManyToOneOrOneToOneOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = entityOrEntities instanceof Array ? entityOrEntities : [entityOrEntities];\n        const columns = relation.entityMetadata.primaryColumns;\n        const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n        const conditions = joinColumns.map(joinColumn => {\n            return `${relation.entityMetadata.name}.${joinColumn.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn!.propertyName}`;\n        }).join(\" AND \");\n\n        const joinAliasName = relation.entityMetadata.name;\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select(relation.propertyName) // category\n            .from(relation.type, relation.propertyName) // Category, category\n            .innerJoin(relation.entityMetadata.target as Function, joinAliasName, conditions);\n\n        if (columns.length === 1) {\n            qb.where(`${joinAliasName}.${columns[0].propertyPath} IN (:...${joinAliasName + \"_\" + columns[0].propertyName})`);\n            qb.setParameter(joinAliasName + \"_\" + columns[0].propertyName, entities.map(entity => columns[0].getEntityValue(entity)));\n\n        } else {\n            const condition = entities.map((entity, entityIndex) => {\n                return columns.map((column, columnIndex) => {\n                    const paramName = joinAliasName + \"_entity_\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return joinAliasName + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n            qb.where(condition);\n        }\n\n        return qb.getMany();\n        // return qb.getOne(); todo: fix all usages\n    }\n\n    /**\n     * Loads data for one-to-many and one-to-one not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\n     */\n    loadOneToManyOrOneToOneNotOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = entityOrEntities instanceof Array ? entityOrEntities : [entityOrEntities];\n        const aliasName = relation.propertyName;\n        const columns = relation.inverseRelation!.joinColumns;\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select(aliasName)\n            .from(relation.inverseRelation!.entityMetadata.target, aliasName);\n\n        if (columns.length === 1) {\n            qb.where(`${aliasName}.${columns[0].propertyPath} IN (:...${aliasName + \"_\" + columns[0].propertyName})`);\n            qb.setParameter(aliasName + \"_\" + columns[0].propertyName, entities.map(entity => columns[0].referencedColumn!.getEntityValue(entity)));\n\n        } else {\n            const condition = entities.map((entity, entityIndex) => {\n                return columns.map((column, columnIndex) => {\n                    const paramName = aliasName + \"_entity_\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                    return aliasName + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n            qb.where(condition);\n        }\n        return qb.getMany();\n        // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages\n    }\n\n    /**\n     * Loads data for many-to-many owner relations.\n     *\n     * SELECT category\n     * FROM category category\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = :postId\n     * AND post_categories.categoryId = category.id\n     */\n    loadManyToManyOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = entityOrEntities instanceof Array ? entityOrEntities : [entityOrEntities];\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} IN (:...${joinColumn.propertyName})`;\n        });\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn!.propertyName}`;\n        });\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = entities.map(entity => joinColumn.referencedColumn!.getEntityValue(entity));\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder(queryRunner)\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n    /**\n     * Loads data for many-to-many not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = post.id\n     * AND post_categories.categoryId = post_categories.categoryId\n     */\n    loadManyToManyNotOwner(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], queryRunner?: QueryRunner): Promise<any> {\n        const entities = entityOrEntities instanceof Array ? entityOrEntities : [entityOrEntities];\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseRelation!.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName} IN (:...${inverseJoinColumn.propertyName})`;\n        });\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = entities.map(entity => joinColumn.referencedColumn!.getEntityValue(entity));\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder(queryRunner)\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n    /**\n     * Wraps given entity and creates getters/setters for its given relation\n     * to be able to lazily load data when accessing this relation.\n     */\n    enableLazyLoad(relation: RelationMetadata, entity: ObjectLiteral, queryRunner?: QueryRunner) {\n        const relationLoader = this;\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\n\n        Object.defineProperty(entity, relation.propertyName, {\n            get: function() {\n                if (this[resolveIndex] === true || this[dataIndex]) // if related data already was loaded then simply return it\n                    return Promise.resolve(this[dataIndex]);\n\n                if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it\n                    return this[promiseIndex];\n\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\n                this[promiseIndex] = relationLoader.load(relation, this, queryRunner).then(result => {\n                    if (relation.isOneToOne || relation.isManyToOne) result = result[0];\n                    this[dataIndex] = result;\n                    this[resolveIndex] = true;\n                    delete this[promiseIndex];\n                    return this[dataIndex];\n                });\n                return this[promiseIndex];\n            },\n            set: function(value: any|Promise<any>) {\n                if (value instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\n                    value.then(result => {\n                        this[dataIndex] = result;\n                        this[resolveIndex] = true;\n                    });\n\n                } else { // if its direct data set (non promise, probably not safe-typed)\n                    this[dataIndex] = value;\n                    this[resolveIndex] = true;\n                }\n            },\n            configurable: true\n        });\n    }\n\n}\n","import {Connection, ObjectLiteral} from \"../\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\n/**\n * Loads relation ids for the given entities.\n */\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    async load(target: Function|string, relation: string, entities: ObjectLiteral|ObjectLiteral[], relatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]>;\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    async load(relation: RelationMetadata, entities: ObjectLiteral|ObjectLiteral[], relatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]>;\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    async load(relationOrTarget: RelationMetadata|Function|string, relationNameOrEntities: string|ObjectLiteral|ObjectLiteral[], entitiesOrRelatedEntities?: ObjectLiteral|ObjectLiteral[], maybeRelatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]> {\n\n        // normalize arguments\n        let relation: RelationMetadata|undefined, entities: ObjectLiteral[], relatedEntities: ObjectLiteral[]|undefined;\n        if (relationOrTarget instanceof RelationMetadata) {\n            relation = relationOrTarget;\n            entities = relationNameOrEntities instanceof Array ? relationNameOrEntities as ObjectLiteral[] : [relationNameOrEntities as ObjectLiteral];\n            relatedEntities = entitiesOrRelatedEntities instanceof Array ? entitiesOrRelatedEntities as ObjectLiteral[] : (entitiesOrRelatedEntities ? [entitiesOrRelatedEntities as ObjectLiteral] : undefined);\n\n        } else {\n            const entityMetadata = this.connection.getMetadata(relationOrTarget);\n            relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities as string);\n            if (!relation)\n                throw new Error(`Relation \"${relation}\" was not found in \"${entityMetadata.name}\".`);\n\n            entities = entitiesOrRelatedEntities instanceof Array ? entitiesOrRelatedEntities as ObjectLiteral[] : [entitiesOrRelatedEntities as ObjectLiteral];\n            relatedEntities = maybeRelatedEntities instanceof Array ? maybeRelatedEntities as ObjectLiteral[] : (maybeRelatedEntities ? [maybeRelatedEntities as ObjectLiteral] : undefined);\n        }\n\n        // load relation ids depend of relation type\n        if (relation.isManyToMany) {\n            return this.loadForManyToMany(relation, entities, relatedEntities);\n\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities);\n\n        } else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities);\n        }\n    }\n\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    async loadManyToManyRelationIdsAndGroup<E1, E2>(\n        relation: RelationMetadata,\n        entitiesOrEntities: E1|E1[],\n        relatedEntityOrEntities?: E2|E2[]\n    ): Promise<{ entity: E1, related?: E2|E2[] }[]> {\n\n        // console.log(\"relation:\", relation.propertyName);\n        // console.log(\"entitiesOrEntities\", entitiesOrEntities);\n        const isMany = relation.isManyToMany || relation.isOneToMany;\n        const entities: E1[] = entitiesOrEntities instanceof Array ? entitiesOrEntities : [entitiesOrEntities];\n\n        if (!relatedEntityOrEntities) {\n            relatedEntityOrEntities = await this.connection.relationLoader.load(relation, entitiesOrEntities);\n            if (!relatedEntityOrEntities.length)\n                return entities.map(entity => ({ entity: entity, related: isMany ? [] : undefined }));\n        }\n        // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);\n        const relationIds = await this.load(relation, entitiesOrEntities, relatedEntityOrEntities);\n        // console.log(\"relationIds\", relationIds);\n\n        const relatedEntities: E2[] = relatedEntityOrEntities instanceof Array ? relatedEntityOrEntities : [relatedEntityOrEntities!];\n\n        let columns: ColumnMetadata[], inverseColumns: ColumnMetadata[];\n        if (relation.isManyToManyOwner) {\n            columns = relation.junctionEntityMetadata!.inverseColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.junctionEntityMetadata!.ownerColumns.map(column => column.referencedColumn!);\n\n        } else if (relation.isManyToManyNotOwner) {\n            columns = relation.junctionEntityMetadata!.ownerColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.junctionEntityMetadata!.inverseColumns.map(column => column.referencedColumn!);\n\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.joinColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.entityMetadata.primaryColumns;\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.entityMetadata.primaryColumns;\n            inverseColumns = relation.inverseRelation!.joinColumns.map(column => column.referencedColumn!);\n\n        } else {\n\n        }\n\n        return entities.map(entity => {\n            const group: { entity: E1, related?: E2|E2[] } = { entity: entity, related: isMany ? [] : undefined };\n            relationIds.forEach(relationId => {\n                const entityMatched = inverseColumns.every(column => {\n                    return column.getEntityValue(entity) === relationId[column.entityMetadata.name + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                });\n                if (entityMatched) {\n                    relatedEntities.forEach(relatedEntity => {\n                        const relatedEntityMatched = columns.every(column => {\n                            return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                        });\n                        if (relatedEntityMatched) {\n                            if (isMany) {\n                                (group.related as E2[]).push(relatedEntity);\n                            } else {\n                                group.related = relatedEntity;\n                            }\n                        }\n                    });\n                }\n            });\n            return group;\n        });\n    }\n\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    protected loadForManyToMany(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const qb = this.connection.createQueryBuilder();\n\n        // select all columns from junction table\n        junctionMetadata.ownerColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        junctionMetadata.inverseColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add conditions for the given entities\n        let condition1 = \"\";\n        if (columns.length === 1) {\n            qb.setParameter(\"values1\", entities.map(entity => columns[0].referencedColumn!.getEntityValue(entity)));\n            condition1 = mainAlias + \".\" + columns[0].propertyPath + \" IN (:...values1)\"; // todo: use ANY for postgres\n\n        } else {\n            condition1 = \"(\" + entities.map((entity, entityIndex) => {\n                return columns.map(column => {\n                    const paramName = \"entity1_\" + entityIndex + \"_\" + column.propertyName;\n                    qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \") + \")\";\n        }\n\n        // add conditions for the given inverse entities\n        let condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                qb.setParameter(\"values2\", relatedEntities.map(entity => inverseColumns[0].referencedColumn!.getEntityValue(entity)));\n                condition2 = mainAlias + \".\" + inverseColumns[0].propertyPath + \" IN (:...values2)\"; // todo: use ANY for postgres\n\n            } else {\n                condition2 = \"(\" + relatedEntities.map((entity, entityIndex) => {\n                    return inverseColumns.map(column => {\n                        const paramName = \"entity2_\" + entityIndex + \"_\" + column.propertyName;\n                        qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                        return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\").join(\" OR \") + \")\";\n            }\n        }\n\n        // execute query\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"))\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    protected loadForManyToOneAndOneToOneOwner(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            const columnName = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(entity => relation.entityMetadata.primaryColumns[0].getEntityValue(entity)));\n            condition = mainAlias + \".\" + relation.entityMetadata.primaryColumns[0].propertyPath + \" IN (:...values)\";\n\n        } else {\n            condition = entities.map((entity, entityIndex) => {\n                return relation.entityMetadata.primaryColumns.map((column, columnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n        }\n\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    protected loadForOneToManyAndOneToOneNotOwner(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n        relation = relation.inverseRelation!;\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            const columnName = primaryColumn.entityMetadata.name + \"_\" + relation.inverseRelation!.propertyPath.replace(\".\", \"_\") + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.joinColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(entity => relation.joinColumns[0].referencedColumn!.getEntityValue(entity)));\n            condition = mainAlias + \".\" + relation.joinColumns[0].propertyPath + \" IN (:...values)\";\n\n        } else {\n            condition = entities.map((entity, entityIndex) => {\n                return relation.joinColumns.map((joinColumn, joinColumnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn!.getEntityValue(entity));\n                    return mainAlias + \".\" + joinColumn.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n        }\n\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n}","import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotExecuteNotConnectedError} from \"../error/CannotExecuteNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"../error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Logger} from \"../logger/Logger\";\nimport {EntityMetadataNotFoundError} from \"../error/EntityMetadataNotFoundError\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {Migration} from \"../migration/Migration\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\nimport {DriverFactory} from \"../driver/DriverFactory\";\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\nimport {QueryResultCacheFactory} from \"../cache/QueryResultCacheFactory\";\nimport {QueryResultCache} from \"../cache/QueryResultCache\";\nimport {SqljsEntityManager} from \"../entity-manager/SqljsEntityManager\";\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\nimport {RelationIdLoader} from \"../query-builder/RelationIdLoader\";\nimport {EntitySchema} from \"../\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {PromiseUtils} from \"../\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\n\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    readonly name: string;\n\n    /**\n     * Connection options.\n     */\n    readonly options: ConnectionOptions;\n\n    /**\n     * Indicates if connection is initialized or not.\n     */\n    readonly isConnected: boolean;\n\n    /**\n     * Database driver used by this connection.\n     */\n    readonly driver: Driver;\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Logger used to log orm events.\n     */\n    readonly logger: Logger;\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = [];\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * Used to work with query result cache.\n     */\n    readonly queryResultCache?: QueryResultCache;\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader;\n\n    /**\n     * Used to load relation ids of specific entity relations.\n     */\n    readonly relationIdLoader: RelationIdLoader;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: ConnectionOptions) {\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n        this.driver = new DriverFactory().create(this);\n        this.manager = this.createEntityManager();\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n        this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\n        this.relationLoader = new RelationLoader(this);\n        this.relationIdLoader = new RelationIdLoader(this);\n        this.isConnected = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!(this.manager instanceof MongoEntityManager))\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\n\n        return this.manager as MongoEntityManager;\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!(this.manager instanceof SqljsEntityManager))\n            throw new Error(`SqljsEntityManager is only available for Sqljs databases.`);\n\n        return this.manager as SqljsEntityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.connect();\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isConnected: true });\n\n        try {\n\n            // build all metadatas registered in the current connection\n            this.buildMetadatas();\n\n            await this.driver.afterConnect();\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema)\n                await this.dropDatabase();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize)\n                await this.synchronize();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations();\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.disconnect();\n\n        ObjectUtils.assign(this, { isConnected: false });\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = await this.createQueryRunner(\"master\");\n        try {\n            if (this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver) {\n                const databases: string[] = this.driver.database ? [this.driver.database] : [];\n                this.entityMetadatas.forEach(metadata => {\n                    if (metadata.database && databases.indexOf(metadata.database) === -1)\n                        databases.push(metadata.database);\n                });\n                await PromiseUtils.runInSequence(databases, database => queryRunner.clearDatabase(database));\n            } else {\n                await queryRunner.clearDatabase();\n            }\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: { transaction?: boolean }): Promise<Migration[]> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        if (options && options.transaction === false) {\n            migrationExecutor.transaction = false;\n        }\n        const successMigrations = await migrationExecutor.executePendingMigrations();\n        return successMigrations;\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: { transaction?: boolean }): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        if (options && options.transaction === false) {\n            migrationExecutor.transaction = false;\n        }\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are no pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isConnected) {\n            throw new CannotExecuteNotConnectedError(this.name);\n        }\n        const migrationExecutor = new MigrationExecutor(this);\n        return await migrationExecutor.showMigrations();\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: Function|EntitySchema<any>|string): boolean {\n        return !!this.findMetadata(target);\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: Function|EntitySchema<any>|string): EntityMetadata {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFoundError(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): Repository<Entity> {\n        return this.manager.getRepository(target);\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target);\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): MongoRepository<Entity> {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\n\n        return this.manager.getRepository(target) as any;\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository);\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(\n        isolationOrRunInTransaction: IsolationLevel | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any\n        );\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner(\"master\");\n\n        try {\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityOrRunner?: ObjectType<Entity>|EntitySchema<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner as Function|EntitySchema<Entity>|string);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n\n        } else {\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode);\n        const manager = this.createEntityManager(queryRunner);\n        Object.assign(queryRunner, { manager: manager });\n        return queryRunner;\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(entityTarget: Function|string, relationPropertyPath: string) {\n        const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(`Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`);\n        if (!relationMetadata.isManyToMany)\n            throw new Error(`Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                `You can use this method only on many-to-many relations.`);\n\n        return relationMetadata.junctionEntityMetadata;\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(target: Function|EntitySchema<any>|string): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (metadata.target === target)\n                return true;\n            if (target instanceof EntitySchema) {\n                return metadata.name === target.options.name;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    return metadata.tablePath === target;\n                } else {\n                    return metadata.name === target || metadata.tableName === target;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected buildMetadatas(): void {\n\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const entityMetadataValidator = new EntityMetadataValidator();\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n        ObjectUtils.assign(this, { subscribers: subscribers });\n\n        // build entity metadatas\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\n        ObjectUtils.assign(this, { entityMetadatas: entityMetadatas });\n\n        // create migration instances\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        ObjectUtils.assign(this, { migrations: migrations });\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas.filter(metadata => metadata.tableType !== \"view\"), this.driver);\n    }\n\n}\n","/**\n * Thrown when consumer tries to get connection that does not exist.\n */\nexport class ConnectionNotFoundError extends Error {\n    name = \"ConnectionNotFoundError\";\n\n    constructor(name: string) {\n        super();\n        Object.setPrototypeOf(this, ConnectionNotFoundError.prototype);\n        this.message = `Connection \"${name}\" was not found.`;\n    }\n\n}","/**\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\n */\nexport class AlreadyHasActiveConnectionError extends Error {\n    name = \"AlreadyHasActiveConnectionError\";\n\n    constructor(connectionName: string) {\n        super();\n        Object.setPrototypeOf(this, AlreadyHasActiveConnectionError.prototype);\n        this.message = `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\n            `already exist and it now has an active connection session.`;\n    }\n\n}","import {Connection} from \"./Connection\";\nimport {ConnectionNotFoundError} from \"../error/ConnectionNotFoundError\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {AlreadyHasActiveConnectionError} from \"../error/AlreadyHasActiveConnectionError\";\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nexport class ConnectionManager {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    public readonly connections: Connection[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return !!this.connections.find(connection => connection.name === name);\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): Connection {\n        const connection = this.connections.find(connection => connection.name === name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: ConnectionOptions): Connection {\n\n        // check if such connection is already registered\n        const existConnection = this.connections.find(connection => connection.name === (options.name || \"default\"));\n        if (existConnection) {\n\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n\n        // create a new connection\n        const connection = new Connection(options);\n        this.connections.push(connection);\n        return connection;\n    }\n\n}\n","import {ConnectionOptions} from \"../ConnectionOptions\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\n\n/**\n * Reads connection options from environment variables.\n * Environment variables can have only a single connection.\n * Its strongly required to define TYPEORM_CONNECTION env variable.\n */\nexport class ConnectionOptionsEnvReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from environment variables.\n     */\n    read(): ConnectionOptions {\n        return {\n            type: PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") || (PlatformTools.getEnvVariable(\"TYPEORM_URL\") ? PlatformTools.getEnvVariable(\"TYPEORM_URL\").split(\"://\")[0] : undefined),\n            url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n            host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n            port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n            username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n            password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n            database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n            sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n            schema: PlatformTools.getEnvVariable(\"TYPEORM_SCHEMA\"),\n            extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined,\n            synchronize: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_SYNCHRONIZE\")),\n            dropSchema: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_DROP_SCHEMA\")),\n            migrationsRun: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_RUN\")),\n            entities: this.stringToArray(PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\")),\n            migrations: this.stringToArray(PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\")),\n            migrationsTableName: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_TABLE_NAME\"),\n            subscribers: this.stringToArray(PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\")),\n            logging: this.transformLogging(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING\")),\n            logger: PlatformTools.getEnvVariable(\"TYPEORM_LOGGER\"),\n            entityPrefix: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_PREFIX\"),\n            maxQueryExecutionTime: PlatformTools.getEnvVariable(\"TYPEORM_MAX_QUERY_EXECUTION_TIME\"),\n            debug: PlatformTools.getEnvVariable(\"TYPEORM_DEBUG\"),\n            cli: {\n                entitiesDir: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES_DIR\"),\n                migrationsDir: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_DIR\"),\n                subscribersDir: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS_DIR\"),\n            },\n            cache: this.transformCaching(),\n            uuidExtension: PlatformTools.getEnvVariable(\"TYPEORM_UUID_EXTENSION\")\n        };\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Transforms logging string into real logging value connection requires.\n     */\n    protected transformLogging(logging: string): any {\n        if (logging === \"true\" || logging === \"TRUE\" || logging === \"1\")\n            return true;\n        if (logging === \"all\")\n            return \"all\";\n\n        return this.stringToArray(logging);\n    }\n\n    /**\n     * Transforms caching option into real caching value option requires.\n     */\n    protected transformCaching(): boolean | object | undefined {\n        const caching = PlatformTools.getEnvVariable(\"TYPEORM_CACHE\");\n        if (caching === \"true\" || caching === \"TRUE\" || caching === \"1\")\n            return true;\n        if (caching === \"false\" || caching === \"FALSE\" || caching === \"0\")\n            return false;\n        if (caching === \"redis\" || caching === \"database\")\n            return {\n                type: caching,\n                options: PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\")) : undefined,\n                alwaysEnabled: PlatformTools.getEnvVariable(\"TYPEORM_CACHE_ALWAYS_ENABLED\"),\n                duration: parseInt(PlatformTools.getEnvVariable(\"TYPEORM_CACHE_DURATION\"))\n            };\n\n        return undefined;\n    }\n\n    /**\n     * Converts a string which contains multiple elements split by comma into a string array of strings.\n     */\n    protected stringToArray(variable?: string) {\n        if (!variable)\n            return [];\n        return variable.split(\",\").map(str => str.trim());\n    }\n\n}\n","import {PlatformTools} from \"../../platform/PlatformTools\";\nimport {ConnectionOptions} from \"../ConnectionOptions\";\n\n/**\n * Reads connection options defined in the yml file.\n */\nexport class ConnectionOptionsYmlReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from given yml file.\n     */\n    read(path: string): ConnectionOptions[] {\n        const ymlParser = PlatformTools.load(\"js-yaml\");\n        const config = ymlParser.safeLoad(PlatformTools.readFileSync(path));\n        return Object.keys(config).map(connectionName => {\n            return Object.assign({ name: connectionName }, config[connectionName]);\n        });\n    }\n\n}","import {PlatformTools} from \"../../platform/PlatformTools\";\nimport {ConnectionOptions} from \"../ConnectionOptions\";\n\n/**\n * Reads connection options defined in the xml file.\n */\nexport class ConnectionOptionsXmlReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from given xml file.\n     */\n    async read(path: string): Promise<ConnectionOptions[]> {\n        const xml = await this.readXml(path);\n        return (xml.connection as any[]).map(connection => {\n            return {\n                name: connection.$.name,\n                type: connection.$.type,\n                url: connection.url ? connection.url[0] : undefined,\n                host: connection.host ? connection.host[0] : undefined,\n                port: connection.port && connection.port[0] ? parseInt(connection.port[0]) : undefined,\n                username: connection.username ? connection.username[0] : undefined,\n                password: connection.password ? connection.password[0] : undefined,\n                database: connection.database ? connection.database[0] : undefined,\n                sid: connection.sid ? connection.sid[0] : undefined,\n                extra: connection.extra ? connection.extra[0] : undefined,\n                synchronize: connection.synchronize ? connection.synchronize[0] : undefined,\n                entities: connection.entities ? connection.entities[0].entity : [],\n                subscribers: connection.subscribers ? connection.subscribers[0].entity : [],\n                logging: connection.logging[0] ? connection.logging[0].split(\",\") : undefined,\n            };\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads xml file contents and returns them in a promise.\n     */\n    protected readXml(path: string): Promise<any> {\n        const xmlParser = PlatformTools.load(\"xml2js\").parseString;\n        const xmlOptions = { trim: true, explicitRoot: false };\n        return new Promise((ok, fail) => {\n            xmlParser(PlatformTools.readFileSync(path), xmlOptions, (err: any, result: any) => err ? fail(err) : ok(result));\n        });\n    }\n\n}","import {ConnectionOptions} from \"./ConnectionOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {ConnectionOptionsEnvReader} from \"./options-reader/ConnectionOptionsEnvReader\";\nimport {ConnectionOptionsYmlReader} from \"./options-reader/ConnectionOptionsYmlReader\";\nimport {ConnectionOptionsXmlReader} from \"./options-reader/ConnectionOptionsXmlReader\";\n\n/**\n * Reads connection options from the ormconfig.\n * Can read from multiple file extensions including env, json, js, xml and yml.\n */\nexport class ConnectionOptionsReader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected options?: {\n        /**\n         * Directory where ormconfig should be read from.\n         * By default its your application root (where your app package.json is located).\n         */\n        root?: string,\n\n        /**\n         * Filename of the ormconfig configuration. By default its equal to \"ormconfig\".\n         */\n        configName?: string\n    }) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns all connection options read from the ormconfig.\n     */\n    async all(): Promise<ConnectionOptions[]> {\n        const options = await this.load();\n        if (!options)\n            throw new Error(`No connection options were found in any of configurations file.`);\n\n        return options;\n    }\n\n    /**\n     * Gets a connection with a given name read from ormconfig.\n     * If connection with such name would not be found then it throw error.\n     */\n    async get(name: string): Promise<ConnectionOptions> {\n        const allOptions = await this.all();\n        const targetOptions = allOptions.find(options => options.name === name || (name === \"default\" && !options.name));\n        if (!targetOptions)\n            throw new Error(`Cannot find connection ${name} because its not defined in any orm configuration files.`);\n\n        return targetOptions;\n    }\n\n    /**\n     * Checks if there is a TypeORM configuration file.\n     */\n    async has(name: string): Promise<boolean> {\n        const allOptions = await this.load();\n        if (!allOptions)\n            return false;\n\n        const targetOptions = allOptions.find(options => options.name === name || (name === \"default\" && !options.name));\n        return !!targetOptions;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all connection options from a configuration file.\n     *\n     * todo: get in count NODE_ENV somehow\n     */\n    protected async load(): Promise<ConnectionOptions[]|undefined> {\n        let connectionOptions: ConnectionOptions|ConnectionOptions[]|undefined = undefined;\n\n        const fileFormats = [\"env\", \"js\", \"ts\", \"json\", \"yml\", \"yaml\", \"xml\"];\n\n        // Detect if baseFilePath contains file extension\n        const possibleExtension = this.baseFilePath.substr(this.baseFilePath.lastIndexOf(\".\"));\n        const fileExtension = fileFormats.find(extension => `.${extension}` === possibleExtension);\n\n        // try to find any of following configuration formats\n        const foundFileFormat = fileExtension || fileFormats.find(format => {\n            return PlatformTools.fileExist(this.baseFilePath + \".\" + format);\n        });\n\n        // if .env file found then load all its variables into process.env using dotenv package\n        if (foundFileFormat === \"env\") {\n            const dotenv = PlatformTools.load(\"dotenv\");\n            dotenv.config({ path: this.baseFilePath });\n        } else if (PlatformTools.fileExist(\".env\")) {\n            const dotenv = PlatformTools.load(\"dotenv\");\n            dotenv.config({ path: \".env\" });\n        }\n\n        // Determine config file name\n        const configFile = fileExtension ? this.baseFilePath : this.baseFilePath + \".\" + foundFileFormat;\n\n        // try to find connection options from any of available sources of configuration\n        if (PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") || PlatformTools.getEnvVariable(\"TYPEORM_URL\")) {\n            connectionOptions = new ConnectionOptionsEnvReader().read();\n\n        } else if (foundFileFormat === \"js\") {\n            connectionOptions = PlatformTools.load(configFile);\n\n        } else if (foundFileFormat === \"ts\") {\n            connectionOptions = PlatformTools.load(configFile);\n\n        } else if (foundFileFormat === \"json\") {\n            connectionOptions = PlatformTools.load(configFile);\n\n        } else if (foundFileFormat === \"yml\") {\n            connectionOptions = new ConnectionOptionsYmlReader().read(configFile);\n\n        } else if (foundFileFormat === \"yaml\") {\n            connectionOptions = new ConnectionOptionsYmlReader().read(configFile);\n\n        } else if (foundFileFormat === \"xml\") {\n            connectionOptions = await new ConnectionOptionsXmlReader().read(configFile);\n        }\n\n        // normalize and return connection options\n        if (connectionOptions) {\n            return this.normalizeConnectionOptions(connectionOptions);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Normalize connection options.\n     */\n    protected normalizeConnectionOptions(connectionOptions: ConnectionOptions|ConnectionOptions[]): ConnectionOptions[] {\n        if (!(connectionOptions instanceof Array))\n            connectionOptions = [connectionOptions];\n\n        connectionOptions.forEach(options => {\n            if (options.entities) {\n                const entities = (options.entities as any[]).map(entity => {\n                    if (typeof entity === \"string\" && entity.substr(0, 1) !== \"/\")\n                        return this.baseDirectory + \"/\" + entity;\n\n                    return entity;\n                });\n                Object.assign(connectionOptions, { entities: entities });\n            }\n            if (options.subscribers) {\n                const subscribers = (options.subscribers as any[]).map(subscriber => {\n                    if (typeof subscriber === \"string\" && subscriber.substr(0, 1) !== \"/\")\n                        return this.baseDirectory + \"/\" + subscriber;\n\n                    return subscriber;\n                });\n                Object.assign(connectionOptions, { subscribers: subscribers });\n            }\n            if (options.migrations) {\n                const migrations = (options.migrations as any[]).map(migration => {\n                    if (typeof migration === \"string\" && migration.substr(0, 1) !== \"/\")\n                        return this.baseDirectory + \"/\" + migration;\n\n                    return migration;\n                });\n                Object.assign(connectionOptions, { migrations: migrations });\n            }\n\n            // make database path file in sqlite relative to package.json\n            if (options.type === \"sqlite\") {\n                if (typeof options.database === \"string\" &&\n                    options.database.substr(0, 1) !== \"/\" &&  // unix absolute\n                    options.database.substr(1, 2) !== \":\\\\\" && // windows absolute\n                    options.database !== \":memory:\") {\n                    Object.assign(options, {\n                        database: this.baseDirectory + \"/\" + options.database\n                    });\n                }\n            }\n        });\n\n        return connectionOptions;\n    }\n\n    /**\n     * Gets directory where configuration file should be located and configuration file name.\n     */\n    protected get baseFilePath(): string {\n        return this.baseDirectory + \"/\" + this.baseConfigName;\n    }\n\n    /**\n     * Gets directory where configuration file should be located.\n     */\n    protected get baseDirectory(): string {\n        if (this.options && this.options.root)\n            return this.options.root;\n\n        return PlatformTools.load(\"app-root-path\").path;\n    }\n\n    /**\n     * Gets configuration file name.\n     */\n    protected get baseConfigName(): string {\n        if (this.options && this.options.configName)\n            return this.options.configName;\n\n        return \"ormconfig\";\n    }\n\n}\n","/**\n * Thrown when ORM cannot get column's type automatically.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class ColumnTypeUndefinedError extends Error {\n    name = \"ColumnTypeUndefinedError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        Object.setPrototypeOf(this, ColumnTypeUndefinedError.prototype);\n        this.message = `Column type for ${object.constructor.name}#${propertyName} is not defined and cannot be guessed. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application (before any entity imported).` +\n            `If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`;\n    }\n\n}","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {\n    ColumnType, SimpleColumnType, SpatialColumnType, WithLengthColumnType,\n    WithPrecisionColumnType, WithWidthColumnType\n} from \"../../driver/types/ColumnTypes\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\nimport {ColumnCommonOptions} from \"../options/ColumnCommonOptions\";\nimport {SpatialColumnOptions} from \"../options/SpatialColumnOptions\";\nimport {ColumnWithLengthOptions} from \"../options/ColumnWithLengthOptions\";\nimport {ColumnNumericOptions} from \"../options/ColumnNumericOptions\";\nimport {ColumnEnumOptions} from \"../options/ColumnEnumOptions\";\nimport {ColumnEmbeddedOptions} from \"../options/ColumnEmbeddedOptions\";\nimport {EmbeddedMetadataArgs} from \"../../metadata-args/EmbeddedMetadataArgs\";\nimport {ColumnTypeUndefinedError} from \"../../error/ColumnTypeUndefinedError\";\nimport {ColumnHstoreOptions} from \"../options/ColumnHstoreOptions\";\nimport {ColumnWithWidthOptions} from \"../options/ColumnWithWidthOptions\";\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: SimpleColumnType, options?: ColumnCommonOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: SpatialColumnType, options?: ColumnCommonOptions & SpatialColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithLengthColumnType, options?: ColumnCommonOptions & ColumnWithLengthOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithWidthColumnType, options?: ColumnCommonOptions & ColumnWithWidthOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithPrecisionColumnType, options?: ColumnCommonOptions & ColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"enum\", options?: ColumnCommonOptions & ColumnEnumOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"simple-enum\", options?: ColumnCommonOptions & ColumnEnumOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"hstore\", options?: ColumnCommonOptions & ColumnHstoreOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n *\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n */\nexport function Column(type: (type?: any) => Function, options?: ColumnEmbeddedOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions?: ((type?: any) => Function)|ColumnType|(ColumnOptions&ColumnEmbeddedOptions), options?: (ColumnOptions&ColumnEmbeddedOptions)): Function {\n    return function (object: Object, propertyName: string) {\n\n        // normalize parameters\n        let type: ColumnType|undefined;\n        if (typeof typeOrOptions === \"string\" || typeOrOptions instanceof Function) {\n            type = <ColumnType> typeOrOptions;\n\n        } else if (typeOrOptions) {\n            options = <ColumnOptions> typeOrOptions;\n            type = typeOrOptions.type;\n        }\n        if (!options) options = {} as ColumnOptions;\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n        if (!type && reflectMetadataType) // if type is not given explicitly then try to guess it\n            type = reflectMetadataType;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options.type = type;\n\n        // specify HSTORE type if column is HSTORE\n        if (options.type === \"hstore\" && !options.hstoreType)\n            options.hstoreType = reflectMetadataType === Object ? \"object\" : \"string\";\n\n        if (typeOrOptions instanceof Function) { // register an embedded\n            getMetadataArgsStorage().embeddeds.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray: reflectMetadataType === Array || options.array === true,\n                prefix: options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions as (type?: any) => Function\n            } as EmbeddedMetadataArgs);\n\n        } else { // register a regular column\n\n            // if we still don't have a type then we need to give error to user that type is required\n            if (!options.type)\n                throw new ColumnTypeUndefinedError(object, propertyName);\n\n            // create unique\n            if (options.unique === true)\n                getMetadataArgsStorage().uniques.push({ target: object.constructor, columns: [propertyName] });\n\n            getMetadataArgsStorage().columns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options\n            } as ColumnMetadataArgs);\n\n            if (options.generated) {\n                getMetadataArgsStorage().generations.push({\n                    target: object.constructor,\n                    propertyName: propertyName,\n                    strategy: typeof options.generated === \"string\" ? options.generated : \"increment\"\n                } as GeneratedMetadataArgs);\n            }\n        }\n    };\n}\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store a creation date of the inserted object.\n * Creation date is generated and inserted only once,\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\n */\nexport function CreateDateColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"createDate\",\n            options: options || {}\n        } as ColumnMetadataArgs);\n    };\n}\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {PrimaryGeneratedColumnNumericOptions} from \"../options/PrimaryGeneratedColumnNumericOptions\";\nimport {PrimaryGeneratedColumnUUIDOptions} from \"../options/PrimaryGeneratedColumnUUIDOptions\";\nimport {GeneratedMetadataArgs} from \"../../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(options: PrimaryGeneratedColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"increment\", options?: PrimaryGeneratedColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"uuid\", options?: PrimaryGeneratedColumnUUIDOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"rowid\", options?: PrimaryGeneratedColumnUUIDOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions?: \"increment\"|\"uuid\"|\"rowid\"|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions,\n                                       maybeOptions?: PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions): Function {\n\n    // normalize parameters\n    const options: ColumnOptions = {};\n    let strategy: \"increment\"|\"uuid\"|\"rowid\";\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions as \"increment\"|\"uuid\"|\"rowid\";\n\n        if (strategyOrOptions instanceof Object) {\n            strategy = \"increment\";\n            Object.assign(options, strategyOrOptions);\n        }\n    } else {\n        strategy = \"increment\";\n    }\n    if (maybeOptions instanceof Object)\n        Object.assign(options, maybeOptions);\n\n    return function (object: Object, propertyName: string) {\n\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\") {\n                options.type = Number;\n            } else if (strategy === \"uuid\") {\n                options.type = \"uuid\";\n            } else if (strategy === \"rowid\") {\n                options.type = \"int\";\n            }\n        }\n\n        // explicitly set a primary and generated to column options\n        options.primary = true;\n\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        });\n\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy\n        } as GeneratedMetadataArgs);\n    };\n}\n","export class PrimaryColumnCannotBeNullableError extends Error {\n    name = \"PrimaryColumnCannotBeNullableError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        Object.setPrototypeOf(this, PrimaryColumnCannotBeNullableError.prototype);\n        this.message = `Primary column ${(<any>object.constructor).name}#${propertyName} cannot be nullable. ` +\n            `Its not allowed for primary keys. Try to remove nullable option.`;\n    }\n\n}","import {ColumnOptions, ColumnType, getMetadataArgsStorage} from \"../../\";\nimport {ColumnTypeUndefinedError} from \"../../error/ColumnTypeUndefinedError\";\nimport {PrimaryColumnCannotBeNullableError} from \"../../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // normalize parameters\n        let type: ColumnType|undefined;\n        if (typeof typeOrOptions === \"string\") {\n            type = <ColumnType> typeOrOptions;\n        } else {\n            options = <ColumnOptions> typeOrOptions;\n        }\n        if (!options) options = {} as ColumnOptions;\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n        if (!type && reflectMetadataType)\n            type = reflectMetadataType;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options.type = type;\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // explicitly set a primary to column options\n        options.primary = true;\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        } as ColumnMetadataArgs);\n\n        if (options.generated) {\n            getMetadataArgsStorage().generations.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                strategy: typeof options.generated === \"string\" ? options.generated : \"increment\"\n            } as GeneratedMetadataArgs);\n        }\n    };\n}\n\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store an update date of the updated object.\n * This date is being updated each time you persist the object.\n */\nexport function UpdateDateColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"updateDate\",\n            options: options ? options : {}\n        } as ColumnMetadataArgs);\n    };\n}\n\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store a number - version of the entity.\n * Every time your entity will be persisted, this number will be increased by one -\n * so you can organize visioning and update strategies of your entity.\n */\nexport function VersionColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"version\",\n            options: options || {}\n        } as ColumnMetadataArgs);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * ViewColumn decorator is used to mark a specific class property as a view column.\n */\nexport function ViewColumn(): Function {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: {}\n        } as ColumnMetadataArgs);\n    };\n}\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\nexport function ObjectIdColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n        options.primary = true;\n        if (!options.name) options.name =  \"_id\";\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"objectId\",\n            options: options\n        } as ColumnMetadataArgs);\n    };\n}\n","/**\n * All types that entity listener can be.\n */\nexport type EventListenerType = \"after-load\"|\"before-insert\"|\"after-insert\"|\"before-update\"|\"after-update\"|\"before-remove\"|\"after-remove\";\n\n/**\n * Provides a constants for each entity listener type.\n */\nexport class EventListenerTypes {\n    static AFTER_LOAD: EventListenerType = \"after-load\";\n    static BEFORE_INSERT: EventListenerType = \"before-insert\";\n    static AFTER_INSERT: EventListenerType = \"after-insert\";\n    static BEFORE_UPDATE: EventListenerType = \"before-update\";\n    static AFTER_UPDATE: EventListenerType = \"after-update\";\n    static BEFORE_REMOVE: EventListenerType = \"before-remove\";\n    static AFTER_REMOVE: EventListenerType = \"after-remove\";\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity insertion.\n */\nexport function AfterInsert() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_INSERT\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after entity is loaded.\n */\nexport function AfterLoad() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_LOAD\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity removal.\n */\nexport function AfterRemove() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_REMOVE\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity update.\n */\nexport function AfterUpdate() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_UPDATE\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity insertion.\n */\nexport function BeforeInsert() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_INSERT\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity removal.\n */\nexport function BeforeRemove() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_REMOVE\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity update.\n */\nexport function BeforeUpdate() {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_UPDATE\n        } as EntityListenerMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\n\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber() {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().entitySubscribers.push({\n            target: target\n        } as EntitySubscriberMetadataArgs);\n    };\n}","import {getMetadataArgsStorage, JoinColumnOptions} from \"../../\";\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): Function;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): Function;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): Function;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray?: JoinColumnOptions|JoinColumnOptions[]): Function {\n    return function (object: Object, propertyName: string) {\n        const options = optionsOrOptionsArray instanceof Array ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n        options.forEach(options => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName\n            } as JoinColumnMetadataArgs);\n        });\n    };\n}\n","import {getMetadataArgsStorage, JoinTableOptions} from \"../../\";\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableMultipleColumnsOptions} from \"../options/JoinTableMultipleColumnsOptions\";\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(): Function;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableOptions): Function;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableMultipleColumnsOptions): Function;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options?: JoinTableOptions|JoinTableMultipleColumnsOptions): Function {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinTableOptions|JoinTableMultipleColumnsOptions;\n        getMetadataArgsStorage().joinTables.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && (options as JoinTableOptions).joinColumn ? [(options as JoinTableOptions).joinColumn!] : (options as JoinTableMultipleColumnsOptions).joinColumns) as any,\n            inverseJoinColumns: (options && (options as JoinTableOptions).inverseJoinColumn ? [(options as JoinTableOptions).inverseJoinColumn!] : (options as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n            schema: options && options.schema ? options.schema : undefined,\n            database: options && options.database ? options.database : undefined,\n        } as JoinTableMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), \n                              options?: RelationOptions): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                              inverseSide?: string|((object: T) => any),\n                              options?: RelationOptions): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                              inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                              options?: RelationOptions): Function {\n\n    // normalize parameters\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options.lazy === true;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), options?: RelationOptions): Function;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                             inverseSide?: string|((object: T) => any),\n                             options?: RelationOptions): Function;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                             options?: RelationOptions): Function {\n\n    // normalize parameters\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.\n * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.\n */\nexport function OneToMany<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), inverseSide: string|((object: T) => any), options?: RelationOptions): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), \n                            options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                            inverseSide?: string|((object: T) => any),\n                            options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                            inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                            options?: RelationOptions): Function {\n\n    // normalize parameters\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, SelectQueryBuilder} from \"../../\";\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\n\n/**\n * Holds a number of children in the closure table of the column.\n *\n * @deprecated Do not use this decorator, it may be removed in the future versions\n */\nexport function RelationCount<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): Function {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().relationCounts.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        } as RelationCountMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, SelectQueryBuilder} from \"../../\";\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\n\n/**\n * Special decorator used to extract relation id into separate entity property.\n *\n * @experimental\n */\nexport function RelationId<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): Function {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().relationIds.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        } as RelationIdMetadataArgs);\n    };\n}\n","import {EntityOptions, getMetadataArgsStorage} from \"../../\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(options?: EntityOptions): Function;\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions): Function;\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions?: string|EntityOptions, maybeOptions?: EntityOptions): Function {\n    const options = (typeof nameOrOptions === \"object\" ? nameOrOptions as EntityOptions : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n\n    return function (target: Function) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize\n        } as TableMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"../../metadata-args/DiscriminatorValueMetadataArgs\";\n\n/**\n * Special type of the table used in the single-table inherited tables.\n */\nexport function ChildEntity(discriminatorValue?: any) {\n    return function (target: Function) {\n\n        // register a table metadata\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            type: \"entity-child\",\n        } as TableMetadataArgs);\n\n        // register discriminator value if it was provided\n        if (discriminatorValue) {\n            getMetadataArgsStorage().discriminatorValues.push({\n                target: target,\n                value: discriminatorValue\n            } as DiscriminatorValueMetadataArgs);\n        }\n    };\n}\n","import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {InheritanceMetadataArgs} from \"../../metadata-args/InheritanceMetadataArgs\";\n\n/**\n * Sets for entity to use table inheritance pattern.\n */\nexport function TableInheritance(options?: { pattern?: \"STI\"/*|\"CTI\"*/, column?: string|ColumnOptions }) {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().inheritances.push({\n            target: target,\n            pattern: options && options.pattern ? options.pattern : \"STI\",\n            column: options && options.column ? typeof options.column === \"string\" ? { name: options.column } : options.column : undefined\n        } as InheritanceMetadataArgs);\n    };\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {ViewEntityOptions} from \"../options/ViewEntityOptions\";\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(options?: ViewEntityOptions): Function;\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(name?: string, options?: ViewEntityOptions): Function;\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(nameOrOptions?: string|ViewEntityOptions, maybeOptions?: ViewEntityOptions): Function {\n    const options = (typeof nameOrOptions === \"object\" ? nameOrOptions as ViewEntityOptions : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n\n    return function (target: Function) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            expression: options.expression,\n            type: \"view\",\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n        } as TableMetadataArgs);\n    };\n}\n","import {getConnection, getMetadataArgsStorage, MongoRepository, Repository, TreeRepository, EntityManager} from \"../../\";\nimport {TransactionOptions} from \"../options/TransactionOptions\";\nimport {IsolationLevel} from \"../../driver/types/IsolationLevel\";\n\n/**\n * Wraps some method into the transaction.\n *\n * Method result will return a promise if this decorator applied.\n * All database operations in the wrapped method should be executed using entity managed passed\n * as a first parameter into the wrapped method.\n *\n * If you want to control at what position in your method parameters entity manager should be injected,\n * then use @TransactionEntityManager() decorator.\n *\n * If you want to use repositories instead of bare entity manager,\n * then use @TransactionRepository() decorator.\n */\nexport function Transaction(connectionName?: string): MethodDecorator;\nexport function Transaction(options?: TransactionOptions): MethodDecorator;\nexport function Transaction(connectionOrOptions?: string | TransactionOptions): MethodDecorator {\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\n\n        // save original method - we gonna need it\n        const originalMethod = descriptor.value;\n\n        // override method descriptor with proxy method\n        descriptor.value = function(...args: any[]) {\n            let connectionName = \"default\";\n            let isolationLevel: IsolationLevel | undefined = undefined;\n            if (connectionOrOptions) {\n                if (typeof connectionOrOptions === \"string\") {\n                    connectionName = connectionOrOptions;\n                } else {\n                    if (connectionOrOptions.connectionName) {\n                        connectionName = connectionOrOptions.connectionName;\n                    }\n                    if (connectionOrOptions.isolation) {\n                        isolationLevel = connectionOrOptions.isolation;\n                    }\n                }\n            }\n\n            const transactionCallback = (entityManager: EntityManager) => {\n                let argsWithInjectedTransactionManagerAndRepositories: any[];\n\n                // filter all @TransactionEntityManager() and @TransactionRepository() decorator usages for this method\n                const transactionEntityManagerMetadatas = getMetadataArgsStorage()\n                    .filterTransactionEntityManagers(target.constructor, methodName)\n                    .reverse();\n                const transactionRepositoryMetadatas = getMetadataArgsStorage()\n                    .filterTransactionRepository(target.constructor, methodName)\n                    .reverse();\n\n                // if there are @TransactionEntityManager() decorator usages the inject them\n                if (transactionEntityManagerMetadatas.length > 0) {\n                    argsWithInjectedTransactionManagerAndRepositories = [...args];\n                    // replace method params with injection of transactionEntityManager\n                    transactionEntityManagerMetadatas.forEach(metadata => {\n                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);\n                    });\n\n                } else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter\n                    argsWithInjectedTransactionManagerAndRepositories = [entityManager, ...args];\n\n                } else {\n                    argsWithInjectedTransactionManagerAndRepositories = [...args];\n                }\n\n                // for every usage of @TransactionRepository decorator\n                transactionRepositoryMetadatas.forEach(metadata => {\n                    let repositoryInstance: any;\n\n                    // detect type of the repository and get instance from transaction entity manager\n                    switch (metadata.repositoryType) {\n                        case Repository:\n                            repositoryInstance = entityManager.getRepository(metadata.entityType!);\n                            break;\n                        case MongoRepository:\n                            repositoryInstance = entityManager.getMongoRepository(metadata.entityType!);\n                            break;\n                        case TreeRepository:\n                            repositoryInstance = entityManager.getTreeRepository(metadata.entityType!);\n                            break;\n                        // if not the TypeORM's ones, there must be custom repository classes\n                        default:\n                            repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);\n                    }\n\n                    // replace method param with injection of repository instance\n                    argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);\n                });\n\n                return originalMethod.apply(this, argsWithInjectedTransactionManagerAndRepositories);\n            };\n            if (isolationLevel) {\n                return getConnection(connectionName).manager.transaction(isolationLevel, transactionCallback);\n            } else {\n                return getConnection(connectionName).manager.transaction(transactionCallback);\n            }\n        };\n    };\n}\n","import {getMetadataArgsStorage} from \"../../\";\nimport {TransactionEntityMetadataArgs} from \"../../metadata-args/TransactionEntityMetadataArgs\";\n\n/**\n * Injects transaction's entity manager into the method wrapped with @Transaction decorator.\n */\nexport function TransactionManager(): Function {\n    return function (object: Object, methodName: string, index: number) {\n\n        getMetadataArgsStorage().transactionEntityManagers.push({\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n        } as TransactionEntityMetadataArgs);\n    };\n}\n","/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class CannotReflectMethodParameterTypeError extends Error {\n    name = \"CannotReflectMethodParameterTypeError\";\n\n    constructor(target: Function, methodName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotReflectMethodParameterTypeError.prototype);\n        this.message = `Cannot get reflected type for a \"${methodName}\" method's parameter of \"${target.name}\" class. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.`;\n    }\n\n}","import {getMetadataArgsStorage} from \"../../\";\nimport {TransactionRepositoryMetadataArgs} from \"../../metadata-args/TransactionRepositoryMetadataArgs\";\nimport {CannotReflectMethodParameterTypeError} from \"../../error/CannotReflectMethodParameterTypeError\";\n\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\nexport function TransactionRepository(entityType?: Function): ParameterDecorator {\n    return (object: Object, methodName: string, index: number) => {\n\n        // get repository type\n        let repositoryType: Function;\n        try {\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n        } catch (err) {\n            throw new CannotReflectMethodParameterTypeError(object.constructor, methodName);\n        }\n        \n        getMetadataArgsStorage().transactionRepositories.push({\n            target: object.constructor,\n            methodName,\n            index,\n            repositoryType,\n            entityType,\n        } as TransactionRepositoryMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn(): Function {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"treeLevel\",\n            options: {}\n        } as ColumnMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Marks a entity property as a parent of the tree.\n * \"Tree parent\" indicates who owns (is a parent) of this entity in tree structure.\n */\nexport function TreeParent(): Function {\n    return function (object: Object, propertyName: string) {\n\n        // now try to determine it its lazy relation\n        const reflectedType = Reflect && (Reflect as any).getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n        const isLazy = (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") || false;\n\n        getMetadataArgsStorage().relations.push({\n            isTreeParent: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"many-to-one\",\n            type: () => object.constructor,\n            options: {}\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Marks a entity property as a children of the tree.\n * \"Tree children\" will contain all children (bind) of this entity.\n */\nexport function TreeChildren(options?: { cascade?: boolean|(\"insert\"|\"update\"|\"remove\")[] }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        const reflectedType = Reflect && (Reflect as any).getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n        const isLazy = (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") || false;\n\n        // add one-to-many relation for this \n        getMetadataArgsStorage().relations.push({\n            isTreeChildren: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: () => object.constructor,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../\";\nimport {TreeMetadataArgs} from \"../../metadata-args/TreeMetadataArgs\";\nimport {TreeType} from \"../../metadata/types/TreeTypes\";\n\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type: TreeType): Function {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type\n        } as TreeMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage, IndexOptions} from \"../\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(options?: IndexOptions): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, options?: IndexOptions): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, options: { synchronize: false }): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, fields: string[], options?: IndexOptions): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(fields: string[], options?: IndexOptions): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions?: string|string[]|((object: any) => (any[]|{ [key: string]: number }))|IndexOptions,\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[]|{ synchronize: false },\n                      maybeOptions?: IndexOptions): Function {\n\n    // normalize parameters\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\n    if (!options)\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as IndexOptions : maybeOptions;\n\n    return function (clsOrObject: Function|Object, propertyName?: string) {\n\n        getMetadataArgsStorage().indices.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize: options && (options as { synchronize: false }).synchronize === false ? false : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            expireAfterSeconds: options && options.expireAfterSeconds ? options.expireAfterSeconds : undefined\n        } as IndexMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../index\";\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(name: string, fields: string[]): Function;\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(fields: string[]): Function;\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(fields: (object?: any) => (any[]|{ [key: string]: number })): Function;\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(name: string, fields: (object?: any) => (any[]|{ [key: string]: number })): Function;\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(nameOrFields?: string|string[]|((object: any) => (any[]|{ [key: string]: number })),\n                       maybeFields?: ((object?: any) => (any[]|{ [key: string]: number }))|string[]): Function {\n    const name = typeof nameOrFields === \"string\" ? nameOrFields : undefined;\n    const fields = typeof nameOrFields === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFields : nameOrFields as string[];\n\n    return function (clsOrObject: Function|Object, propertyName?: string) {\n        const args: UniqueMetadataArgs = {\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            columns: propertyName ? [propertyName] : fields\n        };\n        getMetadataArgsStorage().uniques.push(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../\";\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\n\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(expression: string): Function;\n\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(name: string, expression: string): Function;\n\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(nameOrExpression: string, maybeExpression?: string): Function {\n\n    const name = maybeExpression ? nameOrExpression : undefined;\n    const expression = maybeExpression ? maybeExpression : nameOrExpression;\n\n    if (!expression)\n        throw new Error(`Check expression is required`);\n\n    return function (clsOrObject: Function|Object, propertyName?: string) {\n\n        getMetadataArgsStorage().checks.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            expression: expression\n        } as CheckMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../\";\nimport {ExclusionMetadataArgs} from \"../metadata-args/ExclusionMetadataArgs\";\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(expression: string): Function;\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(name: string, expression: string): Function;\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(nameOrExpression: string, maybeExpression?: string): Function {\n\n    const name = maybeExpression ? nameOrExpression : undefined;\n    const expression = maybeExpression ? maybeExpression : nameOrExpression;\n\n    if (!expression)\n        throw new Error(`Exclusion expression is required`);\n\n    return function (clsOrObject: Function|Object, propertyName?: string) {\n\n        getMetadataArgsStorage().exclusions.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            expression: expression\n        } as ExclusionMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../\";\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Marks a column to generate a value on entity insertion.\n * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).\n * Increment uses a number which increases by one on each insertion.\n * Uuid generates a special UUID token.\n * Rowid supports only in CockroachDB and uses `unique_rowid()` function\n *\n * Note, some databases do not support non-primary generation columns.\n */\nexport function Generated(strategy: \"increment\"|\"uuid\"|\"rowid\" = \"increment\"): Function {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy\n        } as GeneratedMetadataArgs);\n    };\n}\n","import {getMetadataArgsStorage} from \"../\";\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n */\nexport function EntityRepository(entity?: Function): Function {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().entityRepositories.push({\n            target: target,\n            entity: entity,\n        } as EntityRepositoryMetadataArgs);\n    };\n}\n","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Any([...]) }\n */\nexport function Any<T>(value: T[]|FindOperator<T>) {\n    return new FindOperator(\"any\", value as any);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Between(x, y) }\n */\nexport function Between<T>(from: T|FindOperator<T>, to: T|FindOperator<T>) {\n    return new FindOperator(\"between\", [from, to] as any, true, true);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Equal(\"value\") }\n */\nexport function Equal<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"equal\", value);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: IsNull() }\n */\nexport function IsNull() {\n    return new FindOperator(\"isNull\", undefined as any, false);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: LessThan(10) }\n */\nexport function LessThan<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"lessThan\", value);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: LessThanOrEqual(10) }\n */\nexport function LessThanOrEqual<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"lessThanOrEqual\", value);\n}\n","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Like(\"%some sting%\") }\n */\nexport function Like<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"like\", value);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: MoreThan(10) }\n */\nexport function MoreThan<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"moreThan\", value);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: MoreThanOrEqual(10) }\n */\nexport function MoreThanOrEqual<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"moreThanOrEqual\", value);\n}\n","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Used to negotiate expression.\n * Example: { title: not(\"hello\") } will return entities where title not equal to \"hello\".\n */\nexport function Not<T>(value: T|FindOperator<T>) {\n    return new FindOperator(\"not\", value);\n}","import {FindOperator} from \"../FindOperator\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw([...]) }\n */\nexport function Raw<T>(value: string|((columnAlias?: string) => string)) {\n    return new FindOperator(\"raw\", value as any, false);\n}","import {Repository} from \"./Repository\";\nimport {FindConditions, getConnection} from \"../index\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {Connection} from \"../connection/Connection\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\n\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used in all static methods of the BaseEntity.\n     */\n    // @ts-ignore: Unused variable which is actually used\n    private static usedConnection?: Connection;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(): boolean {\n        return (this.constructor as any).getRepository().hasId(this);\n    }\n\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save(): Promise<this> {\n        return (this.constructor as any).getRepository().save(this);\n    }\n\n    /**\n     * Removes current entity from the database.\n     */\n    remove(): Promise<this> {\n        return (this.constructor as any).getRepository().remove(this);\n    }\n\n    /**\n     * Reloads entity data from the database.\n     */\n    async reload(): Promise<void> {\n        const base: any = this.constructor;\n        const newestEntity: BaseEntity = await base.getRepository().findOneOrFail(base.getId(this));\n\n        ObjectUtils.assign(this, newestEntity);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets connection to be used by entity.\n     */\n    static useConnection(connection: Connection) {\n        this.usedConnection = connection;\n    }\n\n    /**\n     * Gets current entity's Repository.\n     */\n    static getRepository<T extends BaseEntity>(this: ObjectType<T>): Repository<T> {\n        const connection: Connection = (this as any).usedConnection || getConnection();\n        return connection.getRepository<T>(this);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    static get target(): Function|string {\n        return this.getRepository().target;\n    }\n\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    static hasId(entity: BaseEntity): boolean {\n        return this.getRepository().hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    static getId<T extends BaseEntity>(this: ObjectType<T>, entity: T): any {\n        return (this as any).getRepository().getId(entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    static createQueryBuilder<T extends BaseEntity>(this: ObjectType<T>, alias?: string): SelectQueryBuilder<T> {\n        return (this as any).getRepository().createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>): T;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityLikeArray: DeepPartial<T>[]): T;\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): T;\n   /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities?: any): T {\n        return (this as any).getRepository().create(entityOrEntities);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    static merge<T extends BaseEntity>(this: ObjectType<T>, mergeIntoEntity: T, ...entityLikes: DeepPartial<T>[]): T {\n        return (this as any).getRepository().merge(mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    static preload<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): Promise<T|undefined> {\n        return (this as any).getRepository().preload(entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    static save<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().save(entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: RemoveOptions): Promise<T[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: RemoveOptions): Promise<T>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: RemoveOptions): Promise<T|T[]> {\n        return (this as any).getRepository().remove(entityOrEntities as any, options);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    static insert<T extends BaseEntity>(this: ObjectType<T>, entity: QueryDeepPartialEntity<T>|QueryDeepPartialEntity<T>[], options?: SaveOptions): Promise<InsertResult> {\n        return (this as any).getRepository().insert(entity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    static update<T extends BaseEntity>(this: ObjectType<T>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<T>, partialEntity: QueryDeepPartialEntity<T>, options?: SaveOptions): Promise<UpdateResult> {\n        return (this as any).getRepository().update(criteria, partialEntity, options);\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    static delete<T extends BaseEntity>(this: ObjectType<T>, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<T>, options?: RemoveOptions): Promise<DeleteResult> {\n        return (this as any).getRepository().delete(criteria, options);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    static count<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<number> {\n        return (this as any).getRepository().count(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    static find<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<T[]> {\n        return (this as any).getRepository().find(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<[ T[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>): Promise<[ T[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<[ T[], number ]> {\n        return (this as any).getRepository().findAndCount(optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], options?: FindManyOptions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], conditions?: FindConditions<T>): Promise<T[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], optionsOrConditions?: FindManyOptions<T>|FindConditions<T>): Promise<T[]> {\n        return (this as any).getRepository().findByIds(ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, id?: string|number|Date|ObjectID, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<T>|FindConditions<T>, maybeOptions?: FindOneOptions<T>): Promise<T|undefined> {\n        return (this as any).getRepository().findOne(optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, id?: string|number|Date|ObjectID, options?: FindOneOptions<T>): Promise<T>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, conditions?: FindConditions<T>, options?: FindOneOptions<T>): Promise<T>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<T>|FindConditions<T>, maybeOptions?: FindOneOptions<T>): Promise<T> {\n        return (this as any).getRepository().findOneOrFail(optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    static query<T extends BaseEntity>(this: ObjectType<T>, query: string, parameters?: any[]): Promise<any> {\n        return (this as any).getRepository().query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    static clear<T extends BaseEntity>(this: ObjectType<T>, ): Promise<void> {\n        return (this as any).getRepository().clear();\n    }\n\n}\n","import { EventEmitter, Readable, Writable } from \"../../platform/PlatformTools\";\n\n/**\n * Creates a new MongoClient instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html\n */\nexport declare class MongoClient extends EventEmitter {\n\n    constructor(uri: string, options?: MongoClientOptions);\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    static connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    static connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     */\n    connect(): Promise<MongoClient>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param callback The command result callback.\n     */\n    connect(url: string, callback: MongoCallback<Db>): void;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     */\n    connect(url: string, options?: MongoClientOptions): Promise<Db>;\n\n    /**\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\n     *\n     * @param url The connection URI string.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     */\n    connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param force Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(force?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     * @param force Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#close\n     */\n    close(force: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     * @param dbName The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#db\n     */\n    db(dbName?: string, options?: MongoClientCommonOption): Db;\n\n    /**\n     * Check if MongoClient is connected.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#isConnected\n     */\n    isConnected(options?: MongoClientCommonOption): boolean;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n    logout(options?: { dbName?: string }): Promise<any>;\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Starts a new session on the server.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#startSession\n     */\n    startSession(options?: SessionOptions): ClientSession;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster.\n     * Will ignore all changes to system collections, as well as the local, admin, and config databases.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session will be handled without the need for user interaction.\n     * @param operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#withSession\n     */\n    withSession(operation: (session: ClientSession) => Promise<any>): Promise<void>;\n\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session will be handled without the need for user interaction.\n     * @param options Optional settings to be appled to implicitly created session.\n     * @param operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html#withSession\n     */\n    withSession(options: SessionOptions, operation: (session: ClientSession) => Promise<any>): Promise<void>;\n}\n\n/**\n * The callback format for results.\n */\nexport interface MongoCallback<T> {\n\n    /**\n     * @param error An error instance representing the error during the execution.\n     * @param result The result of execution.\n     */\n    (error: MongoError, result: T): void;\n}\n\n// http://mongodb.github.io/node-mongodb-native/2.1/api/MongoError.html\nexport declare class MongoError extends Error {\n    constructor(message: string);\n    static create(options: Object): MongoError;\n}\n\n/**\n * Options for MongoClient#connect method.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#.connect\n */\nexport interface MongoClientOptions {\n\n    /**\n     * The maximum size of the individual server pool.\n     */\n    poolSize?: number;\n\n    /**\n     * Enable SSL connection.\n     */\n    ssl?: boolean;\n\n    /**\n     * SSL Certificate store binary buffer.\n     */\n    sslCA?: Buffer;\n\n    /**\n     * Uri decode the user name and password for authentication.\n     */\n    uri_decode_auth?: boolean;\n\n    /**\n     * A hash of options to set on the db object, see Db constructor.\n     */\n    db?: DbCreateOptions;\n\n    /**\n     * A hash of options to set on the server objects, see Server constructor**.\n     */\n    server?: ServerOptions;\n\n    /**\n     * A hash of options to set on the replSet object, see ReplSet constructor**.\n     */\n    replSet?: ReplSetOptions;\n\n    /**\n     * A hash of options to set on the mongos object, see Mongos constructor**.\n     */\n    mongos?: MongosOptions;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n}\n\nexport interface CommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Options for Db class.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport interface DbCreateOptions {\n\n    /**\n     * If the database authentication is dependent on another databaseName.\n     */\n    authSource?: string;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Specify if the BSON serializer should ignore undefined fields.\n     */\n    ignoreUndefined?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * Promotes Long values to number if they fit inside the 53 bits resolution.\n     */\n    promoteLongs?: boolean;\n\n    /**\n     * Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n     */\n    bufferMaxEntries?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\n     */\n    promiseLibrary?: Object;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: ReadConcern;\n}\n\n/**\n * Creates a new ReadPreference instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReadPreference.html\n */\nexport declare class ReadPreference {\n    constructor(mode: string, tags: Object);\n\n    /**\n     * The ReadPreference mode as listed above.\n     */\n    mode: string;\n\n    /**\n     * An object representing read preference tags.\n     */\n    tags: any;\n\n    /**\n     * Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n     */\n    static PRIMARY: string;\n\n    /**\n     * Read from primary if available, otherwise a secondary.\n     */\n    static PRIMARY_PREFERRED: string;\n\n    /**\n     * Read from secondary if available, otherwise error.\n     */\n    static SECONDARY: string;\n\n    /**\n     * Read from a secondary if available, otherwise read from the primary.\n     */\n    static SECONDARY_PREFERRED: string;\n\n    /**\n     * All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n     */\n    static NEAREST: string;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    isValid(mode: string): boolean;\n\n    /**\n     * Validate if a mode is legal.\n     */\n    static isValid(mode: string): boolean;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface SocketOptions {\n\n    /**\n     * Reconnect on error.\n     */\n    autoReconnect?: boolean;\n\n    /**\n     * TCP Socket NoDelay option.\n     */\n    noDelay?: boolean;\n\n    /**\n     * TCP KeepAlive on the socket with a X ms delay before start.\n     */\n    keepAlive?: number;\n\n    /**\n     * TCP Connection timeout setting.\n     */\n    connectTimeoutMS?: number;\n\n    /**\n     * TCP Socket timeout setting.\n     */\n    socketTimeoutMS?: number;\n}\n\n/**\n * Creates a new Server instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport interface ServerOptions {\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n\n    /**\n     * Server attempt to reconnect #times.\n     */\n    reconnectTries?: number;\n\n    /**\n     * Server will wait # milliseconds between retries.\n     */\n    reconnectInterval?: number;\n}\n\n/**\n * Creates a new ReplSet instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport interface ReplSetOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * The name of the replicaset to connect to.\n     */\n    replicaSet?: string;\n\n    /**\n     * Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\n     */\n    secondaryAcceptableLatencyMS?: number;\n\n    /**\n     * Sets if the driver should connect even if no primary is available.\n     */\n    connectWithNoPrimary?: boolean;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\n/**\n * Creates a new Mongos instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport interface MongosOptions {\n\n    /**\n     * Turn on high availability monitoring.\n     */\n    ha?: boolean;\n\n    /**\n     * Time between each replicaset status check.\n     */\n    haInterval?: number;\n\n    /**\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n     */\n    poolSize?: number;\n\n    /**\n     * Use ssl connection (needs to have a mongod server with ssl support).\n     */\n    ssl?: boolean;\n\n    /**\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslValidate?: Object;\n\n    /**\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n     */\n    checkServerIdentity?: boolean | Function;\n\n    /**\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCA?: Array<Buffer | string>;\n\n    /**\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslCert?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslKey?: Buffer | string;\n\n    /**\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\n     */\n    sslPass?: Buffer | string;\n\n    /**\n     * Socket options.\n     */\n    socketOptions?: SocketOptions;\n}\n\nexport interface DbOptions {\n\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created.\n     */\n    returnNonCachedInstance?: boolean;\n}\n\nexport interface IndexInformationOptions {\n\n    /**\n     * Returns the full raw index information.\n     */\n    full?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY,\n     * ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY,\n     * ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface ExecuteDbAdminCommandOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    // maxTimeMS?: number;\n}\n\nexport interface ListCollectionsOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Db.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\n */\nexport declare class Db extends EventEmitter {\n\n    /**\n     *\n     * @param databaseName The name of the database this instance represents.\n     * @param serverConfig The server topology for the database.\n     * @param options Optional.\n     */\n    constructor(databaseName: string, serverConfig: Server | ReplSet | Mongos, options?: DbCreateOptions);\n\n    /**\n     * Get the current db topology.\n     */\n    serverConfig: Server | ReplSet | Mongos;\n\n    /**\n     * Current bufferMaxEntries value for the database.\n     */\n    bufferMaxEntries: number;\n\n    /**\n     * The name of the database this instance represents.\n     */\n    databaseName: string;\n\n    /**\n     * The options associated with the db instance.\n     */\n    options: any;\n\n    /**\n     * The current value of the parameter native_parser.\n     */\n    native_parser: boolean;\n\n    /**\n     * The current slaveOk value for the db instance.\n     */\n    slaveOk: boolean;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: WriteConcern;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options?: DbAddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n     */\n    addUser(username: string, password: string, options: DbAddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Return the Admin db instance.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#admin\n     */\n    admin(): Admin;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options?: { authMechanism: string }): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param userName The username.\n     * @param password The password.\n     * @param password\n     * @param options\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\n     */\n    authenticate(userName: string, password: string, options: { authMechanism: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(callback: MongoCallback<void>): void;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose?: boolean): Promise<void>;\n\n    /**\n     * Close the db and its underlying connections.\n     *\n     * @param forceClose Force close, emitting no events.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\n     */\n    close(forceClose: boolean, callback: MongoCallback<void>): void;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string): Collection<any>;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, callback: MongoCallback<Collection<any>>): Collection<any>;\n\n    /**\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n     */\n    collection(name: string, options: DbCollectionOptions, callback: MongoCallback<Collection<any>>): Collection<any>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(): Promise<Collection<any>[]>;\n\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\n     */\n    collections(callback: MongoCallback<Collection<any>[]>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options?: { readPreference: ReadPreference | string }): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\n     */\n    command(command: Object, options: { readPreference: ReadPreference | string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options?: CollectionCreateOptions): Promise<Collection<any>>;\n\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     *\n     * @param name The collection name we wish to access.\n     * @param options Optional settings.\n     * @param callback The results callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n     */\n    createCollection(name: string, options: CollectionCreateOptions, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options?: MongodbIndexOptions): Promise<any>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param name Name of the collection to create the index on.\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n     */\n    createIndex(name: string, fieldOrSpec: string | Object, options: MongodbIndexOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string): Db;\n\n    /**\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\n     *\n     * @param dbName The name of the database we want to use.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\n     */\n    db(dbName: string, options: DbOptions): Db;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string): Promise<boolean>;\n\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name Name of collection to drop.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\n     */\n    dropCollection(name: string, callback: MongoCallback<boolean>): void;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(): Promise<any>;\n\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\n     */\n    dropDatabase(callback: MongoCallback<any>): void;\n\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#ensureIndex\n    // ensureIndex(collectionName: any, fieldOrSpec: any, options: IndexOptions, callback: Function): void;\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#eval\n    // eval(code: any, parameters: any[], options?: any, callback?: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options?: ExecuteDbAdminCommandOptions): Promise<any>;\n\n    /**\n     * Runs a command on the database as admin.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\n     */\n    executeDbAdminCommand(command: Object, options: ExecuteDbAdminCommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options?: IndexInformationOptions): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name The name of the collection.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\n     */\n    indexInformation(name: string, options: IndexInformationOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all collection information for the specified db.\n     *\n     * @param filter Query to filter collections by.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#listCollections\n     */\n    listCollections(filter: Object, options?: ListCollectionsOptions): CommandCursor;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options?: { dbName?: string }): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\n     */\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\n\n    /**\n     * Open the database.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(): Promise<Db>;\n\n    /**\n     * Open the database\n     *\n     * @param callback Callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\n     */\n    open(callback: MongoCallback<Db>): void;\n\n\n    /**\n     *\n     * @param username\n     * @param callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n    removeUser(username: string, options?: { w?: number | string, wtimeout?: number, j?: boolean }): Promise<any>;\n    removeUser(username: string, options: { w?: number | string, wtimeout?: number, j?: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options?: { dropTarget?: boolean }): Promise<Collection<any>>;\n\n    /**\n     * Rename a collection.\n     *\n     * @param fromCollection Name of current collection to rename.\n     * @param toCollection New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\n     */\n    renameCollection(fromCollection: string, toCollection: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection<any>>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(callback: MongoCallback<any>): void;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options?: { scale?: number }): Promise<any>;\n\n    /**\n     * Get all the db statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\n     */\n    stats(options: { scale?: number }, callback: MongoCallback<any>): void;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n}\n\n/**\n * Server.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\n */\nexport declare class Server extends EventEmitter {\n\n    /**\n     *\n     * @param host The host for the server, can be either an IP4, IP6 or domain socket style host.\n     * @param port The server port if IP4.\n     * @param options Optional.\n     */\n    constructor(host: string, port: number, options?: ServerOptions);\n\n    /**\n     * All raw connections.\n     */\n    connections(): Array<any>;\n}\n\n/**\n * ReplSet.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\n */\nexport declare class ReplSet extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: ReplSetOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Mongos.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\n */\nexport declare class Mongos extends EventEmitter {\n\n    /**\n     *\n     * @param servers A seedlist of servers participating in the replicaset.\n     * @param options Optional.\n     */\n    constructor(servers: Array<Server>, options?: MongosOptions);\n\n    /**\n     * All raw connections\n     */\n    connections(): Array<any>;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\n */\nexport interface DbAddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: string | number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\n */\nexport interface CollectionCreateOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Create a capped collection.\n     */\n    capped?: boolean;\n\n    /**\n     * The size of the capped collection in bytes.\n     */\n    size?: number;\n\n    /**\n     * The maximum number of documents in the capped collection.\n     */\n    max?: number;\n\n    /**\n     * Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.\n     */\n    autoIndexId?: boolean;\n}\n\n/**\n * Creates a new Db instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\n */\nexport interface DbCollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * A primary key factory object for generation of custom _id keys.\n     */\n    pkFactory?: Object;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Returns an error if the collection does not exist.\n     */\n    strict?: boolean;\n\n    /**\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\n     */\n    readConcern?: ReadConcern;\n}\n\n/**\n * Creates an index on the db and collection collection.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\n */\nexport interface MongodbIndexOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Creates an unique index.\n     */\n    unique?: boolean;\n\n    /**\n     * Creates a sparse index.\n     */\n    sparse?: boolean;\n\n    /**\n     * Creates the index in the background, yielding whenever possible.\n     */\n    background?: boolean;\n\n    /**\n     * A unique index cannot be created on a key that has pre-existing duplicate values.\n     * If you would like to create the index anyway, keeping the first document\n     * the database indexes and deleting all subsequent documents that have duplicate value.\n     */\n    dropDups?: boolean;\n\n    /**\n     * For geospatial indexes set the lower bound for the co-ordinates.\n     */\n    min?: number;\n\n    /**\n     * For geospatial indexes set the high bound for the co-ordinates.\n     */\n    max?: number;\n\n    /**\n     * Specify the format version of the indexes.\n     */\n    v?: number;\n\n    /**\n     * Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher).\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Override the autogenerated index name (useful if the resulting name is larger than 128 bytes).\n     */\n    name?: string;\n\n}\n\n/**\n * Admin.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html\n */\nexport interface Admin {\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options?: AddUserOptions): Promise<any>;\n\n    /**\n     * Add a user to the database.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n     */\n    addUser(username: string, password: string, options: AddUserOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password?: string): Promise<any>;\n\n    /**\n     * Authenticate a user against the server.\n     *\n     * @param username The username.\n     * @param password The password.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\n     */\n    authenticate(username: string, password: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(): Promise<any>;\n\n    /**\n     * Retrieve the server information for the current instance of the db client\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\n     */\n    buildInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options?: CommandOptions): Promise<any>;\n\n    /**\n     * Execute a command.\n     *\n     * @param command The command hash.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\n     */\n    command(command: Object, options: CommandOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * List the available databases.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(): Promise<any>;\n\n    /**\n     * List the available databases.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\n     */\n    listDatabases(callback: MongoCallback<any>): void;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(): Promise<any>;\n\n    /**\n     * Logout user from server, fire off on all connections and remove all auth info.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\n     */\n    logout(callback: MongoCallback<any>): void;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(): Promise<any>;\n\n    /**\n     * Ping the MongoDB server and retrieve results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\n     */\n    ping(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(): Promise<any>;\n\n    /**\n     * Retrive the current profiling information for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\n     */\n    profilingInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(): Promise<any>;\n\n    /**\n     * Retrieve the current profiling Level for MongoDB.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\n     */\n    profilingLevel(callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options?: FSyncOptions): Promise<any>;\n\n    /**\n     * Remove a user from a database.\n     *\n     * @param username The username.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n     */\n    removeUser(username: string, options: FSyncOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(): Promise<any>;\n\n    /**\n     * Get ReplicaSet status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\n     */\n    replSetGetStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve the server information for the current\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     */\n    serverInfo(): Promise<any>;\n\n    /**\n     * instance of the db client\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\n     * @param callback The command result callback.\n     */\n    serverInfo(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(): Promise<any>;\n\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\n     */\n    serverStatus(callback: MongoCallback<any>): void;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string): Promise<any>;\n\n    /**\n     * Set the current profiling level of MongoDB.\n     *\n     * @param level The new profiling level (off, slow_only, all).\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\n     */\n    setProfilingLevel(level: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options?: Object): Promise<any>;\n\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionNme The name of the collection to validate.\n     * @param options Optional settings.\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\n     */\n    validateCollection(collectionNme: string, options: Object, callback: MongoCallback<any>): void;\n}\n\n/**\n * Add a user to the database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\n */\nexport interface AddUserOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync: boolean;\n\n    /**\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\n     */\n    customData?: Object;\n\n    /**\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\n     */\n    roles?: Object[];\n}\nexport interface ListIndexesOptions {\n\n    /**\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\n     */\n    batchSize?: number;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\nexport interface GroupOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Remove a user from a database.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\n */\nexport interface FSyncOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Specify a file sync write concern.\n     */\n    fsync?: boolean;\n}\n\nexport interface FindOneAndDeleteOptions {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ObjectID.html\n */\nexport declare class ObjectID {\n    constructor(s?: string | number);\n\n    /**\n     * The generation time of this ObjectId instance.\n     */\n    generationTime: number;\n\n    /**\n     * Creates an ObjectID from a hex string representation of an ObjectID.\n     */\n    static createFromHexString(hexString: string): ObjectID;\n\n    /**\n     * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n     */\n    static createFromTime(time: number): ObjectID;\n\n    /**\n     * Checks if a value is a valid bson ObjectId.\n     */\n    static isValid(id: any): boolean;\n\n    /**\n     * Compares the equality of this ObjectID with otherID.\n     */\n    equals(otherID: ObjectID): boolean;\n\n    /**\n     * Generate a 12 byte id buffer used in ObjectID's.\n     */\n    generate(time?: number): string;\n\n    /**\n     * Returns the generation date (accurate up to the second) that this ID was generated.\n     *\n     */\n    getTimestamp(): Date;\n\n    /**\n     * Return the ObjectID id as a 24 byte hex string representation.\n     */\n    toHexString(): string;\n\n    /**\n     * Get the timestamp and validate correctness.\n     */\n    toString(): string;\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Binary.html\n */\nexport declare class Binary {\n\n    /**\n     * @param buffer A buffer object containing the binary data.\n     * @param subType The option binary type.\n     */\n    constructor(buffer: Buffer, subType?: number);\n\n    /**\n     * Byte Array BSON type.\n     */\n    static SUBTYPE_BYTE_ARRAY: number;\n\n    /**\n     * Default BSON type.\n     */\n    static SUBTYPE_DEFAULT: number;\n\n    /**\n     * Function BSON type.\n     */\n    static SUBTYPE_FUNCTION: number;\n\n    /**\n     * MD5 BSON type.\n     */\n    static SUBTYPE_MD5: number;\n\n    /**\n     * User BSON type.\n     */\n    static SUBTYPE_USER_DEFINED: number;\n\n    /**\n     * UUID BSON type.\n     */\n    static SUBTYPE_UUID: number;\n\n    /**\n     * OLD UUID BSON type\n     */\n    static SUBTYPE_UUID_OLD: number;\n\n    /**\n     * The length of the binary.\n     */\n    length(): number;\n\n    /**\n     * Updates this binary with byte_value.\n     *\n     * @param byte_value A single byte we wish to write.\n     */\n    put(byte_value: number | string): void;\n\n    /**\n     * Reads length bytes starting at position.\n     *\n     * @param position Read from the given position in the Binary.\n     * @param length The number of bytes to read.\n     */\n    read(position: number, length: number): Buffer;\n\n    /**\n     * Returns the value of this binary as a string.\n     */\n    value(): string;\n\n    /**\n     * Writes a buffer or string to the binary\n     *\n     * @param buffer A string or buffer to be written to the Binary BSON object.\n     * @param offset Specify the binary of where to write the content.\n     */\n    write(buffer: Buffer | string, offset: number): void;\n}\n/**\n * A class representation of the BSON Double type.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Double.html\n */\nexport declare class Double {\n\n    /**\n     * @param value The number we want to represent as a double.\n     */\n    constructor(value: number);\n\n    /**\n     * Access the number value.\n     */\n    valueOf(): number;\n}\n\n/**\n * Long\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Long.html\n */\nexport declare class Long {\n\n    /**\n     * @param low The low (signed) 32 bits of the Long.\n     * @param high The high (signed) 32 bits of the Long.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Long;\n    static MIN_VALUE: Long;\n    static NEG_ONE: Long;\n    static ONE: Long;\n    static ZERO: Long;\n\n    /**\n     * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits.\n     * Each is assumed to use 32 bits.\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Long;\n\n    /**\n     * Returns a Long representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Long;\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Long;\n\n    /**\n     * Returns a Long representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Long.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Long;\n\n    /**\n     * Returns the sum of this and the given Long.\n     *\n     * @param other Long to add to this one.\n     */\n    add(other: Long): Long;\n\n    /**\n     * Returns the bitwise-AND of this Long and the given one.\n     *\n     * @param other The Long with which to AND.\n     */\n    and(other: Long): Long;\n\n    /**\n     * Compares this Long with the given one.\n     *\n     * @param other Long to compare against.\n     */\n    compare(other: Long): number;\n\n    /**\n     * Returns this Long divided by the given one.\n     *\n     * @param other Long by which to divide.\n     */\n    div(other: Long): Long;\n\n    /**\n     * Return whether this Long equals the other.\n     *\n     * @param other Long to compare against.\n     */\n    equals(other: Long): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Long.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Long is greater than the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThan(other: Long): number;\n\n    /**\n     * Return whether this Long is greater than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    greaterThanOrEqual(other: Long): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Long is less than the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThan(other: Long): boolean;\n\n    /**\n     * Return whether this Long is less than or equal to the other.\n     *\n     * @param other Long to compare against.\n     */\n    lessThanOrEqual(other: Long): boolean;\n\n    /**\n     * Returns this Long modulo the given one.\n     *\n     * @param other Long by which to mod.\n     */\n    modulo(other: Long): Long;\n\n    /**\n     * Returns the product of this and the given Long.\n     *\n     * @param other Long to multiply with this.\n     */\n    multiply(other: Long): Long;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Long;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Long;\n\n    /**\n     * Return whether this Long does not equal the other.\n     *\n     * @param other Long to compare against.\n     */\n    notEquals(other: Long): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Long and the given one.\n     *\n     * @param other The Long with which to OR.\n     */\n    or(other: Long): Long;\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Long;\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRightUnsigned(other: number): Long;\n\n    /**\n     * Returns the difference of this and the given Long.\n     *\n     * @param other Long to subtract from this.\n     */\n    subtract(other: Long): Long;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param opt_radix The radix in which the text should be written.\n     */\n    toString(opt_radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Long and the given one.\n     *\n     * @param other The Long with which to XOR.\n     */\n    xor(other: Long): Long;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MaxKey.html\n */\nexport declare class MaxKey { }\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MinKey.html\n */\nexport declare class MinKey { }\n\n/**\n * Timestamp.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Timestamp.html\n */\nexport declare class Timestamp {\n\n    /**\n     * @param low The low (signed) 32 bits of the Timestamp.\n     * @param high The high (signed) 32 bits of the Timestamp.\n     */\n    constructor(low: number, high: number);\n\n    static MAX_VALUE: Timestamp;\n    static MIN_VALUE: Timestamp;\n    static NEG_ONE: Timestamp;\n    static ONE: Timestamp;\n    static ZERO: Timestamp;\n\n    /**\n     * Returns a Timestamp representing the 64-bit integer that comes by concatenating the\n     * given high and low bits. Each is assumed to use 32 bits..\n     *\n     * @param lowBits The low 32-bits.\n     * @param highBits The high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given (32-bit) integer value.\n     *\n     * @param value The 32-bit integer in question.\n     */\n    static fromInt(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     *\n     * @param value The number in question.\n     */\n    static fromNumber(value: number): Timestamp;\n\n    /**\n     * Returns a Timestamp representation of the given string, written using the given radix.\n     *\n     * @param str The textual representation of the Timestamp.\n     * @param radix The radix in which the text is written.\n     */\n    static fromString(str: string, radix?: number): Timestamp;\n\n    /**\n     * Returns the sum of this and the given Timestamp.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    add(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the bitwise-AND of this Timestamp and the given one.\n     *\n     * @param other Timestamp to add to this one.\n     */\n    and(other: Timestamp): Timestamp;\n\n    /**\n     * Compares this Timestamp with the given one.\n     *\n     * @param other Timestamp to compare against.\n     */\n    compare(other: Timestamp): number;\n\n    /**\n     * Returns this Timestamp divided by the given one.\n     *\n     * @param other Timestamp by which to divide.\n     */\n    div(other: Timestamp): Timestamp;\n\n    /**\n     * Return whether this Timestamp equals the other\n     *\n     * @param other\n     */\n    equals(other: Timestamp): boolean;\n\n    /**\n     * Return the high 32-bits value.\n     */\n    getHighBits(): number;\n\n    /**\n     * Return the low 32-bits value.\n     */\n    getLowBits(): number;\n\n    /**\n     * Return the low unsigned 32-bits value.\n     */\n    getLowBitsUnsigned(): number;\n\n    /**\n     * Returns the number of bits needed to represent the absolute value of this Timestamp.\n     */\n    getNumBitsAbs(): number;\n\n    /**\n     * Return whether this Timestamp is greater than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThan(other: Timestamp): number;\n\n    /**\n     * Return whether this Timestamp is greater than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    greaterThanOrEqual(other: Timestamp): number;\n\n    /**\n     * Return whether this value is negative.\n     */\n    isNegative(): boolean;\n\n    /**\n     * IsOdd.\n     * Return whether this value is odd.\n     */\n    isOdd(): boolean;\n\n    /**\n     * Return whether this value is zero.\n     */\n    isZero(): boolean;\n\n    /**\n     * Return whether this Timestamp is less than the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThan(other: Timestamp): boolean;\n\n    /**\n     * Return whether this Timestamp is less than or equal to the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    lessThanOrEqual(other: Timestamp): boolean;\n\n    /**\n     * Returns this Timestamp modulo the given one.\n     *\n     * @param other Timestamp by which to mod.\n     */\n    modulo(other: Timestamp): Timestamp;\n\n    /**\n     * Returns the product of this and the given Timestamp.\n     *\n     * @param other Timestamp to multiply with this.\n     */\n    multiply(other: Timestamp): Timestamp;\n\n    /**\n     * The negation of this value.\n     */\n    negate(): Timestamp;\n\n    /**\n     * The bitwise-NOT of this value.\n     */\n    not(): Timestamp;\n\n    /**\n     * Return whether this Timestamp does not equal the other.\n     *\n     * @param other Timestamp to compare against.\n     */\n    notEquals(other: Timestamp): boolean;\n\n    /**\n     * Returns the bitwise-OR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to OR.\n     */\n    or(other: Timestamp): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the left by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftLeft(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount.\n     *\n     * @param other The number of bits by which to shift.\n     */\n    shiftRight(other: number): Timestamp;\n\n    /**\n     * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n     *\n     * @param other\n     */\n    shiftRightUnsigned(other: number): Timestamp;\n\n    /**\n     * Returns the difference of this and the given Timestamp.\n     *\n     * @param other Timestamp to subtract from this.\n     */\n    subtract(other: Timestamp): Timestamp;\n\n    /**\n     * Return the int value.\n     */\n    toInt(): number;\n\n    /**\n     * Return the JSON value.\n     */\n    toJSON(): string;\n\n    /**\n     * Return the Number value.\n     */\n    toNumber(): number;\n\n    /**\n     * Return the String value.\n     *\n     * @param radix The radix in which the text should be written.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns the bitwise-XOR of this Timestamp and the given one.\n     *\n     * @param other The Timestamp with which to XOR.\n     */\n    xor(other: Timestamp): Timestamp;\n}\n\nexport interface CollectionDeleteOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimmeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\nexport interface CollectionDistinctOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Create a new ObjectID instance.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html\n */\nexport interface Collection<T> {\n\n    /**\n     * Get the collection name.\n     */\n    collectionName: string;\n\n    /**\n     * Get the full collection namespace.\n     */\n    namespace: string;\n\n    /**\n     * The current write concern values.\n     */\n    writeConcern: WriteConcern;\n\n    /**\n     * The current read concern values.\n     */\n    readConcern: ReadConcern;\n\n    /**\n     * Get current index hint for collection.\n     */\n    hint: any;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n     *\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\n     * @param options Optional.\n     * @param callback Optional\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n     */\n    aggregate<T>(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<T>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject>;\n\n    /**\n     * BulkWrite.\n     *\n     * @param operations Bulk operations to perform.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n     */\n    bulkWrite(operations: Object[], options: CollectionBulkWriteOptions, callback: MongoCallback<BulkWriteOpResultObject>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n     */\n    count(query: FilterQuery<T>, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the countDocuments.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocumentst\n     */\n    countDocuments(query: FilterQuery<T>, callback: MongoCallback<number>): void;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n     */\n    countDocuments(query: FilterQuery<T>, options?: MongoCountPreferences): Promise<number>;\n\n    /**\n     * Count number of matching documents in the db to a query.\n     *\n     * @param query The query for the count=\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n     */\n    countDocuments(query: FilterQuery<T>, options: MongoCountPreferences, callback: MongoCallback<number>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, callback: MongoCallback<string>): void;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string>;\n\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param fieldOrSpec Defines the index.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\n     */\n    createIndex(fieldOrSpec: string | any, options: MongodbIndexOptions, callback: MongoCallback<string>): void;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[]): Promise<any>;\n\n    /**\n     * CreateIndexes.\n     *\n     * @param indexSpecs An array of index specifications to be created.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\n     */\n    createIndexes(indexSpecs: Object[], callback: MongoCallback<any>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, options?: CollectionOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the documents to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n     */\n    deleteMany(filter: FilterQuery<T>, options: CollectionOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, options?: CollectionDeleteOneOptions): Promise<DeleteWriteOpResultObject>;\n\n    /**\n     * Delete a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to remove.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\n     */\n    deleteOne(filter: FilterQuery<T>, options: CollectionDeleteOneOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, callback: MongoCallback<any>): void;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, options?: CollectionDistinctOptions): Promise<any>;\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     *\n     * @param key Field of the document to find distinct values for.\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\n     */\n    distinct(key: string, query: FilterQuery<T>, options: CollectionDistinctOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(): Promise<any>;\n\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\n     */\n    drop(callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options?: CollectionOptions): Promise<any>;\n\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName Name of the index to drop.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\n     */\n    dropIndex(indexName: string, options: CollectionOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(): Promise<any>;\n\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\n     */\n    dropIndexes(callback?: MongoCallback<any>): void;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find(query?: Object): Cursor<any>;\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     *\n     * @param query The cursor query object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\n     */\n    find<T>(query?: FilterQuery<T>): Cursor<T>;\n\n    /** @deprecated */\n    find(query: FilterQuery<T>, fields?: Object, skip?: number, limit?: number, timeout?: number): Cursor<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, callback: MongoCallback<any>): void;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, options?: MongodbFindOneOptions): Promise<any>;\n\n    /**\n     * Fetches the first document that matches the query.\n     *\n     * @param query Query for find Operation.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n     * @deprecated use find().limit(1).next(function(err, doc){}).\n     */\n    findOne(query: FilterQuery<T>, options: MongodbFindOneOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, options?: FindOneAndDeleteOptions): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\n     */\n    findOneAndDelete(filter: FilterQuery<T>, options: FindOneAndDeleteOptions, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param replacement Document replacing the matching document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n     */\n    findOneAndReplace(filter: FilterQuery<T>, replacement: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     *\n     * @param filter Document selection filter.\n     * @param update Update operations to be performed on the document.\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\n     */\n    findOneAndUpdate(filter: FilterQuery<T>, update: UpdateQuery<T>, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any>;\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n     */\n    geoHaystackSearch(x: number, y: number, options: GeoHaystackSearchOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, callback: MongoCallback<any>): void;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optionals.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any>;\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     *\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n     */\n    geoNear(x: number, y: number, options: GeoNearOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, callback: MongoCallback<any>): void;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: GroupOptions): Promise<any>;\n\n    /**\n     * Run a group command across a collection.\n     *\n     * @param keys An object, array or function expressing the keys to group by.\n     * @param condition An optional condition that must be true for a row to be considered.\n     * @param initial Initial value of the aggregation counter object.\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n     */\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options: GroupOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(): Promise<any>;\n\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\n     */\n    indexes(callback: MongoCallback<any>): void;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[]): Promise<boolean>;\n\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\n     *\n     * @param indexes One or more index names to check.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\n     */\n    indexExists(indexes: string | string[], callback: MongoCallback<boolean>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param callback The command result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(callback: MongoCallback<any>): void;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options?: { full: boolean }): Promise<any>;\n\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\n     */\n    indexInformation(options: { full: boolean }, callback: MongoCallback<any>): void;\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added,\n     * creating a new operation for each switch in types.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeOrderedBulkOp\n     */\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation;\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeUnorderedBulkOp\n     */\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\n    insert(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;\n\n    /**\n     * InsertMany.\n     *\n     * @param docs Documents to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n     */\n    insertMany(docs: Object[], options: CollectionInsertManyOptions, callback: MongoCallback<InsertWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\n\n    /**\n     * InsertOne.\n     *\n     * @param docs Document to insert.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n     */\n    insertOne(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(): Promise<any>;\n\n    /**\n     * Returns if the collection is a capped collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\n     */\n    isCapped(callback: MongoCallback<any>): void;\n\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#listIndexes\n     */\n    listIndexes(options?: ListIndexesOptions): CommandCursor;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, callback: MongoCallback<any>): void;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any>;\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     *\n     * @param map The mapping function.\n     * @param reduce The reduce function.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n     */\n    mapReduce(map: Function | string, reduce: Function | string, options: MapReduceOptions, callback: MongoCallback<any>): void;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(): Promise<any>;\n\n    /**\n     * Returns the options of the collection.\n     *\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\n     */\n    options(callback: MongoCallback<any>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]>;\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n     * no ordering guarantees for returned results.\n     *\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n     */\n    parallelCollectionScan(options: ParallelCollectionScanOptions, callback: MongoCallback<Cursor<any>[]>): void;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(): Promise<any>;\n\n    /**\n     * Reindex all indexes on the collection.\n     *\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\n     */\n    reIndex(callback: MongoCallback<any>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#remove\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }, callback?: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, callback: MongoCallback<Collection<T>>): void;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection<T>>;\n\n    /**\n     * Rename the collection.\n     *\n     * @param newName New name of of the collection.\n     * @param options Optional settings.\n     * @param callback The results callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\n     */\n    rename(newName: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection<T>>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Replace a document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param doc The Document that replaces the matching document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n     */\n    replaceOne(filter: FilterQuery<T>, doc: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#save\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options?: CollectionOptions): Promise<WriteOpResult>;\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\n    save(doc: Object, options: CollectionOptions, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(callback: MongoCallback<CollStats>): void;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options?: { scale: number }): Promise<CollStats>;\n\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options Optional settings.\n     * @param callback The collection result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\n     */\n    stats(options: { scale: number }, callback: MongoCallback<CollStats>): void;\n\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#update\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<WriteOpResult>): void;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: ReplaceOneOptions & { multi?: boolean }): Promise<WriteOpResult>;\n    /** @deprecated use updateOne, updateMany or bulkWrite */\n    update(filter: FilterQuery<T>, update: UpdateQuery<T>, options: ReplaceOneOptions & { multi?: boolean }, callback: MongoCallback<WriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: UpdateManyOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update multiple documents on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\n     */\n    updateMany(filter: FilterQuery<T>, update: UpdateQuery<T>, options: UpdateManyOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\n\n    /**\n     * Update a single document on MongoDB.\n     *\n     * @param filter The Filter used to select the document to update.\n     * @param update The update operations to be applied to the document.\n     * @param options Optional settings.\n     * @param callback The command result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\n     */\n    updateOne(filter: FilterQuery<T>, update: UpdateQuery<T>, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\n\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     * @param pipeline An array of aggregation pipeline stages through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#watch\n     */\n    watch(pipeline?: Object[], options?: ChangeStreamOptions & { startAtClusterTime?: Timestamp, session?: ClientSession }): ChangeStream;\n\n}\n\n/**\n * Condition.\n */\nexport type Condition<T, P extends keyof T> = {\n    $eq?: T[P];\n    $gt?: T[P];\n    $gte?: T[P];\n    $in?: T[P][];\n    $lt?: T[P];\n    $lte?: T[P];\n    $ne?: T[P];\n    $nin?: T[P][];\n    $and?: (FilterQuery<T[P]> | T[P])[];\n    $or?: (FilterQuery<T[P]> | T[P])[];\n    $not?: (FilterQuery<T[P]> | T[P])[] | T[P];\n    $expr?: any;\n    $jsonSchema?: any;\n    $mod?: [number, number];\n    $regex?: RegExp;\n    $options?: string;\n    $text?: {\n        $search: string;\n        $language?: string;\n        $caseSensitive?: boolean;\n        $diacraticSensitive?: boolean;\n    };\n    $where?: Object;\n    $geoIntersects?: Object;\n    $geoWithin?: Object;\n    $near?: Object;\n    $nearSphere?: Object;\n    $elemMatch?: Object;\n    $size?: number;\n    $bitsAllClear?: Object;\n    $bitsAllSet?: Object;\n    $bitsAnyClear?: Object;\n    $bitsAnySet?: Object;\n    [key: string]: any;\n};\n\n/**\n * @see https://docs.mongodb.com/manual/reference/operator/update\n */\nexport type UpdateQuery<T> = {\n    $inc?: { [P in keyof T]?: number } | { [key: string]: number };\n    $min?: { [P in keyof T]?: number } | { [key: string]: number };\n    $max?: { [P in keyof T]?: number } | { [key: string]: number };\n    $mul?: { [P in keyof T]?: number } | { [key: string]: number };\n    $set?: Partial<T> | { [key: string]: any };\n    $setOnInsert?: Partial<T> | { [key: string]: any };\n    $unset?: { [P in keyof T]?: \"\" } | { [key: string]: \"\" };\n    $rename?: { [key: string]: keyof T } | { [key: string]: string };\n    $currentDate?: { [P in keyof T]?: (true | { $type: \"date\" | \"timestamp\" }) } | { [key: string]: (true | { $type: \"date\" | \"timestamp\" }) };\n    $addToSet?: Partial<T> | { [key: string]: any };\n    $pop?: { [P in keyof T]?: -1 | 1 } | { [key: string]: -1 | 1 };\n    $pull?: Partial<T> | { [key: string]: Condition<T, keyof T> };\n    $push?: Partial<T> | { [key: string]: any };\n    $pushAll?: Partial<T> | { [key: string]: Array<any> };\n    $each?: Partial<T> | { [key: string]: Array<any> };\n    $bit?: { [P in keyof T]?: any } | { [key: string]: any };\n};\n\nexport type FilterQuery<T> = {\n    [P in keyof T]?: T[P] | Condition<T, P>;\n} | { [key: string]: any };\n\n/**\n * The name of the target collection.\n *\n * @see http://docs.mongodb.org/manual/reference/command/collStats/\n */\nexport interface CollStats {\n\n    /**\n     * Namespace.\n     */\n    ns: string;\n\n    /**\n     * The number of objects or documents in this collection.\n     */\n    count: number;\n\n    /**\n     * Collection size in bytes.\n     */\n    size: number;\n\n    /**\n     * Average object size in bytes.\n     */\n    avgObjSize: number;\n\n    /**\n     * (Pre)allocated space for the collection in bytes.\n     */\n    storageSize: number;\n\n    /**\n     * Number of extents (contiguously allocated chunks of datafile space).\n     */\n    numExtents: number;\n\n    /**\n     * Number of indexes.\n     */\n    nindexes: number;\n\n    /**\n     * Size of the most recently created extent in bytes.\n     */\n    lastExtentSize: number;\n\n    /**\n     * Padding can speed up updates if documents grow.\n     */\n    paddingFactor: number;\n\n    /**\n     * A number that indicates the user-set flags on the collection. userFlags\n     * only appears when using the mmapv1 storage engine.\n     */\n    userFlags: number;\n\n    /**\n     * Total index size in bytes.\n     */\n    totalIndexSize: number;\n\n    /**\n     * Size of specific indexes in bytes.\n     */\n    indexSizes: {\n        _id_: number;\n        username: number;\n    };\n\n    /**\n     * This field will be “true” if the collection is capped.\n     */\n    capped: boolean;\n\n    /**\n     * Shows the maximum size of a capped collection.\n     */\n    maxSize: boolean;\n\n    /**\n     * This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use.\n     */\n    wiredTiger: any;\n\n    /**\n     * A document that reports data from the WiredTiger storage engine for each index in the collection.\n     * Other storage engines will return an empty document.\n     */\n    indexDetails: any;\n\n    /**\n     *\n     */\n    ok: number;\n}\n\n/**\n * CollectionAggregationOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\n */\nexport interface CollectionAggregationOptions {\n\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n     */\n    cursor?: { batchSize: number };\n\n    /**\n     * Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n     */\n    explain?: boolean;\n\n    /**\n     * allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n     */\n    allowDiskUse?: boolean;\n\n    /**\n     * maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n     */\n    maxTimeMS?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * CollectionInsertManyOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\n */\nexport interface CollectionInsertManyOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n}\n\nexport interface UpdateManyOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: any;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * CollectionBulkWriteOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n */\nexport interface CollectionBulkWriteOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Execute write operation in ordered or unordered fashion.\n     */\n    ordered?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * BulkWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~BulkWriteOpResult\n */\nexport interface BulkWriteOpResultObject {\n\n    /**\n     * Number of documents inserted.\n     */\n    insertedCount?: number;\n\n    /**\n     * Number of documents matched for update.\n     */\n    matchedCount?: number;\n\n    /**\n     * Number of documents modified.\n     */\n    modifiedCount?: number;\n\n    /**\n     * Number of documents deleted.\n     */\n    deletedCount?: number;\n\n    /**\n     * Number of documents upserted.\n     */\n    upsertedCount?: number;\n\n    /**\n     * Inserted document generated Id's, hash key is the index of the originating operation.\n     */\n    insertedIds?: any;\n\n    /**\n     * Upserted document generated Id's, hash key is the index of the originating operation.\n     */\n    upsertedIds?: any;\n\n    /**\n     * The command result object.\n     */\n    result?: any;\n}\n\n/**\n * MongoCountPreferences.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\n */\nexport interface MongoCountPreferences {\n\n    /**\n     * The limit of documents to count.\n     */\n    limit?: number;\n\n    /**\n     * The number of documents to skip for the count.\n     */\n    skip?: boolean;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * DeleteWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~deleteWriteOpResult\n */\nexport interface DeleteWriteOpResultObject {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents deleted.\n     */\n    result: {\n        ok?: number;\n        n?: number;\n    };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection?: any;\n\n    /**\n     * The number of documents deleted.\n     */\n    deletedCount?: number;\n}\n\n/**\n * FindAndModifyWriteOpResultObject.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~findAndModifyWriteOpResult\n */\nexport interface FindAndModifyWriteOpResultObject {\n\n    /**\n     * Document returned from findAndModify command.\n     */\n    value?: any;\n\n    /**\n     * The raw lastErrorObject returned from the command.\n     */\n    lastErrorObject?: any;\n\n    /**\n     * Is 1 if the command executed correctly.\n     */\n    ok?: number;\n}\n\n/**\n * FindOneAndReplaceOption.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\n */\nexport interface FindOneAndReplaceOption {\n\n    /**\n     * Limits the fields to return for all matching documents.\n     */\n    projection?: Object;\n\n    /**\n     * Determines which document the operation modifies if the query selects multiple documents.\n     */\n    sort?: Object;\n\n    /**\n     * The maximum amount of time to allow the query to run.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Upsert the document if it does not exist.\n     */\n    upsert?: boolean;\n\n    /**\n     * When false, returns the updated document rather than the original. The default is true.\n     */\n    returnOriginal?: boolean;\n}\n\n/**\n * GeoHaystackSearchOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\n */\nexport interface GeoHaystackSearchOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    search?: Object;\n\n    /**\n     * Max number of results to return.\n     */\n    limit?: number;\n}\n\n/**\n * GeoNearOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\n */\nexport interface GeoNearOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Max number of results to return.\n     */\n    num?: number;\n\n    /**\n     * Include results starting at minDistance from a point (2.6 or higher).\n     */\n    minDistance?: number;\n\n    /**\n     * Include results up to maxDistance from the point.\n     */\n    maxDistance?: number;\n\n    /**\n     * Include a value to multiply the distances with allowing for range conversions.\n     */\n    distanceMultiplier?: number;\n\n    /**\n     * Filter the results by a query.\n     */\n    query?: Object;\n\n    /**\n     * Perform query using a spherical model.\n     */\n    spherical?: boolean;\n\n    /**\n     * The closest location in a document to the center of the search region will always be returned MongoDB > 2.X.\n     */\n    uniqueDocs?: boolean;\n\n    /**\n     * Include the location data fields in the top level of the results MongoDB > 2.X.\n     */\n    includeLocs?: boolean;\n}\n\n/**\n * A class representation of the BSON Code type.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Code.html\n */\nexport declare class Code {\n    /**\n     *\n     * @param code a string or function.\n     * @param scope optional\n     */\n    constructor(code: string | Function, scope?: Object)\n\n    /**\n     * A string or function.\n     */\n    code: string | Function;\n\n    /**\n     * An optional scope for the function.\n     */\n    scope: any;\n}\n\n/**\n * CollectionOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\n */\nexport interface CollectionOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html\n */\nexport interface OrderedBulkOperation {\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsOrdered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#insert\n     */\n    insert(doc: Object): OrderedBulkOperation;\n}\n\n/**\n * BulkWriteResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/BulkWriteResult.html\n */\nexport interface BulkWriteResult {\n\n    /**\n     * Did bulk operation correctly execute.\n     */\n    ok: number;\n\n    /**\n     * number of inserted documents.\n     */\n    nInserted: number;\n\n    /**\n     * number of documents updated logically.\n     */\n    nUpdated: number;\n\n    /**\n     * Number of upserted documents.\n     */\n    nUpserted: number;\n\n    /**\n     *\n     Number of documents updated physically on disk.\n     */\n    nModified: number;\n\n    /**\n     * Number of removed documents.\n     */\n    nRemoved: number;\n\n    /**\n     * Return an array of inserted ids.\n     */\n    getInsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve lastOp if available.\n     */\n    getLastOp(): Object;\n\n    /**\n     * Return raw internal result.\n     */\n    getRawResponse(): Object;\n\n    /**\n     * Return the upserted id at position x.\n     */\n    getUpsertedIdAt(index: number): Object;\n\n    /**\n     * Return an array of upserted ids.\n     */\n    getUpsertedIds(): Array<Object>;\n\n    /**\n     * Retrieve the write concern error if any.\n     */\n    getWriteConcernError(): WriteConcernError;\n\n    /**\n     * Returns a specific write error object.\n     */\n    getWriteErrorAt(index: number): WriteError;\n\n    /**\n     * Returns the number of write errors off the bulk operation.\n     */\n    getWriteErrorCount(): number;\n\n    /**\n     * Retrieve all write errors.\n     */\n    getWriteErrors(): Array<Object>;\n\n    /**\n     * Returns true if the bulk operation contains a write error.\n     */\n    hasWriteErrors(): boolean;\n}\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteError.html\n */\nexport interface WriteError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error original bulk operation index.\n     */\n    index: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteConcernError.html\n */\nexport interface WriteConcernError {\n\n    /**\n     * Write concern error code.\n     */\n    code: number;\n\n    /**\n     * Write concern error message.\n     */\n    errmsg: string;\n}\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsOrdered.html\n */\nexport interface FindOperatorsOrdered {\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    delete(): OrderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    deleteOne(): OrderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     */\n    replaceOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     */\n    update(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     */\n    updateOne(doc: Object): OrderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsOrdered;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html\n */\nexport interface UnorderedBulkOperation {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options optional.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\n\n    /**\n     * Execute the ordered bulk operation.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\n     */\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\n\n    /**\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\n     * @param selector The selector for the bulk operation.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#find\n     */\n    find(selector: Object): FindOperatorsUnordered;\n\n    /**\n     * Add a single insert document to the bulk operation.\n     * @param doc The document to insert.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#insert\n     */\n    insert(doc: Object): UnorderedBulkOperation;\n}\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly).\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsUnordered.html\n */\nexport interface FindOperatorsUnordered {\n\n    /**\n     * Get the number of operations in the bulk.\n     */\n    length: number;\n\n    /**\n     * Add a remove operation to the bulk operation.\n     */\n    remove(): UnorderedBulkOperation;\n\n    /**\n     * Add a remove one operation to the bulk operation.\n     */\n    removeOne(): UnorderedBulkOperation;\n\n    /**\n     * Add a replace one operation to the bulk operation.\n     * @param doc The new document to replace the existing one with.\n     */\n    replaceOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update document to the bulk operation.\n     * @param doc Update operations\n     */\n    update(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Add a single update one document to the bulk operation.\n     * @param doc Update operations\n     */\n    updateOne(doc: Object): UnorderedBulkOperation;\n\n    /**\n     * Upsert modifier for update bulk operation.\n     */\n    upsert(): FindOperatorsUnordered;\n}\n\n/**\n * MongodbFindOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\n */\nexport interface MongodbFindOneOptions {\n\n    /**\n     * Sets the limit of documents returned in the query.\n     */\n    limit?: number;\n\n    /**\n     * Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n     */\n    sort?: Array<any> | Object;\n\n    /**\n     * The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}.\n     */\n    fields?: Object;\n\n    /**\n     * Set to skip N documents ahead in your query (useful for pagination).\n     */\n    skip?: number;\n\n    /**\n     * Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}.\n     */\n    hint?: Object;\n\n    /**\n     * Explain the query instead of returning the data.\n     */\n    explain?: boolean;\n\n    /**\n     * Snapshot query.\n     */\n    snapshot?: boolean;\n\n    /**\n     * Specify if the cursor can timeout.\n     */\n    timeout?: boolean;\n\n    /**\n     * Specify if the cursor is tailable.\n     */\n    tailable?: boolean;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * Only return the index key.\n     */\n    returnKey?: boolean;\n\n    /**\n     * Limit the number of items to scan.\n     */\n    maxScan?: number;\n\n    /**\n     * Set index bounds.\n     */\n    min?: number;\n\n    /**\n     * Set index bounds.\n     */\n    max?: number;\n\n    /**\n     * Show disk location of results.\n     */\n    showDiskLoc?: boolean;\n\n    /**\n     * You can put a $comment field on a query to make looking in the profiler logs simpler.\n     */\n    comment?: string;\n\n    /**\n     * Return document results as raw BSON buffers.\n     */\n    raw?: boolean;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Specify if the cursor should return partial results when querying against a sharded system.\n     */\n    partial?: boolean;\n\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMs?: number;\n}\n\n/**\n * InsertWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertWriteOpResult\n */\nexport interface InsertWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * All the generated _id's for the inserted documents.\n     */\n    insertedIds: Array<ObjectID>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * CollectionInsertOneOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\n */\nexport interface CollectionInsertOneOptions {\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Serialize functions on any object.\n     */\n    serializeFunctions?: boolean;\n\n    /**\n     * Force server to assign _id values instead of driver.\n     */\n    forceServerObjectId?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * InsertOneWriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertOneWriteOpResult\n */\nexport interface InsertOneWriteOpResult {\n\n    /**\n     * The total amount of documents inserted.\n     */\n    insertedCount: number;\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The driver generated ObjectId for the insert operation.\n     */\n    insertedId: ObjectID;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The raw command result object returned from MongoDB (content might vary by server version).\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents inserted.\n     */\n    result: { ok: number, n: number };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\n */\nexport interface ParallelCollectionScanOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\n     */\n    batchSize?: number;\n\n    /**\n     * The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors).\n     */\n    numCursors?: number;\n\n    /**\n     * Return all BSON documents as Raw Buffer documents.\n     */\n    raw?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\n */\nexport interface ReplaceOneOptions {\n\n    /**\n     * Update operation is an upsert.\n     */\n    upsert?: boolean;\n\n    /**\n     * The write concern.\n     */\n    w?: number | string;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * Specify a journal write concern.\n     */\n    j?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~updateWriteOpResult\n */\nexport interface UpdateWriteOpResult {\n\n    /**\n     * The raw result returned from MongoDB, field will vary depending on server version.\n     * @param ok Is 1 if the command executed correctly.\n     * @param n The total count of documents scanned.\n     * @param nModified The total count of documents modified.\n     */\n    result: { ok: number, n: number, nModified: number };\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The number of documents that matched the filter.\n     */\n    matchedCount: number;\n\n    /**\n     * The number of documents that were modified.\n     */\n    modifiedCount: number;\n\n    /**\n     * The number of documents upserted.\n     */\n    upsertedCount: number;\n\n    /**\n     * The upserted id.\n     * @param _id The upserted _id returned from the server.\n     */\n    upsertedId: { _id: ObjectID };\n}\n\n/**\n * ParallelCollectionScanOptions.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\n */\nexport interface MapReduceOptions {\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n\n    /**\n     * Sets the output target for the map reduce job.\n     * {inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}.\n     */\n    out?: Object;\n\n    /**\n     * Query filter object.\n     */\n    query?: Object;\n\n    /**\n     * Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n     */\n    sort?: Object;\n\n    /**\n     * Number of objects to return from collection.\n     */\n    limit?: number;\n\n    /**\n     * Keep temporary data.\n     */\n    keeptemp?: boolean;\n\n    /**\n     * Finalize function.\n     */\n    finalize?: Function | string;\n\n    /**\n     * Can pass in variables that can be access from map/reduce/finalize.\n     */\n    scope?: Object;\n\n    /**\n     * It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n     */\n    jsMode?: boolean;\n\n    /**\n     * Provide statistics on job execution time.\n     */\n    verbose?: boolean;\n\n    /**\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n     */\n    bypassDocumentValidation?: boolean;\n}\n\n/**\n * WriteOpResult.\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~WriteOpResult\n */\nexport interface WriteOpResult {\n\n    /**\n     * All the documents inserted using insertOne/insertMany/replaceOne.\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\n     */\n    ops: Array<any>;\n\n    /**\n     * The connection object used for the operation.\n     */\n    connection: any;\n\n    /**\n     * The command result object.\n     */\n    result: any;\n}\n\n/**\n * WriteOpResult.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~resultCallback\n */\nexport type CursorResult = any | void | boolean;\n\n/**\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly).\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html\n */\nexport declare class Cursor<T> extends Readable {\n\n    /**\n     * Cursor query sort setting.\n     */\n    sortValue: string;\n\n    /**\n     * Is Cursor able to time out.\n     */\n    timeout: boolean;\n\n    /**\n     * Get cursor ReadPreference.\n     */\n    readPreference: ReadPreference;\n\n    /**\n     * @param flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\n     */\n    addCursorFlag(flag: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param name The query modifier (must start with $, such as $orderby etc).\n     * @param value The flag boolean value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addQueryModifier\n     */\n    addQueryModifier(name: string, value: boolean): Cursor<T>;\n\n    /**\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#batchSize\n     */\n    batchSize(value: number): Cursor<T>;\n\n    /**\n     * Clone the cursor.\n     * still returns the same type.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#clone\n     */\n    clone(): Cursor<T>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(): Promise<CursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * The result callback.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n     */\n    close(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     * @param value The comment attached to this query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#comment\n     */\n    comment(value: string): Cursor<T>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, callback: MongoCallback<number>): void;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options?: CursorCommentOptions): Promise<number>;\n\n    /**\n     * Get the count of documents for this cursor.\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\n     * @param options Optional settings.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n     */\n    count(applySkipLimit: boolean, options: CursorCommentOptions, callback: MongoCallback<number>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * returns Promise if no callback passed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(): Promise<CursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\n     */\n    explain(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Set the cursor query.\n     * @param filter The filter object used for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#filter\n     */\n    filter(filter: Object): Cursor<T>;\n\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     * @param iterator The iteration callback.\n     * @param callback The end callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#forEach\n     */\n    forEach(iterator: IteratorCallback<T>, callback: EndCallback): void;\n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(): Promise<boolean>;\n\n    /**\n     * Check if there is any document still available in the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\n     */\n    hasNext(callback: MongoCallback<boolean>): void;\n\n    /**\n     * Set the cursor hint.\n     * @param hint If specified, then the query system will only consider plans using the hinted index.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hint\n     */\n    hint(hint: Object): Cursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Set the limit for the cursor.\n     * @param value The limit for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#limit\n     */\n    limit(value: number): Cursor<T>;\n\n    /**\n     * SMap all documents using the provided function.\n     * @param transform The mapping transformation method.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#map\n     */\n    map(transform: Function): Cursor<T>;\n\n    /**\n     * Set the cursor max.\n     * @param max Specify a $max value to specify the exclusive upper bound for a specific index in\n     * order to constrain the results of find(). The $max specifies the upper bound for\n     * all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#max\n     */\n    max(max: number): Cursor<T>;\n\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the\n     * timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise).\n     * @param value Number of milliseconds to wait before aborting the tailed query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxAwaitTimeMS\n     */\n    maxAwaitTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor maxScan.\n     * @param maxScan Constrains the query to only scan the specified number of documents when fulfilling the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxScan\n     */\n    maxScan(maxScan: Object): Cursor<T>;\n\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher).\n     * @param value Number of milliseconds to wait before aborting the query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor min.\n     * @param min Specify a $min value to specify the inclusive lower bound for a specific index in order to\n     * constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#min\n     */\n    min(min: number): Cursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(): Promise<CursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    next(callback: MongoCallback<CursorResult>): void;\n\n    /**\n     * Sets a field projection for the query.\n     * @param value The field projection object.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#project\n     */\n    project(value: Object): Cursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Set the cursor returnKey.\n     * @param returnKey Only return the index field or fields for the results of the query. If $returnKey is set\n     * to true and the query does not use an index to perform the read operation,\n     * the returned documents will not contain any fields. Use one of the following forms:\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\n     */\n    returnKey(returnKey: Object): Cursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#rewind\n     */\n    rewind(): void;\n\n    /**\n     * Set a node.js specific cursor option.\n     * @param field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\n     * @param value The field value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setCursorOption\n     */\n    setCursorOption(field: string, value: Object): Cursor<T>;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): Cursor<T>;\n\n    /**\n     * Set the cursor showRecordId.\n     * @param showRecordId The $showDiskLoc option has now been deprecated and replaced with the\n     * showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#showRecordId\n     */\n    showRecordId(showRecordId: Object): Cursor<T>;\n\n    /**\n     * Set the skip for the cursor.\n     * @param value The skip for the cursor query.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#skip\n     */\n    skip(value: number): Cursor<T>;\n\n    /**\n     * Set the cursor snapshot.\n     * @param snapshot The $snapshot operator prevents the cursor from returning a document more than\n     * once because an intervening write operation results in a move of the document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#snapshot\n     */\n    snapshot(snapshot: Object): Cursor<T>;\n\n    /**\n     * Sets the sort order of the cursor query.\n     * @param keyOrList The key or keys set for the sort.\n     * @param direction The direction of the sorting (1 or -1).\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#sort\n     */\n    sort(keyOrList: string | Object[] | Object, direction?: number): Cursor<T>;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @param transform A transformation method applied to each document emitted by the stream.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#stream\n     */\n    stream(options?: { transform?: Function }): Cursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previously accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\n     * memory to store the results. Note that the array only contain partial results when this cursor had\n     * been previously accessed. In that case, cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some\n     * data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * Get the count of documents for this cursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\n */\nexport interface CursorCommentOptions {\n\n    /**\n     * The number of documents to skip.\n     */\n    skip?: number;\n\n    /**\n     * The maximum amounts to count before aborting.\n     */\n    limit?: number;\n\n    /**\n     * Number of miliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * An index name hint for the query.\n     */\n    hint?: string;\n\n    /**\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n     */\n    readPreference?: ReadPreference | string;\n}\n\n/**\n * Creates a new Change Stream instance.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html\n */\nexport declare class ChangeStream extends Readable {\n\n    constructor(changeDomain: MongoClient | Db | Collection<any>, pipeline: Object[], options?: ChangeStreamOptions);\n\n    /**\n     * Close the Change Stream.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#close\n     */\n    close(): Promise<any>;\n\n    /**\n     * Close the Change Stream.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#close\n     */\n    close(callback: MongoCallback<any>): void;\n\n    /**\n     * Check if there is any document still available in the Change Stream.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#hasNext\n     */\n    hasNext(): Promise<any>;\n\n    /**\n     * Check if there is any document still available in the Change Stream.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#hasNext\n     */\n    hasNext(callback: MongoCallback<any>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#next\n     */\n    next(): Promise<any>;\n\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#next\n     */\n    next(callback: MongoCallback<any>): void;\n\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ChangeStream.html#stream\n     */\n    stream(options?: { transform: Function }): Cursor<any>;\n}\n\n/**\n * ChangeStreamOptions\n */\nexport interface ChangeStreamOptions {\n\n    /**\n     * Allowed values: ‘default’, ‘updateLookup’.\n     * When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document,\n     * as well as a copy of the entire document that was changed from some time after the change occurred.\n     */\n    fullDocument?: string;\n\n    /**\n     * The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n     */\n    maxAwaitTimeMS?: number;\n\n    /**\n     * Specifies the logical starting point for the new change stream.\n     * This should be the _id field from a previously returned change stream document.\n     */\n    resumeAfter?: Object;\n\n    /**\n     * The number of documents to return per batch.\n     */\n    batchSize?: number;\n\n    /**\n     * Specify collation settings for operation.\n     */\n    collation?: CollationDocument;\n\n    /**\n     * The read preference. Defaults to the read preference of the database or collection.\n     */\n    readPreference?: ReadPreference;\n}\n\n/**\n * CollationDocument\n */\nexport interface CollationDocument {\n    locale: string;\n    strength?: number;\n    caseLevel?: boolean;\n    caseFirst?: string;\n    numericOrdering?: boolean;\n    alternate?: string;\n    maxVariable?: string;\n    backwards?: boolean;\n    normalization?: boolean;\n\n}\n\n/**\n * A class representing a client session on the server.\n * WARNING: not meant to be instantiated directly.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html\n */\nexport interface ClientSession extends EventEmitter {\n\n    /**\n     * The server id associated with this session\n     */\n    id: any;\n\n    /**\n     * Aborts the currently active transaction in this session.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#abortTransaction\n     */\n    abortTransaction(): Promise<void>;\n\n    /**\n     * Aborts the currently active transaction in this session.\n     * @param callback Optional callback for completion of this operation\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#abortTransaction\n     */\n    abortTransaction(callback?: MongoCallback<void>): Promise<void>;\n\n    /**\n     * Advances the operationTime for a ClientSession.\n     * @param operationTime the BSON.Timestamp of the operation type it is desired to advance to.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#advanceOperationTime\n     */\n    advanceOperationTime(operationTime: Timestamp): void;\n\n    /**\n     * Commits the currently active transaction in this session.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#commitTransaction\n     */\n    commitTransaction(): Promise<void>;\n\n    /**\n     * Commits the currently active transaction in this session.\n     * @param callback Optional callback for completion of this operation.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#commitTransaction\n     */\n    commitTransaction(callback?: MongoCallback<void>): Promise<void>;\n\n    /**\n     * Ends this session on the server.\n     * @param callback Optional callback for completion of this operation.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#endSession\n     */\n    endSession(callback?: MongoCallback<void>): void;\n\n    /**\n     * Ends this session on the server.\n     * @param options Optional settings. Currently reserved for future use.\n     * @param callback Optional callback for completion of this operation.\n     * @see @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#endSession\n     */\n    endSession(options?: any, callback?: MongoCallback<void>): void;\n\n    /**\n     * Used to determine if this session equals another.\n     * @param session A class representing a client session on the server.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#equals\n     */\n    equals(session: ClientSession): boolean;\n\n    /**\n     * Increment the transaction number on the internal ServerSession.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#incrementTransactionNumber\n     */\n    incrementTransactionNumber(): void;\n\n    /**\n     * Check this session is currently in a transaction or not.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#inTransaction\n     */\n    inTransaction(): boolean;\n\n    /**\n     * Starts a new transaction with the given options.\n     * @param options Optional settings.\n     * @see http://mongodb.github.io/node-mongodb-native/3.1/api/ClientSession.html#startTransaction\n     */\n    startTransaction(options?: TransactionOptions): void;\n\n}\n\n/**\n * Options to pass when creating a Client Session\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#SessionOptions\n */\nexport interface SessionOptions {\n\n    /**\n     * Whether causal consistency should be enabled on this session\n     */\n    causalConsistency?: boolean;\n\n    /**\n     * The default TransactionOptions to use for transactions started on this session.\n     */\n    defaultTransactionOptions?: TransactionOptions;\n}\n\n/**\n * TransactionOptions\n */\nexport interface TransactionOptions {\n\n    readConcern?: ReadConcern;\n    writeConcern?: WriteConcern;\n    readPreference?: ReadPreference;\n}\n\n/**\n * MongoClientCommonOption\n */\nexport interface MongoClientCommonOption {\n    /**\n     * Do not make the db an event listener to the original connection.\n     */\n    noListener?: boolean;\n\n    /**\n     * Control if you want to return a cached instance or have a new one created\n     */\n    returnNonCachedInstance?: boolean;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#ReadConcern\n */\nexport type ReadConcernLevel = \"local\" | \"available\" | \"majority\" | \"linearizable\" | \"snapshot\";\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#ReadConcern\n */\nexport interface ReadConcern {\n    level?: ReadConcernLevel;\n}\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @see http://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n */\nexport interface WriteConcern {\n\n    /**\n     * requests acknowledgement that the write operation has\n     * propagated to a specified number of mongod hosts\n     */\n    w?: number | \"majority\" | string;\n\n    /**\n     * requests acknowledgement from MongoDB that the write operation has\n     * been written to the journal\n     */\n    j?: boolean;\n\n    /**\n     * a time limit, in milliseconds, for the write concern\n     */\n    wtimeout?: number;\n}\n\n/**\n * The callback format for the forEach iterator method.\n * @param doc An emitted document for the iterator.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~iteratorCallback\n */\nexport interface IteratorCallback<T> {\n    (doc: T): void;\n}\n\n/**\n * The callback error format for the forEach iterator method.\n * @param error An error instance representing the error during the execution.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~endCallback\n */\nexport interface EndCallback {\n    (error: MongoError): void;\n}\n\n/**\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#~resultCallback\n */\nexport type AggregationCursorResult = any | void;\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly),\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html\n */\nexport interface AggregationCursor<T> extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#batchSize\n     */\n    batchSize(value: number): AggregationCursor<T>;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#clone\n     */\n    clone(): AggregationCursor<T>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a AggregationCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Iterates over all the documents for this cursor. As with {cursor.toArray}, not all of the elements will\n     * be iterated if this cursor had been previouly accessed. In that case, {cursor.rewind} can be used to reset\n     * the cursor. However, unlike {cursor.toArray}, the cursor will only hold a maximum of batch size elements\n     * at any given time if batch size is specified. Otherwise, the caller is responsible for making sure\n     * that the entire result can fit the memory.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Execute the explain for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(): Promise<AggregationCursorResult>;\n\n    /**\n     * Execute the explain for the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\n     */\n    explain(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a geoNear stage to the aggregation pipeline.\n     * @param document The geoNear stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#geoNear\n     */\n    geoNear(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a group stage to the aggregation pipeline.\n     * @param document The group stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#group\n     */\n    group(document: Object): AggregationCursor<T>;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a limit stage to the aggregation pipeline.\n     * @param value The state limit value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#limit\n     */\n    limit(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a match stage to the aggregation pipeline.\n     * @param document The match stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#match\n     */\n    match(document: Object): AggregationCursor<T>;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): AggregationCursor<T>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Add a out stage to the aggregation pipeline.\n     * @param destination The destination name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#out\n     */\n    out(destination: string): AggregationCursor<T>;\n\n    /**\n     * Add a project stage to the aggregation pipeline.\n     * @param document The project stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#project\n     */\n    project(document: Object): AggregationCursor<T>;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Add a redact stage to the aggregation pipeline.\n     * @param document The redact stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#redact\n     */\n    redact(document: Object): AggregationCursor<T>;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#rewind\n     */\n    rewind(): AggregationCursor<T>;\n\n    /**\n     * Add a skip stage to the aggregation pipeline.\n     * @param value The state skip value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#setEncoding\n     */\n    skip(value: number): AggregationCursor<T>;\n\n    /**\n     * Add a sort stage to the aggregation pipeline.\n     * @param document The sort stage document.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#sort\n     */\n    sort(document: Object): AggregationCursor<T>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(): Promise<T[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contain partial\n     * results when this cursor had been previouly accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<T[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n\n    /**\n     * Add a unwind stage to the aggregation pipeline.\n     * @param field The unwind field name.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unwind\n     */\n    unwind(field: string): AggregationCursor<T>;\n}\n\n/**\n * CommandCursor.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html\n */\nexport interface CommandCursor extends Readable {\n\n    /**\n     * Set the batch size for the cursor.\n     * @param value The batchSize for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#batchSize\n     */\n    batchSize(value: number): CommandCursor;\n\n    /**\n     * Clone the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#clone\n     */\n    clone(): CommandCursor;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(): Promise<AggregationCursorResult>;\n\n    /**\n     * Close the cursor, sending a KillCursor command and emitting close.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\n     */\n    close(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Each\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#each\n     */\n    each(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * Is the cursor closed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#isClosed\n     */\n    isClosed(): boolean;\n\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline.\n     * @param value The state maxTimeMS value.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#maxTimeMS\n     */\n    maxTimeMS(value: number): CommandCursor;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(): Promise<AggregationCursorResult>;\n\n    /**\n     * Get the next available document from the cursor, returns null if no more documents are available.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\n     */\n    next(callback: MongoCallback<AggregationCursorResult>): void;\n\n    /**\n     * The read() method pulls some data out of the internal buffer and returns it.\n     * If there is no data available, then it will return null.\n     * @param size Optional argument to specify how much data to read.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#read\n     */\n    read(size: number): string | Buffer | void;\n\n    /**\n     * Resets the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#rewind\n     */\n    rewind(): CommandCursor;\n\n    /**\n     * Set the ReadPreference for the cursor.\n     * @param readPreference The new read preference for the cursor.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setReadPreference\n     */\n    setReadPreference(readPreference: string | ReadPreference): CommandCursor;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(): Promise<any[]>;\n\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\n     * @param callback The result callback.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\n     */\n    toArray(callback: MongoCallback<any[]>): void;\n\n    /**\n     * This is useful in certain cases where a stream is being consumed by a parser,\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\n     * so that the stream can be passed on to some other party.\n     * @param stream Chunk of data to unshift onto the read queue.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unshift\n     */\n    unshift(stream: Buffer | string): void;\n}\n\n/**\n * GridFSBucket.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport declare class GridFSBucket {\n\n    /**\n     *\n     * @param db A db handle.\n     * @param options Optional settings.\n     */\n    constructor(db: Db, options?: GridFSBucketOptions);\n\n    /**\n     * Deletes a file with the given id.\n     * @param id The id of the file doc\n     * @param callback The result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#delete\n     */\n    delete(id: ObjectID, callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Removes this bucket's files collection, followed by its chunks collection.\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#drop\n     */\n    drop(callback?: GridFSBucketErrorCallback): void;\n\n    /**\n     * Convenience wrapper around find on the files collection\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n     */\n    find(filter?: Object, options?: GridFSBucketFindOptions): Cursor<any>;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file.\n     * @param id The id of the file doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStream\n     */\n    openDownloadStream(id: ObjectID, options?: { start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file\n     * @param filename The id of the file doc\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStreamByName\n     */\n\n    openDownloadStreamByName(filename: string, options?: { revision: number, start: number, end: number }): GridFSBucketReadStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n     */\n    openUploadStream(filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS for a custom file id.\n     * The stream's 'id' property contains the resulting file's id.\n     * @param id A custom id used to identify the file.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStreamWithId\n     */\n    openUploadStreamWithId(id: string | number | Object, filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\n\n    /**\n     * Renames the file with the given _id to the given string.\n     * @param id the id of the file to rename.\n     * @param filename new name for the file.\n     * @param callback The result callback\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#rename\n     */\n    rename(id: ObjectID, filename: string, callback?: GridFSBucketErrorCallback): void;\n}\n\n/**\n * Constructor for a streaming GridFS interface.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\n */\nexport interface GridFSBucketOptions {\n\n    /**\n     * The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     */\n    bucketName?: string;\n\n    /**\n     * Number of bytes stored in each chunk. Defaults to 255KB.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional write concern to be passed to write operations, for instance { w: 1 }.\n     */\n    writeConcern?: WriteConcern;\n\n    /**\n     * Optional read preference to be passed to read operations.\n     */\n    ReadPreference?: ReadPreference;\n}\n\n/**\n * GridFSBucketErrorCallback.\n * @param err An error instance representing any errors that occurred.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#~errorCallback\n */\nexport interface GridFSBucketErrorCallback {\n    (err?: MongoError): void;\n}\n\n/**\n * GridFSBucketFindOptions.\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\n */\nexport interface GridFSBucketFindOptions {\n\n    /**\n     * Optional batch size for cursor.\n     */\n    batchSize?: number;\n\n    /**\n     * Optional limit for cursor.\n     */\n    limit?: number;\n\n    /**\n     * Optional maxTimeMS for cursor.\n     */\n    maxTimeMS?: number;\n\n    /**\n     * Optionally set cursor's noCursorTimeout flag.\n     */\n    noCursorTimeout?: boolean;\n\n    /**\n     * Optional skip for cursor.\n     */\n    skip?: number;\n\n    /**\n     * Optional sort for cursor.\n     */\n    sort?: Object;\n}\n\n/**\n * GridFSBucketOpenUploadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\n */\nexport interface GridFSBucketOpenUploadStreamOptions {\n\n    /**\n     * Optional overwrite this bucket's chunkSizeBytes for this file.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * Optional object to store in the file document's metadata field.\n     */\n    metadata?: Object;\n\n    /**\n     * Optional string to store in the file document's contentType field.\n     */\n    contentType?: string;\n\n    /**\n     * Optional array of strings to store in the file document's aliases field.\n     */\n    aliases?: Array<string>;\n}\n\n/**\n * GridFSBucketReadStream.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport declare class GridFSBucketReadStream extends Readable {\n\n    /**\n     *\n     * @param chunks Handle for chunks collection.\n     * @param files Handle for files collection.\n     * @param readPreference The read preference to use.\n     * @param filter The query to use to find the file document.\n     * @param options Optional settings.\n     */\n    constructor(chunks: Collection<any>, files: Collection<any>, readPreference: Object, filter: Object, options?: GridFSBucketReadStreamOptions);\n}\n\n/**\n * GridFSBucketReadStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\n */\nexport interface GridFSBucketReadStreamOptions {\n\n    /**\n     * Optional sort for the file find query.\n     */\n    sort?: number;\n\n    /**\n     * Optional skip for the file find query.\n     */\n    skip?: number;\n\n    /**\n     * Optional 0-based offset in bytes to start streaming from.\n     */\n    start?: number;\n\n    /**\n     * Optional 0-based offset in bytes to stop streaming before.\n     */\n    end?: number;\n}\n\n/**\n * GridFSBucketWriteStream\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport declare class GridFSBucketWriteStream extends Writable {\n\n    /**\n     *\n     * @param bucket Handle for this stream's corresponding bucket.\n     * @param filename The value of the 'filename' key in the files doc.\n     * @param options Optional settings.\n     */\n    constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions);\n}\n\n/**\n * GridFSBucketWriteStreamOptions.\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\n */\nexport interface GridFSBucketWriteStreamOptions {\n\n    /**\n     * Custom file id for the GridFS file.\n     */\n    id?: string | number | Object;\n\n    /**\n     * The chunk size to use, in bytes.\n     */\n    chunkSizeBytes?: number;\n\n    /**\n     * The write concern.\n     */\n    w?: number;\n\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n\n    /**\n     * The journal write concern.\n     */\n    j?: number;\n}\n","/*!\n */\nimport \"reflect-metadata\";\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\nimport {Connection} from \"./connection/Connection\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nimport {getFromContainer} from \"./container\";\nimport {ObjectType} from \"./common/ObjectType\";\nimport {Repository} from \"./repository/Repository\";\nimport {EntityManager} from \"./entity-manager/EntityManager\";\nimport {PlatformTools} from \"./platform/PlatformTools\";\nimport {TreeRepository} from \"./repository/TreeRepository\";\nimport {MongoRepository} from \"./repository/MongoRepository\";\nimport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nimport {PromiseUtils} from \"./util/PromiseUtils\";\nimport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nimport {SqljsEntityManager} from \"./entity-manager/SqljsEntityManager\";\nimport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\nimport {EntitySchema} from \"./entity-schema/EntitySchema\";\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./common/ObjectType\";\nexport * from \"./common/ObjectLiteral\";\nexport * from \"./common/DeepPartial\";\nexport * from \"./error/QueryFailedError\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/columns/ViewColumn\";\nexport * from \"./decorator/columns/ObjectIdColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/options/ValueTransformer\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/ChildEntity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/entity-view/ViewEntity\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionManager\";\nexport * from \"./decorator/transaction/TransactionRepository\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/tree/Tree\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/Unique\";\nexport * from \"./decorator/Check\";\nexport * from \"./decorator/Exclusion\";\nexport * from \"./decorator/Generated\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./find-options/operator/Any\";\nexport * from \"./find-options/operator/Between\";\nexport * from \"./find-options/operator/Equal\";\nexport * from \"./find-options/operator/In\";\nexport * from \"./find-options/operator/IsNull\";\nexport * from \"./find-options/operator/LessThan\";\nexport * from \"./find-options/operator/LessThanOrEqual\";\nexport * from \"./find-options/operator/Like\";\nexport * from \"./find-options/operator/MoreThan\";\nexport * from \"./find-options/operator/MoreThanOrEqual\";\nexport * from \"./find-options/operator/Not\";\nexport * from \"./find-options/operator/Raw\";\nexport * from \"./find-options/FindConditions\";\nexport * from \"./find-options/FindManyOptions\";\nexport * from \"./find-options/FindOneOptions\";\nexport * from \"./find-options/FindOperator\";\nexport * from \"./find-options/FindOperatorType\";\nexport * from \"./find-options/JoinOptions\";\nexport * from \"./find-options/OrderByCondition\";\nexport * from \"./logger/Logger\";\nexport * from \"./logger/AdvancedConsoleLogger\";\nexport * from \"./logger/SimpleConsoleLogger\";\nexport * from \"./logger/FileLogger\";\nexport * from \"./metadata/EntityMetadata\";\nexport * from \"./entity-manager/EntityManager\";\nexport * from \"./repository/AbstractRepository\";\nexport * from \"./repository/Repository\";\nexport * from \"./repository/BaseEntity\";\nexport * from \"./repository/TreeRepository\";\nexport * from \"./repository/MongoRepository\";\nexport * from \"./repository/RemoveOptions\";\nexport * from \"./repository/SaveOptions\";\nexport * from \"./schema-builder/table/TableColumn\";\nexport * from \"./schema-builder/table/TableForeignKey\";\nexport * from \"./schema-builder/table/TableIndex\";\nexport * from \"./schema-builder/table/Table\";\nexport * from \"./driver/mongodb/typings\";\nexport * from \"./driver/types/DatabaseType\";\nexport * from \"./driver/sqlserver/MssqlParameter\";\n\nexport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nexport {Connection} from \"./connection/Connection\";\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nexport {Driver} from \"./driver/Driver\";\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\nexport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\nexport {DeleteQueryBuilder} from \"./query-builder/DeleteQueryBuilder\";\nexport {InsertQueryBuilder} from \"./query-builder/InsertQueryBuilder\";\nexport {UpdateQueryBuilder} from \"./query-builder/UpdateQueryBuilder\";\nexport {RelationQueryBuilder} from \"./query-builder/RelationQueryBuilder\";\nexport {Brackets} from \"./query-builder/Brackets\";\nexport {WhereExpression} from \"./query-builder/WhereExpression\";\nexport {InsertResult} from \"./query-builder/result/InsertResult\";\nexport {UpdateResult} from \"./query-builder/result/UpdateResult\";\nexport {DeleteResult} from \"./query-builder/result/DeleteResult\";\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\nexport {EntityManager} from \"./entity-manager/EntityManager\";\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\nexport {Repository} from \"./repository/Repository\";\nexport {TreeRepository} from \"./repository/TreeRepository\";\nexport {MongoRepository} from \"./repository/MongoRepository\";\nexport {FindOneOptions} from \"./find-options/FindOneOptions\";\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\nexport {BaseEntity} from \"./repository/BaseEntity\";\nexport {EntitySchema} from \"./entity-schema/EntitySchema\";\nexport {EntitySchemaColumnOptions} from \"./entity-schema/EntitySchemaColumnOptions\";\nexport {EntitySchemaIndexOptions} from \"./entity-schema/EntitySchemaIndexOptions\";\nexport {EntitySchemaRelationOptions} from \"./entity-schema/EntitySchemaRelationOptions\";\nexport {ColumnType} from \"./driver/types/ColumnTypes\";\nexport {PromiseUtils} from \"./util/PromiseUtils\";\n\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n\n    return globalScope.typeormMetadataArgsStorage;\n}\n\n/**\n * Reads connection options stored in ormconfig configuration file.\n */\nexport async function getConnectionOptions(connectionName: string = \"default\"): Promise<ConnectionOptions> {\n    return new ConnectionOptionsReader().get(connectionName);\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager);\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(): Promise<Connection>;\n\n/**\n * Creates a new connection from the ormconfig file with a given name.\n */\nexport async function createConnection(name: string): Promise<Connection>;\n\n/**\n * Creates a new connection and registers it in the manager.\n */\nexport async function createConnection(options: ConnectionOptions): Promise<Connection>;\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(optionsOrName?: any): Promise<Connection> {\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n    const options = optionsOrName instanceof Object ? optionsOrName : await getConnectionOptions(connectionName);\n    return getConnectionManager().create(options).connect();\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * All connections from the ormconfig will be created.\n */\nexport async function createConnections(options?: ConnectionOptions[]): Promise<Connection[]> {\n    if (!options)\n        options = await new ConnectionOptionsReader().all();\n    const connections = options.map(options => getConnectionManager().create(options));\n    return PromiseUtils.runInSequence(connections, connection => connection.connect());\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName: string = \"default\"): Connection {\n    return getConnectionManager().get(connectionName);\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).manager;\n}\n\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getMongoManager(connectionName: string = \"default\"): MongoEntityManager {\n    return getConnectionManager().get(connectionName).manager as MongoEntityManager;\n}\n\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n */\nexport function getSqljsManager(connectionName: string = \"default\"): SqljsEntityManager {\n    return getConnectionManager().get(connectionName).manager as SqljsEntityManager;\n}\n\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getTreeRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): TreeRepository<Entity> {\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getCustomRepository<T>(customRepository: ObjectType<T>, connectionName: string = \"default\"): T {\n    return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\n}\n\n/**\n * Gets mongodb repository for the given entity class or name.\n */\nexport function getMongoRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): MongoRepository<Entity> {\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClass);\n}\n\n/**\n * Creates a new query builder.\n */\nexport function createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|string, alias?: string, connectionName: string = \"default\"): SelectQueryBuilder<Entity> {\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n    }\n\n    return getConnection(connectionName).createQueryBuilder();\n}\n","import { Entity, PrimaryGeneratedColumn, Column, OneToMany, BaseEntity } from \"typeorm\";\nimport { Token } from \"./Token\";\n\n@Entity(\"users\")\nexport class User extends BaseEntity{\n\n    @PrimaryGeneratedColumn()\n    id!: number;\n\n    @Column()\n    email!: string;\n\n    @Column()\n    password!: string;\n    \n    @OneToMany(_ => Token, credID => credID.user)\n    tokens!: Token[];\n\n}","import { Entity, Column, PrimaryColumn, ManyToOne, BaseEntity } from \"typeorm\";\nimport { User } from \"./User\";\n\n@Entity()\nexport class Token extends BaseEntity{\n\n    @PrimaryColumn()\n    access_token!: string;\n\n    @Column()\n    refresh_token!: string;\n\n    @Column()\n    credentials_id!: string;\n    \n    @ManyToOne(_ => User, user => user.tokens)\n    user!: User;\n}","import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { stringify } from \"querystring\";\nimport { TL_SECRET, client_id } from \"../constants\";\nimport { IToken } from \"../../interfaces/IToken\";\nimport { IMe, IMeResponse } from \"../../interfaces/IMe\";\nimport { Token } from \"../entity/Token\";\nimport { User } from \"../entity/User\";\n\nexport default class Truelayer {  \n    \n    static async exchangeCode(code: string){\n        let config: AxiosRequestConfig = {\n            url: \"https://auth.truelayer.com/connect/token\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            data: stringify({\n                grant_type: \"authorization_code\",\n                client_id: client_id,\n                client_secret: TL_SECRET,\n                redirect_uri: \"http://localhost:3000/callback/callback\",\n                code: code\n            })\n        }\n\n        const response: AxiosResponse<IToken> = await axios(config);\n    \n        let access_token = response.data.access_token;\n        let refresh_token = response.data.refresh_token;\n\n        return { access_token, refresh_token }\n    }\n\n    static async meEndpoint(access_token: string): Promise<IMe | undefined>{\n        let config: AxiosRequestConfig = {\n            url: \"https://api.truelayer.com/data/v1/me\",\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${access_token}`\n            },\n        } \n\n        let responseMe: AxiosResponse<IMeResponse>;\n\n        try{\n            responseMe = await axios(config);\n        } catch(e){\n            return undefined;\n        }\n\n        const metadata: IMe = responseMe.data.results[0];\n\n        return metadata;\n    }\n\n    static async insertToken(access_token: string, refresh_token: string, credentials_id: string, user: User){\n        const token = new Token();\n        token.access_token = access_token;\n        token.refresh_token = refresh_token;\n        token.credentials_id = credentials_id;\n        token.user = user;\n        \n        try {\n            await token.save();\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    static async refreshToken(old_refresh_token: string){\n        let config: AxiosRequestConfig = {\n            url: \"https://auth.truelayer.com/connect/token\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            data: stringify({\n                grant_type: \"refresh_token\",\n                client_id: client_id,\n                client_secret: TL_SECRET,\n                refresh_token: old_refresh_token\n            })\n        }\n\n        const response: AxiosResponse<IToken> = await axios(config);\n        let access_token = response.data.access_token;\n        let refresh_token = response.data.refresh_token;\n\n        try {\n            await Token.update({ refresh_token: old_refresh_token }, { access_token, refresh_token })\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    static async validateToken(access_token: string){\n        let config: AxiosRequestConfig = {\n            url: \"https://api.truelayer.com/data/v1/me\",\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${access_token}`\n            },\n        } \n\n        let responseAcc: AxiosResponse;\n\n        try{\n            responseAcc = await axios(config);\n        } catch(e){\n            return false;\n        }\n\n        const status = responseAcc.status;\n\n        if(status === 200){\n            return true;\n        } else { \n            return false; \n        }\n    }\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component } from \"vue-property-decorator\";\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { IMe, Provider } from \"../../../interfaces/IMe\";\nimport { ICreds } from \"../../../interfaces/ICreds\";\nimport Table from \"./components/Table.vue\";\nimport Navbar from \"./components/Navbar.vue\";\nimport swal from \"sweetalert\";\nimport Truelayer from \"../../../app/services/truelayer\";\n\n@Component({\n    components: {\n        Table: Table,\n        Navbar: Navbar\n    }\n})\nexport default class Home extends Vue {\n    credentials_id: string = \"\";\n    consent_status: string = \"\";\n    consent_status_created_at: string = \"\";\n    consent_status_expires_at: string = \"\";\n    provider_name: string = \"\";\n    provider_logo: string = \"\";\n    textLogOut = \"Log out\";\n    textRefresh = \"Refresh Token\";\n    textValidate = \"Validate Token\";\n    textAdd = \"Add Token\";\n    rowData: [] = [];\n\n    async mounted() {\n        let config: AxiosRequestConfig = {\n            url: \"http://localhost:3000/home/home\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n        let response: AxiosResponse<ICreds[]>;\n\n        try {\n            response = await axios(config);\n        } catch (e) {\n            return swal(\"Failed to fetch!\");\n        }\n        // if (!response.data.results) {\n        //     window.location.replace(\"http://localhost:3000/access/auth.html\");\n        // }\n        console.log(response);\n        const tokens = response.data;\n        console.log(tokens);\n\n        for (const token of tokens) {\n            const access_token = token.access_token;\n            const me = await Truelayer.meEndpoint(access_token);\n            console.log(me);\n            if(!me){\n                return \"fail\";\n            }\n\n            this.credentials_id = me.credentials_id;\n            this.consent_status = me.consent_status;\n            this.consent_status_created_at = me.consent_created_at;\n            this.consent_status_expires_at = me.consent_expires_at;\n            const provider: Provider = me.provider;\n            this.provider_name = provider.display_name;\n            this.provider_logo = provider.logo_uri;\n            //add table row\n        }\n    }\n}\n","import Vue from 'vue';\nimport Container from \"./Home.vue\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nnew Vue(Container).$mount(\"#app\");"]}